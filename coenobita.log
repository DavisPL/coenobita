[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Crate type is lib
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:4 ~ a[af30]::integrity::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:4 ~ a[c74b]::integrity::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).5),
    kind: Struct(
        LangItem(
            Range,
            src/integrity/mod.rs:72:14: 72:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: src/integrity/mod.rs:72:14: 72:15 (#0),
                        },
                    ),
                    span: src/integrity/mod.rs:72:14: 72:15 (#0),
                },
                span: src/integrity/mod.rs:72:14: 72:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: src/integrity/mod.rs:72:17: 72:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(24:3 ~ c[3801]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(24:0 ~ c[3801]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(24:3 ~ c[3801]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: src/integrity/mod.rs:72:17: 72:25 (#0),
                        },
                        [],
                    ),
                    span: src/integrity/mod.rs:72:17: 72:27 (#0),
                },
                span: src/integrity/mod.rs:72:17: 72:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: src/integrity/mod.rs:72:14: 72:27 (#0),
}
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).5),
    kind: Struct(
        LangItem(
            Range,
            src/integrity/mod.rs:72:14: 72:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: src/integrity/mod.rs:72:14: 72:15 (#0),
                        },
                    ),
                    span: src/integrity/mod.rs:72:14: 72:15 (#0),
                },
                span: src/integrity/mod.rs:72:14: 72:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: src/integrity/mod.rs:72:17: 72:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[3801]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[3801]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[3801]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: src/integrity/mod.rs:72:17: 72:25 (#0),
                        },
                        [],
                    ),
                    span: src/integrity/mod.rs:72:17: 72:27 (#0),
                },
                span: src/integrity/mod.rs:72:17: 72:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: src/integrity/mod.rs:72:14: 72:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:72:17: 72:25 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).10), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).11), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:72:17: 72:25 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).10), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).11), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Adt(
        {
            "start": Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            "end": Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Adt(
        {
            "start": Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            "end": Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: src/integrity/mod.rs:72:14: 72:27 (#6),
                        res: Local(
                            HirId(DefId(0:4 ~ a[c74b]::integrity::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).29),
                                res: Local(
                                    HirId(DefId(0:4 ~ a[c74b]::integrity::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: src/integrity/mod.rs:72:14: 72:27 (#6),
        },
    ),
    span: src/integrity/mod.rs:72:14: 72:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:72:14: 72:27 (#6), res: Local(HirId(DefId(0:4 ~ a[c74b]::integrity::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).29), res: Local(HirId(DefId(0:4 ~ a[c74b]::integrity::main).28)), args: None, infer_args: true }] })
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: src/integrity/mod.rs:72:14: 72:27 (#8),
                        res: Local(
                            HirId(DefId(0:4 ~ a[af30]::integrity::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).29),
                                res: Local(
                                    HirId(DefId(0:4 ~ a[af30]::integrity::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: src/integrity/mod.rs:72:14: 72:27 (#8),
        },
    ),
    span: src/integrity/mod.rs:72:14: 72:27 (#8),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Adt(
        {
            "start": Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            "end": Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:72:14: 72:27 (#8), res: Local(HirId(DefId(0:4 ~ a[af30]::integrity::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).29), res: Local(HirId(DefId(0:4 ~ a[af30]::integrity::main).28)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Adt(
        {
            "start": Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            "end": Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:73:9: 73:10 (#0), res: Local(HirId(DefId(0:4 ~ a[c74b]::integrity::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).22), res: Local(HirId(DefId(0:4 ~ a[c74b]::integrity::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:73:9: 73:10 (#0), res: Local(HirId(DefId(0:4 ~ a[af30]::integrity::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).22), res: Local(HirId(DefId(0:4 ~ a[af30]::integrity::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: no-location (#4), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#4, hir_id: HirId(DefId(0:5 ~ a[af30]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#4, hir_id: HirId(DefId(0:5 ~ a[af30]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'test'
=========
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path TypeRelative(Ty { hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).6), kind: Path(Resolved(None, Path { span: tests/test.rs:3:13: 3:32 (#0), res: Def(Struct, DefId(24:1872 ~ trybuild[1643]::TestCases)), segments: [PathSegment { ident: trybuild#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).4), res: Def(Mod, DefId(24:0 ~ trybuild[1643])), args: None, infer_args: true }, PathSegment { ident: TestCases#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).5), res: Def(Struct, DefId(24:1872 ~ trybuild[1643]::TestCases)), args: None, infer_args: true }] })), span: tests/test.rs:3:13: 3:32 (#0) }, PathSegment { ident: new#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).7), res: Err, args: None, infer_args: true })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:5:5: 5:6 (#0), res: Local(HirId(DefId(0:6 ~ test[9ab2]::test#1).9)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).13), res: Local(HirId(DefId(0:6 ~ test[9ab2]::test#1).9)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:6:5: 6:6 (#0), res: Local(HirId(DefId(0:6 ~ test[9ab2]::test#1).9)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).19), res: Local(HirId(DefId(0:6 ~ test[9ab2]::test#1).9)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: no-location (#5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#5, hir_id: HirId(DefId(0:7 ~ test[9ab2]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#5, hir_id: HirId(DefId(0:7 ~ test[9ab2]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:2:1: 2:1 (#4), res: Def(Const, DefId(0:4 ~ test[9ab2]::test)), segments: [PathSegment { ident: test#6, hir_id: HirId(DefId(0:7 ~ test[9ab2]::main).10), res: Def(Const, DefId(0:4 ~ test[9ab2]::test)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Crate type is lib
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:4 ~ a[c74b]::integrity::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:4 ~ a[af30]::integrity::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).5),
    kind: Struct(
        LangItem(
            Range,
            src/integrity/mod.rs:72:14: 72:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: src/integrity/mod.rs:72:14: 72:15 (#0),
                        },
                    ),
                    span: src/integrity/mod.rs:72:14: 72:15 (#0),
                },
                span: src/integrity/mod.rs:72:14: 72:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: src/integrity/mod.rs:72:17: 72:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[3801]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[3801]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[3801]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: src/integrity/mod.rs:72:17: 72:25 (#0),
                        },
                        [],
                    ),
                    span: src/integrity/mod.rs:72:17: 72:27 (#0),
                },
                span: src/integrity/mod.rs:72:17: 72:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: src/integrity/mod.rs:72:14: 72:27 (#0),
}
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).5),
    kind: Struct(
        LangItem(
            Range,
            src/integrity/mod.rs:72:14: 72:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: src/integrity/mod.rs:72:14: 72:15 (#0),
                        },
                    ),
                    span: src/integrity/mod.rs:72:14: 72:15 (#0),
                },
                span: src/integrity/mod.rs:72:14: 72:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: src/integrity/mod.rs:72:17: 72:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(24:3 ~ c[3801]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(24:0 ~ c[3801]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(24:3 ~ c[3801]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: src/integrity/mod.rs:72:17: 72:25 (#0),
                        },
                        [],
                    ),
                    span: src/integrity/mod.rs:72:17: 72:27 (#0),
                },
                span: src/integrity/mod.rs:72:17: 72:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: src/integrity/mod.rs:72:14: 72:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:72:17: 72:25 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).10), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).11), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:72:17: 72:25 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).10), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).11), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "a",
            },
        ),
        Specific(
            {
                "a",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "c",
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: src/integrity/mod.rs:72:14: 72:27 (#8),
                        res: Local(
                            HirId(DefId(0:4 ~ a[af30]::integrity::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).29),
                                res: Local(
                                    HirId(DefId(0:4 ~ a[af30]::integrity::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: src/integrity/mod.rs:72:14: 72:27 (#8),
        },
    ),
    span: src/integrity/mod.rs:72:14: 72:27 (#8),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "a",
                "c",
            },
        ),
        Specific(
            {
                "c",
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:72:14: 72:27 (#8), res: Local(HirId(DefId(0:4 ~ a[af30]::integrity::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).29), res: Local(HirId(DefId(0:4 ~ a[af30]::integrity::main).28)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "c",
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "a",
            },
        ),
        Specific(
            {
                "a",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "c",
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: src/integrity/mod.rs:72:14: 72:27 (#6),
                        res: Local(
                            HirId(DefId(0:4 ~ a[c74b]::integrity::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).29),
                                res: Local(
                                    HirId(DefId(0:4 ~ a[c74b]::integrity::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: src/integrity/mod.rs:72:14: 72:27 (#6),
        },
    ),
    span: src/integrity/mod.rs:72:14: 72:27 (#6),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "c",
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:72:14: 72:27 (#6), res: Local(HirId(DefId(0:4 ~ a[c74b]::integrity::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).29), res: Local(HirId(DefId(0:4 ~ a[c74b]::integrity::main).28)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "c",
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "a",
                "c",
            },
        ),
        Specific(
            {
                "c",
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:73:9: 73:10 (#0), res: Local(HirId(DefId(0:4 ~ a[af30]::integrity::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ a[af30]::integrity::main).22), res: Local(HirId(DefId(0:4 ~ a[af30]::integrity::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "c",
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "c",
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:73:9: 73:10 (#0), res: Local(HirId(DefId(0:4 ~ a[c74b]::integrity::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::integrity::main).22), res: Local(HirId(DefId(0:4 ~ a[c74b]::integrity::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "c",
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "c",
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: no-location (#4), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#4, hir_id: HirId(DefId(0:5 ~ a[af30]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#4, hir_id: HirId(DefId(0:5 ~ a[af30]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "c",
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "c",
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Crate type is lib
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: no-location (#4), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#4, hir_id: HirId(DefId(0:4 ~ a[af30]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#4, hir_id: HirId(DefId(0:4 ~ a[af30]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'test'
=========
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path TypeRelative(Ty { hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).6), kind: Path(Resolved(None, Path { span: tests/test.rs:3:13: 3:32 (#0), res: Def(Struct, DefId(24:1872 ~ trybuild[1643]::TestCases)), segments: [PathSegment { ident: trybuild#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).4), res: Def(Mod, DefId(24:0 ~ trybuild[1643])), args: None, infer_args: true }, PathSegment { ident: TestCases#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).5), res: Def(Struct, DefId(24:1872 ~ trybuild[1643]::TestCases)), args: None, infer_args: true }] })), span: tests/test.rs:3:13: 3:32 (#0) }, PathSegment { ident: new#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).7), res: Err, args: None, infer_args: true })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:5:5: 5:6 (#0), res: Local(HirId(DefId(0:6 ~ test[9ab2]::test#1).9)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).13), res: Local(HirId(DefId(0:6 ~ test[9ab2]::test#1).9)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:6:5: 6:6 (#0), res: Local(HirId(DefId(0:6 ~ test[9ab2]::test#1).9)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).19), res: Local(HirId(DefId(0:6 ~ test[9ab2]::test#1).9)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: no-location (#5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#5, hir_id: HirId(DefId(0:7 ~ test[9ab2]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#5, hir_id: HirId(DefId(0:7 ~ test[9ab2]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:2:1: 2:1 (#4), res: Def(Const, DefId(0:4 ~ test[9ab2]::test)), segments: [PathSegment { ident: test#6, hir_id: HirId(DefId(0:7 ~ test[9ab2]::main).10), res: Def(Const, DefId(0:4 ~ test[9ab2]::test)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Crate type is lib
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: no-location (#4), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#4, hir_id: HirId(DefId(0:4 ~ a[f4a4]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#4, hir_id: HirId(DefId(0:4 ~ a[f4a4]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'test'
=========
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path TypeRelative(Ty { hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).6), kind: Path(Resolved(None, Path { span: tests/test.rs:3:13: 3:32 (#0), res: Def(Struct, DefId(24:1872 ~ trybuild[c2d8]::TestCases)), segments: [PathSegment { ident: trybuild#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).4), res: Def(Mod, DefId(24:0 ~ trybuild[c2d8])), args: None, infer_args: true }, PathSegment { ident: TestCases#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).5), res: Def(Struct, DefId(24:1872 ~ trybuild[c2d8]::TestCases)), args: None, infer_args: true }] })), span: tests/test.rs:3:13: 3:32 (#0) }, PathSegment { ident: new#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).7), res: Err, args: None, infer_args: true })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:5:5: 5:6 (#0), res: Local(HirId(DefId(0:6 ~ test[3e02]::test#1).9)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).13), res: Local(HirId(DefId(0:6 ~ test[3e02]::test#1).9)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:6:5: 6:6 (#0), res: Local(HirId(DefId(0:6 ~ test[3e02]::test#1).9)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).19), res: Local(HirId(DefId(0:6 ~ test[3e02]::test#1).9)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: no-location (#5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#5, hir_id: HirId(DefId(0:7 ~ test[3e02]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#5, hir_id: HirId(DefId(0:7 ~ test[3e02]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:2:1: 2:1 (#4), res: Def(Const, DefId(0:4 ~ test[3e02]::test)), segments: [PathSegment { ident: test#6, hir_id: HirId(DefId(0:7 ~ test[3e02]::main).10), res: Def(Const, DefId(0:4 ~ test[3e02]::test)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Crate type is lib
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin", "c"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild007[7db7]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "c"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.0.rs:6:16: 6:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild008[04bd]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).21), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild009'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild009[7ef7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"c", "bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild009[7ef7]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild009[7ef7]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:8:24: 8:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild009[7ef7]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild009[7ef7]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild009[7ef7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild009[7ef7]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild009[7ef7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild009[7ef7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild009[7ef7]::main).26), res: Local(HirId(DefId(0:3 ~ trybuild009[7ef7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild010'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin", "c"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:14:13: 14:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).27), res: Local(HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:17:9: 17:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).36), res: Local(HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild011'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild011[3c71]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild011[3c71]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/let/let.0.rs:8:13: 8:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild012'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild012[e1be]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild012[e1be]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"c", "bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/let/let.1.rs:8:13: 8:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"c", "bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:9:14: 9:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:9:14: 9:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:9:14: 9:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:9:14: 9:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:9:14: 9:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:9:14: 9:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:9:14: 9:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:9: 10:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild008[04bd]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "c"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.0.rs:6:16: 6:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild009'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild009[7ef7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild009[7ef7]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild009[7ef7]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild009[7ef7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild009[7ef7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild009[7ef7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild009[7ef7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild009[7ef7]::main).21), res: Local(HirId(DefId(0:3 ~ trybuild009[7ef7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild010'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "c", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:8:24: 8:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).26), res: Local(HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild011'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild011[3c71]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin", "c"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:14:13: 14:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).27), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:17:9: 17:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).36), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild012'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild012[e1be]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild012[e1be]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/let/let.0.rs:8:13: 8:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild013'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild013[2736]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild013[2736]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin", "c"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/let/let.1.rs:8:13: 8:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"c", "bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin", "c"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"c", "bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/loop.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"c", "bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild009'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild009[7ef7]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"c", "bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.0.rs:6:16: 6:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild009[7ef7]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild009[7ef7]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild010'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).21), res: Local(HirId(DefId(0:3 ~ trybuild010[1a5d]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild011'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild011[3c71]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b", "c"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:8:24: 8:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).26), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild012'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild012[e1be]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin", "c"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:14:13: 14:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).27), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:17:9: 17:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).36), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild013'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild013[2736]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild013[2736]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/let/let.0.rs:8:13: 8:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild014'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild014[f759]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild014[f759]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"c", "bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/let/let.1.rs:8:13: 8:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"c", "bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild008[04bd]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild008[04bd]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"bin", "b"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).47),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).46),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).44),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).45),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).44),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).44)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).45), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).44)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin", "c"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild008[04bd]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild008[04bd]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"b", "bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).47),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).46),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).44),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).45),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).44),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).44)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).45), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).44)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"c", "bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild008[04bd]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild008[04bd]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"bin", "b"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).47),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).46),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).44),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).45),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).44),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).44)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).45), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).44)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin", "c"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild008[04bd]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild008[04bd]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"bin", "b"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).40),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).39),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.3.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"c", "bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild008[04bd]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild008[04bd]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"b", "bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).40),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).39),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild015'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild015[832a]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"c", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild015[832a]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild015[832a]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild015[832a]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild015[832a]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild015[832a]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild015[832a]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild016'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild016[df67]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Universal), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild016[df67]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild016[df67]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild016[df67]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild016[df67]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild017'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b", "c"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"b", "bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).40),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).39),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild017[1d6b]::main).37),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).38),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild017[1d6b]::main).37),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).37)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).38), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).37)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"c", "bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild008[04bd]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild008[04bd]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"bin", "b"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).40),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).39),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Crate type is lib
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:77:13: 77:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:7 ~ a[c74b]::integrity::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::main).4), res: Def(Enum, DefId(0:4 ~ a[c74b]::integrity::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::main).5), res: Def(Ctor(Variant, Fn), DefId(0:7 ~ a[c74b]::integrity::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:77:13: 77:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:7 ~ a[af30]::integrity::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:5 ~ a[af30]::integrity::main).4), res: Def(Enum, DefId(0:4 ~ a[af30]::integrity::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:5 ~ a[af30]::integrity::main).5), res: Def(Ctor(Variant, Fn), DefId(0:7 ~ a[af30]::integrity::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:79:11: 79:12 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::main).11), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::main).8)), args: None, infer_args: true }] })
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:79:11: 79:12 (#0), res: Local(HirId(DefId(0:5 ~ a[af30]::integrity::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:5 ~ a[af30]::integrity::main).11), res: Local(HirId(DefId(0:5 ~ a[af30]::integrity::main).8)), args: None, infer_args: true }] })
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[af30]::integrity::main).22), x_#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c74b]::integrity::main).22), x_#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:82:22: 82:23 (#0), res: Local(HirId(DefId(0:5 ~ a[af30]::integrity::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:5 ~ a[af30]::integrity::main).20), res: Local(HirId(DefId(0:5 ~ a[af30]::integrity::main).14)), args: None, infer_args: true }] })
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:82:22: 82:23 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::main).20), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::main).14)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[af30]::integrity::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:87:22: 87:23 (#0), res: Local(HirId(DefId(0:5 ~ a[af30]::integrity::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[af30]::integrity::main).33), res: Local(HirId(DefId(0:5 ~ a[af30]::integrity::main).26)), args: None, infer_args: true }] })
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c74b]::integrity::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:87:22: 87:23 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::main).33), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::main).26)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c74b]::integrity::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:90:22: 90:23 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::main).38), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[af30]::integrity::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: src/integrity/mod.rs:90:22: 90:23 (#0), res: Local(HirId(DefId(0:5 ~ a[af30]::integrity::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:5 ~ a[af30]::integrity::main).38), res: Local(HirId(DefId(0:5 ~ a[af30]::integrity::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: no-location (#4), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#4, hir_id: HirId(DefId(0:13 ~ a[af30]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#4, hir_id: HirId(DefId(0:13 ~ a[af30]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Crate type is lib
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: no-location (#4), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#4, hir_id: HirId(DefId(0:4 ~ a[af30]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#4, hir_id: HirId(DefId(0:4 ~ a[af30]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'test'
=========
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path TypeRelative(Ty { hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).6), kind: Path(Resolved(None, Path { span: tests/test.rs:3:13: 3:32 (#0), res: Def(Struct, DefId(24:1872 ~ trybuild[1643]::TestCases)), segments: [PathSegment { ident: trybuild#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).4), res: Def(Mod, DefId(24:0 ~ trybuild[1643])), args: None, infer_args: true }, PathSegment { ident: TestCases#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).5), res: Def(Struct, DefId(24:1872 ~ trybuild[1643]::TestCases)), args: None, infer_args: true }] })), span: tests/test.rs:3:13: 3:32 (#0) }, PathSegment { ident: new#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).7), res: Err, args: None, infer_args: true })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:5:5: 5:6 (#0), res: Local(HirId(DefId(0:6 ~ test[9ab2]::test#1).9)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).13), res: Local(HirId(DefId(0:6 ~ test[9ab2]::test#1).9)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:6:5: 6:6 (#0), res: Local(HirId(DefId(0:6 ~ test[9ab2]::test#1).9)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:6 ~ test[9ab2]::test#1).19), res: Local(HirId(DefId(0:6 ~ test[9ab2]::test#1).9)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: no-location (#5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#5, hir_id: HirId(DefId(0:7 ~ test[9ab2]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#5, hir_id: HirId(DefId(0:7 ~ test[9ab2]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:2:1: 2:1 (#4), res: Def(Const, DefId(0:4 ~ test[9ab2]::test)), segments: [PathSegment { ident: test#6, hir_id: HirId(DefId(0:7 ~ test[9ab2]::main).10), res: Def(Const, DefId(0:4 ~ test[9ab2]::test)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Crate type is lib
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: no-location (#4), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#4, hir_id: HirId(DefId(0:4 ~ a[f4a4]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#4, hir_id: HirId(DefId(0:4 ~ a[f4a4]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'test'
=========
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path TypeRelative(Ty { hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).6), kind: Path(Resolved(None, Path { span: tests/test.rs:3:13: 3:32 (#0), res: Def(Struct, DefId(24:1872 ~ trybuild[c2d8]::TestCases)), segments: [PathSegment { ident: trybuild#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).4), res: Def(Mod, DefId(24:0 ~ trybuild[c2d8])), args: None, infer_args: true }, PathSegment { ident: TestCases#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).5), res: Def(Struct, DefId(24:1872 ~ trybuild[c2d8]::TestCases)), args: None, infer_args: true }] })), span: tests/test.rs:3:13: 3:32 (#0) }, PathSegment { ident: new#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).7), res: Err, args: None, infer_args: true })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:5:5: 5:6 (#0), res: Local(HirId(DefId(0:6 ~ test[3e02]::test#1).9)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).13), res: Local(HirId(DefId(0:6 ~ test[3e02]::test#1).9)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:6:5: 6:6 (#0), res: Local(HirId(DefId(0:6 ~ test[3e02]::test#1).9)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).19), res: Local(HirId(DefId(0:6 ~ test[3e02]::test#1).9)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: no-location (#5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#5, hir_id: HirId(DefId(0:7 ~ test[3e02]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#5, hir_id: HirId(DefId(0:7 ~ test[3e02]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:2:1: 2:1 (#4), res: Def(Const, DefId(0:4 ~ test[3e02]::test)), segments: [PathSegment { ident: test#6, hir_id: HirId(DefId(0:7 ~ test[3e02]::main).10), res: Def(Const, DefId(0:4 ~ test[3e02]::test)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Crate type is lib
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"c", "bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild008[04bd]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild008[04bd]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"bin", "b"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).40),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).39),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild009'
=========
[DEBUG] Crate type is bin
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:13:13: 13:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild009[7ef7]::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).4), res: Def(Enum, DefId(0:3 ~ trybuild009[7ef7]::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).5), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild009[7ef7]::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:15:11: 15:12 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).11), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).8)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).22), x_#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:18:22: 18:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).20), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).14)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:23:22: 23:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).33), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).26)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:26:22: 26:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).38), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild010'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild010[1a5d]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"c", "bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.0.rs:6:16: 6:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild010[1a5d]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild011'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild011[3c71]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).21), res: Local(HirId(DefId(0:3 ~ trybuild011[3c71]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild012'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild012[e1be]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin", "c"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:8:24: 8:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).26), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild013'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild013[2736]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"c", "bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:14:13: 14:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).27), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:17:9: 17:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).36), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild014'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild014[f759]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild014[f759]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/let/let.0.rs:8:13: 8:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild015'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild015[832a]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild015[832a]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"c", "bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/let/let.1.rs:8:13: 8:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild015[832a]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild015[832a]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild016'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild016[df67]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "c"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild016[df67]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild016[df67]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild017'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Universal), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild017[1d6b]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild017[1d6b]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild018'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild018[769f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"c", "bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild018[769f]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"b", "bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild018[769f]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild018[769f]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).40),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).39),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild018[769f]::main).37),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).38),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild018[769f]::main).37),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).37)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).38), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).37)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin", "c"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild008[04bd]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild008[04bd]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"b", "bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).40),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).39),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild009'
=========
[DEBUG] Crate type is bin
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:13:13: 13:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild009[7ef7]::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).4), res: Def(Enum, DefId(0:3 ~ trybuild009[7ef7]::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).5), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild009[7ef7]::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:15:11: 15:12 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).11), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).8)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).22), x_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"b", "c"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:18:22: 18:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).20), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).14)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:23:22: 23:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).33), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).26)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:26:22: 26:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).38), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild019'
=========
[DEBUG] Crate type is bin
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:13:13: 13:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild019[fe37]::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:4 ~ trybuild019[fe37]::main).4), res: Def(Enum, DefId(0:3 ~ trybuild019[fe37]::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:4 ~ trybuild019[fe37]::main).5), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild019[fe37]::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:15:11: 15:12 (#0), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:4 ~ trybuild019[fe37]::main).11), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).8)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild019[fe37]::main).22), x_#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:18:22: 18:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ trybuild019[fe37]::main).20), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).14)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild019[fe37]::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:23:22: 23:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:4 ~ trybuild019[fe37]::main).33), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).26)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild019[fe37]::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:26:22: 26:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:4 ~ trybuild019[fe37]::main).38), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin", "c"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild008[04bd]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild008[04bd]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"bin", "b"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).40),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).39),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild009'
=========
[DEBUG] Crate type is bin
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:13:13: 13:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild009[7ef7]::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).4), res: Def(Enum, DefId(0:3 ~ trybuild009[7ef7]::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).5), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild009[7ef7]::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:15:11: 15:12 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).11), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).8)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).22), x_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"c", "b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:18:22: 18:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).20), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).14)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:23:22: 23:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).33), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).26)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:26:22: 26:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).38), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild014'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild014[f759]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild014[f759]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/let/let.0.rs:8:13: 8:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild015'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild015[832a]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild015[832a]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin", "c"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/let/let.1.rs:8:13: 8:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild015[832a]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild015[832a]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild016'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild016[df67]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"c", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild016[df67]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild016[df67]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild017'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Universal), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild017[1d6b]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild017[1d6b]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild018'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild018[769f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b", "c"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild018[769f]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"b", "bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild018[769f]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild018[769f]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).40),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).39),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild018[769f]::main).37),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).38),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild018[769f]::main).37),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).37)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).38), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).37)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild019'
=========
[DEBUG] Crate type is bin
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:13:13: 13:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild019[fe37]::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:4 ~ trybuild019[fe37]::main).4), res: Def(Enum, DefId(0:3 ~ trybuild019[fe37]::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:4 ~ trybuild019[fe37]::main).5), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild019[fe37]::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:15:11: 15:12 (#0), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:4 ~ trybuild019[fe37]::main).11), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).8)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild019[fe37]::main).22), x_#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:18:22: 18:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ trybuild019[fe37]::main).20), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).14)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild019[fe37]::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:23:22: 23:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:4 ~ trybuild019[fe37]::main).33), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).26)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild019[fe37]::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:26:22: 26:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:4 ~ trybuild019[fe37]::main).38), res: Local(HirId(DefId(0:4 ~ trybuild019[fe37]::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin", "c"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild008[04bd]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild008[04bd]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"b", "bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).40),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).39),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'trybuild009'
=========
[DEBUG] Crate type is bin
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:13:13: 13:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild009[7ef7]::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).4), res: Def(Enum, DefId(0:3 ~ trybuild009[7ef7]::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).5), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild009[7ef7]::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:15:11: 15:12 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).11), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).8)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).22), x_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"b", "c"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:18:22: 18:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).20), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).14)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:23:22: 23:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).33), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).26)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:26:22: 26:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).38), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild010'
=========
[DEBUG] Crate type is bin
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:13:13: 13:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild010[1a5d]::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).4), res: Def(Enum, DefId(0:3 ~ trybuild010[1a5d]::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).5), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild010[1a5d]::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:15:11: 15:12 (#0), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).11), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).8)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:17:22: 17:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).20), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).14)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild010[1a5d]::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:22:22: 22:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).33), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).26)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild010[1a5d]::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:25:22: 25:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).38), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild011'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild011[3c71]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "c"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.0.rs:6:16: 6:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild012'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild012[e1be]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).21), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild013'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild013[2736]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b", "c"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:8:24: 8:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).26), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild014'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild014[f759]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b", "c"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:14:13: 14:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).27), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:17:9: 17:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).36), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild015'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild015[832a]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild015[832a]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/let/let.0.rs:8:13: 8:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild015[832a]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild015[832a]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild016'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild016[df67]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild016[df67]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin", "c"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/let/let.1.rs:8:13: 8:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild017'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"c", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild017[1d6b]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild017[1d6b]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild018'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild018[769f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Universal), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild018[769f]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild018[769f]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild018[769f]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild018[769f]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild019'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild019[fe37]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "c", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild019[fe37]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"bin", "b"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild019[fe37]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild019[fe37]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild019[fe37]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild019[fe37]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).40),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).39),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild019[fe37]::main).37),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).38),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild019[fe37]::main).37),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild019[fe37]::main).37)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).38), res: Local(HirId(DefId(0:3 ~ trybuild019[fe37]::main).37)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild019[fe37]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild019[fe37]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild020'
=========
[DEBUG] Crate type is bin
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:13:13: 13:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild020[15ee]::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:4 ~ trybuild020[15ee]::main).4), res: Def(Enum, DefId(0:3 ~ trybuild020[15ee]::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:4 ~ trybuild020[15ee]::main).5), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild020[15ee]::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:15:11: 15:12 (#0), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:4 ~ trybuild020[15ee]::main).11), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).8)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild020[15ee]::main).22), x_#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:18:22: 18:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ trybuild020[15ee]::main).20), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).14)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild020[15ee]::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:23:22: 23:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:4 ~ trybuild020[15ee]::main).33), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).26)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild020[15ee]::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:26:22: 26:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:4 ~ trybuild020[15ee]::main).38), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Crate type is bin
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin", "c"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild008[04bd]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild008[04bd]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"b", "bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).40),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).39),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild009'
=========
[DEBUG] Crate type is bin
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:13:13: 13:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild009[7ef7]::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).4), res: Def(Enum, DefId(0:3 ~ trybuild009[7ef7]::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).5), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild009[7ef7]::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:15:11: 15:12 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).11), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).8)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).22), x_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"c", "b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:18:22: 18:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).20), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).14)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:23:22: 23:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).33), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).26)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:26:22: 26:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).38), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild010'
=========
[DEBUG] Crate type is bin
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:13:13: 13:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild010[1a5d]::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).4), res: Def(Enum, DefId(0:3 ~ trybuild010[1a5d]::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).5), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild010[1a5d]::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:15:11: 15:12 (#0), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).11), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).8)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:17:22: 17:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).20), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).14)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild010[1a5d]::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:22:22: 22:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).33), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).26)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild010[1a5d]::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:25:22: 25:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).38), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Crate type is lib
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: no-location (#4), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#4, hir_id: HirId(DefId(0:4 ~ a[f4a4]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#4, hir_id: HirId(DefId(0:4 ~ a[f4a4]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "a",
            },
        ),
        Specific(
            {
                "a",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'test'
=========
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path TypeRelative(Ty { hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).6), kind: Path(Resolved(None, Path { span: tests/test.rs:3:13: 3:32 (#0), res: Def(Struct, DefId(24:1872 ~ trybuild[c2d8]::TestCases)), segments: [PathSegment { ident: trybuild#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).4), res: Def(Mod, DefId(24:0 ~ trybuild[c2d8])), args: None, infer_args: true }, PathSegment { ident: TestCases#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).5), res: Def(Struct, DefId(24:1872 ~ trybuild[c2d8]::TestCases)), args: None, infer_args: true }] })), span: tests/test.rs:3:13: 3:32 (#0) }, PathSegment { ident: new#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).7), res: Err, args: None, infer_args: true })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:5:5: 5:6 (#0), res: Local(HirId(DefId(0:6 ~ test[3e02]::test#1).9)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).13), res: Local(HirId(DefId(0:6 ~ test[3e02]::test#1).9)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:6:5: 6:6 (#0), res: Local(HirId(DefId(0:6 ~ test[3e02]::test#1).9)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:6 ~ test[3e02]::test#1).19), res: Local(HirId(DefId(0:6 ~ test[3e02]::test#1).9)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: no-location (#5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#5, hir_id: HirId(DefId(0:7 ~ test[3e02]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#5, hir_id: HirId(DefId(0:7 ~ test[3e02]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [
            Ty {
                property: FlowPair(
                    Universal,
                    Universal,
                ),
                kind: Infer,
            },
        ],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: tests/test.rs:2:1: 2:1 (#4), res: Def(Const, DefId(0:4 ~ test[3e02]::test)), segments: [PathSegment { ident: test#6, hir_id: HirId(DefId(0:7 ~ test[3e02]::main).10), res: Def(Const, DefId(0:4 ~ test[3e02]::test)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "test",
            },
        ),
        Specific(
            {
                "test",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Crate type is lib
[DEBUG] Coenobita invoked for crate 'a_tests'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild000'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild000[884f]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.0.rs:8:16: 8:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild000[884f]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild001'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild001[42ca]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.1.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild001[42ca]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild001[42ca]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild002'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild002[178e]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:10:24: 10:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild002[178e]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild002[178e]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild003'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild003[5eda]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild003[5eda]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild003[5eda]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild004'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild004[b74d]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.0.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild004[b74d]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild004[b74d]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild005'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"c", "bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild005[4fa8]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/let/let.1.rs:10:13: 10:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild005[4fa8]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild005[4fa8]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild006'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "c",
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild006[cf3f]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild006[cf3f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild007'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild007[7db7]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild007[7db7]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild007[7db7]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild007[7db7]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild008'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild008[04bd]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild008[04bd]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"b", "bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).40),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).39),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild008[04bd]::main).37),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).38), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).37)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "b",
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/loop/for.2.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild008[04bd]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild008[04bd]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild009'
=========
[DEBUG] Crate type is bin
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:13:13: 13:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild009[7ef7]::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).4), res: Def(Enum, DefId(0:3 ~ trybuild009[7ef7]::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).5), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild009[7ef7]::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:15:11: 15:12 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).11), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).8)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).22), x_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"c", "b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:18:22: 18:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).20), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).14)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:23:22: 23:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).33), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).26)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild009[7ef7]::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.0.rs:26:22: 26:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:4 ~ trybuild009[7ef7]::main).38), res: Local(HirId(DefId(0:4 ~ trybuild009[7ef7]::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild010'
=========
[DEBUG] Crate type is bin
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:13:13: 13:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild010[1a5d]::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).4), res: Def(Enum, DefId(0:3 ~ trybuild010[1a5d]::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).5), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild010[1a5d]::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:15:11: 15:12 (#0), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).11), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).8)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:17:22: 17:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).20), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).14)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild010[1a5d]::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:22:22: 22:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).33), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).26)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild010[1a5d]::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/fail/match/match.1.rs:25:22: 25:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:4 ~ trybuild010[1a5d]::main).38), res: Local(HirId(DefId(0:4 ~ trybuild010[1a5d]::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild011'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild011[3c71]::main).15), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "c"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.0.rs:6:16: 6:26 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).5), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild011[3c71]::main).6), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild012'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild012[e1be]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.1.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild012[e1be]::main).21), res: Local(HirId(DefId(0:3 ~ trybuild012[e1be]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild013'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild013[2736]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"b", "c", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:8:8: 8:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).9), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).10), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:8:24: 8:34 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).13), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).14), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).18), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.3.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild013[2736]::main).26), res: Local(HirId(DefId(0:3 ~ trybuild013[2736]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "c",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild014'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild014[f759]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "c", "b"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:10:8: 10:18 (#0), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).8), res: Def(Mod, DefId(20:0 ~ b[bbfe])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).9), res: Def(Fn, DefId(20:4 ~ b[bbfe]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "b",
                    },
                ),
                Specific(
                    {
                        "b",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:11:12: 11:22 (#0), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).14), res: Def(Mod, DefId(21:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).15), res: Def(Fn, DefId(21:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:12:13: 12:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).19), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:14:13: 14:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).27), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/if/if.4.rs:17:9: 17:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild014[f759]::main).36), res: Local(HirId(DefId(0:3 ~ trybuild014[f759]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild015'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild015[832a]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild015[832a]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/let/let.0.rs:8:13: 8:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild015[832a]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild015[832a]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild015[832a]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild016'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild016[df67]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild016[df67]::main).9), y#0, None) to have type Ty { property: FlowPair(Specific({"c", "bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/let/let.1.rs:8:13: 8:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild016[df67]::main).7), res: Local(HirId(DefId(0:3 ~ trybuild016[df67]::main).4)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild017'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "c"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).5),
    kind: Struct(
        LangItem(
            Range,
            /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#0),
        ),
        [
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).7),
                ident: start#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).6),
                    kind: Lit(
                        Spanned {
                            node: Int(
                                Pu128(
                                    0,
                                ),
                                Unsuffixed,
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                        },
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:15 (#0),
                is_shorthand: false,
            },
            ExprField {
                hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).12),
                ident: end#0,
                expr: Expr {
                    hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).8),
                    kind: Call(
                        Expr {
                            hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).9),
                            kind: Path(
                                Resolved(
                                    None,
                                    Path {
                                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0),
                                        res: Def(
                                            Fn,
                                            DefId(20:3 ~ c[c472]::value),
                                        ),
                                        segments: [
                                            PathSegment {
                                                ident: c#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).10),
                                                res: Def(
                                                    Mod,
                                                    DefId(20:0 ~ c[c472]),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                            PathSegment {
                                                ident: value#0,
                                                hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11),
                                                res: Def(
                                                    Fn,
                                                    DefId(20:3 ~ c[c472]::value),
                                                ),
                                                args: None,
                                                infer_args: true,
                                            },
                                        ],
                                    },
                                ),
                            ),
                            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0),
                        },
                        [],
                    ),
                    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:27 (#0),
                },
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:27 (#0),
                is_shorthand: false,
            },
        ],
        None,
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#0),
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:17: 7:25 (#0), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).10), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).11), res: Def(Fn, DefId(20:3 ~ c[c472]::value)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).31),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).30),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild017[1d6b]::main).28),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).29),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild017[1d6b]::main).28),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:7:14: 7:27 (#6), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).28)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "c",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "c",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.0.rs:8:9: 8:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild017[1d6b]::main).22), res: Local(HirId(DefId(0:3 ~ trybuild017[1d6b]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild018'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild018[769f]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Universal), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild018[769f]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild018[769f]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).32),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).31),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild018[769f]::main).29),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).30),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild018[769f]::main).29),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:10:14: 10:19 (#5), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).30), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).29)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.1.rs:11:9: 11:10 (#0), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild018[769f]::main).23), res: Local(HirId(DefId(0:3 ~ trybuild018[769f]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild019'
=========
[DEBUG] Crate type is bin
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] settig local var Binding(BindingMode(No, Mut), HirId(DefId(0:3 ~ trybuild019[fe37]::main).4), x#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin", "b", "c"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:3 ~ trybuild019[fe37]::main).11), items#0, None) to have type Ty { property: FlowPair(Specific({"bin", "b"}), Specific({"b", "bin"})), kind: Opaque }
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).12),
    kind: Path(
        Resolved(
            None,
            Path {
                span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0),
                res: Local(
                    HirId(DefId(0:3 ~ trybuild019[fe37]::main).11),
                ),
                segments: [
                    PathSegment {
                        ident: items#0,
                        hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).13),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild019[fe37]::main).11),
                        ),
                        args: None,
                        infer_args: true,
                    },
                ],
            },
        ),
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#0), res: Local(HirId(DefId(0:3 ~ trybuild019[fe37]::main).11)), segments: [PathSegment { ident: items#0, hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).13), res: Local(HirId(DefId(0:3 ~ trybuild019[fe37]::main).11)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking the guard of a desugared for loop match
[DEBUG] expr is Expr {
    hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).40),
    kind: AddrOf(
        Ref,
        Mut,
        Expr {
            hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).39),
            kind: Path(
                Resolved(
                    None,
                    Path {
                        span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
                        res: Local(
                            HirId(DefId(0:3 ~ trybuild019[fe37]::main).37),
                        ),
                        segments: [
                            PathSegment {
                                ident: iter#0,
                                hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).38),
                                res: Local(
                                    HirId(DefId(0:3 ~ trybuild019[fe37]::main).37),
                                ),
                                args: None,
                                infer_args: true,
                            },
                        ],
                    },
                ),
            ),
            span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
        },
    ),
    span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:11:14: 11:19 (#6), res: Local(HirId(DefId(0:3 ~ trybuild019[fe37]::main).37)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).38), res: Local(HirId(DefId(0:3 ~ trybuild019[fe37]::main).37)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
                "b",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "b",
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:12:12: 12:22 (#0), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).24), res: Def(Mod, DefId(20:0 ~ c[c472])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).25), res: Def(Fn, DefId(20:4 ~ c[c472]::boolean)), args: None, infer_args: true }] })
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Specific(
                    {
                        "c",
                    },
                ),
                Specific(
                    {
                        "c",
                    },
                ),
            ),
            kind: Opaque,
        },
    ),
}
[DEBUG] prepring to check assign term
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/loop/for.2.rs:13:13: 13:14 (#0), res: Local(HirId(DefId(0:3 ~ trybuild019[fe37]::main).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:3 ~ trybuild019[fe37]::main).29), res: Local(HirId(DefId(0:3 ~ trybuild019[fe37]::main).4)), args: None, infer_args: true }] })
[DEBUG] expected is Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "b",
                "c",
            },
        ),
    ),
    kind: Opaque,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
                "c",
                "b",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Coenobita invoked for crate 'trybuild020'
=========
[DEBUG] Crate type is bin
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] fn ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Fn(
        [],
        Ty {
            property: FlowPair(
                Universal,
                Universal,
            ),
            kind: Infer,
        },
    ),
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:13:13: 13:21 (#0), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild020[15ee]::Foo::Bar::{constructor#0})), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:4 ~ trybuild020[15ee]::main).4), res: Def(Enum, DefId(0:3 ~ trybuild020[15ee]::Foo)), args: None, infer_args: true }, PathSegment { ident: Bar#0, hir_id: HirId(DefId(0:4 ~ trybuild020[15ee]::main).5), res: Def(Ctor(Variant, Fn), DefId(0:6 ~ trybuild020[15ee]::Foo::Bar::{constructor#0})), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Specific(
            {
                "bin",
            },
        ),
    ),
    kind: Infer,
}
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:15:11: 15:12 (#0), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:4 ~ trybuild020[15ee]::main).11), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).8)), args: None, infer_args: true }] })
[DEBUG] done checking the guard. ty is Ty {
    property: FlowPair(
        Universal,
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild020[15ee]::main).22), x_#0, None) to have type Ty { property: FlowPair(Specific({"bin"}), Specific({"bin"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:18:22: 18:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).14)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:4 ~ trybuild020[15ee]::main).20), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).14)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild020[15ee]::main).35), y_#0, None) to have type Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:23:22: 23:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).26)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:4 ~ trybuild020[15ee]::main).33), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).26)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
[DEBUG] settig local var Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ trybuild020[15ee]::main).40), z_#0, None) to have type Ty { property: FlowPair(Specific({"b"}), Specific({"b"})), kind: Opaque }
[DEBUG] Checking path Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/a/tests/integrity/pass/match/match.0.rs:26:22: 26:23 (#0), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).27)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:4 ~ trybuild020[15ee]::main).38), res: Local(HirId(DefId(0:4 ~ trybuild020[15ee]::main).27)), args: None, infer_args: true }] })
[DEBUG] introducing new ty Ty {
    property: FlowPair(
        Specific(
            {
                "bin",
            },
        ),
        Universal,
    ),
    kind: Infer,
}
