[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Coenobita invoked for crate 'b'
=========
[DEBUG] Coenobita invoked for crate 'c'
=========
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:3 ~ c[3801]::value).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:19: 2:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:3 ~ c[3801]::value).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:19: 2:22 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:1: 2:22 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:22: 2:22 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:13: 2:13 (#0) }, BodyId { hir_id: HirId(DefId(0:3 ~ c[3801]::value).3) })
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:19: 2:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:3 ~ b[3f10]::value).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:19: 2:22 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:1: 2:22 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:22: 2:22 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:13: 2:13 (#0) }, BodyId { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:3 ~ c[3801]::value).1), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:5: 3:6 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:5: 3:6 (#0) }), hir_id: HirId(DefId(0:3 ~ c[3801]::value).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:23: 4:2 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:5: 3:6 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).1), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) }), hir_id: HirId(DefId(0:3 ~ b[3f10]::value).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:23: 4:2 (#0), targeted_by_break: false }, None)
[DEBUG] Trying to get type of function DefId(0:3 ~ c[3801]::value)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:21: 7:25 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:21: 7:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:1: 7:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:25: 7:25 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:15: 7:15 (#0) }, BodyId { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).3) })
[DEBUG] Done checking item fn body
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).1), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:5: 8:9 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:5: 8:9 (#0) }), hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:26: 9:2 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:5: 8:9 (#0) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:21: 7:25 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:21: 7:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:1: 7:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:25: 7:25 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:15: 7:15 (#0) }, BodyId { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).1), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) }), hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:26: 9:2 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:4 ~ b[3f10]::boolean)
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:4 ~ c[3801]::boolean)
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Use(Path { span: src/lib.rs:4:5: 4:23 (#0), res: [Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range))], segments: [PathSegment { ident: core#0, hir_id: HirId(DefId(0:3 ~ a[c74b]::{use#1}).1), res: Def(Mod, DefId(2:0 ~ core[7d5a])), args: None, infer_args: false }, PathSegment { ident: range#0, hir_id: HirId(DefId(0:3 ~ a[c74b]::{use#1}).2), res: Def(Mod, DefId(2:10174 ~ core[7d5a]::range)), args: None, infer_args: false }, PathSegment { ident: Range#0, hir_id: HirId(DefId(0:3 ~ a[c74b]::{use#1}).3), res: Err, args: None, infer_args: false }] }, Single)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:6:25: 6:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:6:1: 6:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:6:25: 6:25 (#0), span: src/lib.rs:6:23: 6:23 (#0) }, BodyId { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).16) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).7), x#0, None), span: src/lib.rs:8:9: 8:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).2), kind: Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).3), kind: Path(Resolved(None, Path { span: src/lib.rs:8:13: 8:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).4), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).5), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:8:13: 8:21 (#0) }, []), span: src/lib.rs:8:13: 8:23 (#0) }), els: None, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).6), span: src/lib.rs:8:5: 8:24 (#0), source: Normal }), span: src/lib.rs:8:5: 8:24 (#0) }, Stmt { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).8), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).14), kind: Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).14), x#0, None), span: src/lib.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).9), kind: Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:11:13: 11:21 (#0) }, []), span: src/lib.rs:11:13: 11:23 (#0) }), els: None, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).13), span: src/lib.rs:11:5: 11:24 (#0), source: Normal }), span: src/lib.rs:11:5: 11:24 (#0) }], expr: None, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).15), rules: DefaultBlock, span: src/lib.rs:6:26: 12:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).3), kind: Path(Resolved(None, Path { span: src/lib.rs:8:13: 8:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).4), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).5), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:8:13: 8:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:8:13: 8:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).4), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).5), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:11:13: 11:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:11:13: 11:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:4 ~ a[c74b]::test_let_annotation)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:14:24: 14:24 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:14:1: 14:24 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:14:24: 14:24 (#0), span: src/lib.rs:14:22: 14:22 (#0) }, BodyId { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).22) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15), kind: Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15), y#0, None), span: src/lib.rs:16:9: 16:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:16:16: 16:26 (#0) }, []), span: src/lib.rs:16:16: 16:28 (#0) }), span: src/lib.rs:16:16: 16:28 (#6) }, Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).10), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:16:31: 16:32 (#0) }), span: src/lib.rs:16:31: 16:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).9), rules: DefaultBlock, span: src/lib.rs:16:29: 16:34 (#0), targeted_by_break: false }, None), span: src/lib.rs:16:29: 16:34 (#0) }, Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).11), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:16:42: 16:43 (#0) }), span: src/lib.rs:16:42: 16:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).13), rules: DefaultBlock, span: src/lib.rs:16:40: 16:45 (#0), targeted_by_break: false }, None), span: src/lib.rs:16:40: 16:45 (#0) })), span: src/lib.rs:16:13: 16:45 (#0) }), els: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).14), span: src/lib.rs:16:5: 16:46 (#0), source: Normal }), span: src/lib.rs:16:5: 16:46 (#0) }, Stmt { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).16), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).20), z#0, None), span: src/lib.rs:19:9: 19:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).17), kind: Path(Resolved(None, Path { span: src/lib.rs:19:13: 19:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), args: None, infer_args: true }] })), span: src/lib.rs:19:13: 19:14 (#0) }), els: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).19), span: src/lib.rs:19:5: 19:15 (#0), source: Normal }), span: src/lib.rs:19:5: 19:15 (#0) }], expr: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).21), rules: DefaultBlock, span: src/lib.rs:14:25: 20:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:16:16: 16:26 (#0) }, []), span: src/lib.rs:16:16: 16:28 (#0) }), span: src/lib.rs:16:16: 16:28 (#6) }, Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).10), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:16:31: 16:32 (#0) }), span: src/lib.rs:16:31: 16:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).9), rules: DefaultBlock, span: src/lib.rs:16:29: 16:34 (#0), targeted_by_break: false }, None), span: src/lib.rs:16:29: 16:34 (#0) }, Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).11), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:16:42: 16:43 (#0) }), span: src/lib.rs:16:42: 16:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).13), rules: DefaultBlock, span: src/lib.rs:16:40: 16:45 (#0), targeted_by_break: false }, None), span: src/lib.rs:16:40: 16:45 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:16:16: 16:26 (#0) }, []), span: src/lib.rs:16:16: 16:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:16:16: 16:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:16:31: 16:32 (#0) }), span: src/lib.rs:16:31: 16:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).9), rules: DefaultBlock, span: src/lib.rs:16:29: 16:34 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:16:31: 16:32 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:16:42: 16:43 (#0) }), span: src/lib.rs:16:42: 16:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).13), rules: DefaultBlock, span: src/lib.rs:16:40: 16:45 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:16:42: 16:43 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:19:13: 19:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:19:13: 19:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:5 ~ a[c74b]::test_basic_if_else)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:22:19: 22:19 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:22:1: 22:19 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:22:19: 22:19 (#0), span: src/lib.rs:22:17: 22:17 (#0) }, BodyId { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).21) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).12), kind: Binding(BindingMode(No, Not), HirId(DefId(0:6 ~ a[c74b]::test_addition).12), x#0, None), span: src/lib.rs:24:9: 24:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).2), kind: Binary(Spanned { node: Add, span: src/lib.rs:24:24: 24:25 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).4), kind: Path(Resolved(None, Path { span: src/lib.rs:24:13: 24:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).6), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:13: 24:21 (#0) }, []), span: src/lib.rs:24:13: 24:23 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).7), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).8), kind: Path(Resolved(None, Path { span: src/lib.rs:24:26: 24:34 (#0), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).10), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:26: 24:34 (#0) }, []), span: src/lib.rs:24:26: 24:36 (#0) }), span: src/lib.rs:24:13: 24:36 (#0) }), els: None, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).11), span: src/lib.rs:24:5: 24:37 (#0), source: Normal }), span: src/lib.rs:24:5: 24:37 (#0) }, Stmt { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).13), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).19), kind: Binding(BindingMode(No, Not), HirId(DefId(0:6 ~ a[c74b]::test_addition).19), y#0, None), span: src/lib.rs:27:9: 27:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).14), kind: Binary(Spanned { node: Add, span: src/lib.rs:27:15: 27:16 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) }), span: src/lib.rs:27:13: 27:14 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).16), kind: Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] })), span: src/lib.rs:27:17: 27:18 (#0) }), span: src/lib.rs:27:13: 27:18 (#0) }), els: None, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).18), span: src/lib.rs:27:5: 27:19 (#0), source: Normal }), span: src/lib.rs:27:5: 27:19 (#0) }], expr: None, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).20), rules: DefaultBlock, span: src/lib.rs:22:20: 28:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:24:24: 24:25 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).4), kind: Path(Resolved(None, Path { span: src/lib.rs:24:13: 24:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).6), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:13: 24:21 (#0) }, []), span: src/lib.rs:24:13: 24:23 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).7), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).8), kind: Path(Resolved(None, Path { span: src/lib.rs:24:26: 24:34 (#0), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).10), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:26: 24:34 (#0) }, []), span: src/lib.rs:24:26: 24:36 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).4), kind: Path(Resolved(None, Path { span: src/lib.rs:24:13: 24:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).6), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:13: 24:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:24:13: 24:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).6), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).8), kind: Path(Resolved(None, Path { span: src/lib.rs:24:26: 24:34 (#0), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).10), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:26: 24:34 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:24:26: 24:34 (#0), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).10), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:3 ~ c[3801]::value)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:27:15: 27:16 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) }), span: src/lib.rs:27:13: 27:14 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).16), kind: Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] })), span: src/lib.rs:27:17: 27:18 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:27:15: 27:16 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) }), span: src/lib.rs:27:13: 27:14 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).16), kind: Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] })), span: src/lib.rs:27:17: 27:18 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:6 ~ a[c74b]::test_addition)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:30:30: 30:30 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:30:1: 30:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:30:30: 30:30 (#0), span: src/lib.rs:30:28: 30:28 (#0) }, BodyId { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).22) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).20), y#0, None), span: src/lib.rs:32:9: 32:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) }), span: src/lib.rs:32:16: 32:28 (#7) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:29: 32:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:53: 32:58 (#0) })), span: src/lib.rs:32:13: 32:58 (#0) }), els: None, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).19), span: src/lib.rs:32:5: 32:59 (#0), source: Normal }), span: src/lib.rs:32:5: 32:59 (#0) }], expr: None, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).21), rules: DefaultBlock, span: src/lib.rs:30:31: 33:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) }), span: src/lib.rs:32:16: 32:28 (#7) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:29: 32:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:53: 32:58 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) }), span: src/lib.rs:32:16: 32:28 (#7) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:29: 32:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:53: 32:58 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:7 ~ a[c74b]::test_addition_in_if_else)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:35:25: 35:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:35:1: 35:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:35:25: 35:25 (#0), span: src/lib.rs:35:23: 35:23 (#0) }, BodyId { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).40) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).38), kind: Binding(BindingMode(No, Not), HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).38), y#0, None), span: src/lib.rs:37:9: 37:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) }), span: src/lib.rs:37:16: 37:28 (#8) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:37:29: 43:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:43:12: 49:6 (#0) })), span: src/lib.rs:37:13: 49:6 (#0) }), els: None, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).37), span: src/lib.rs:37:5: 49:7 (#0), source: Normal }), span: src/lib.rs:37:5: 49:7 (#0) }], expr: None, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).39), rules: DefaultBlock, span: src/lib.rs:35:26: 50:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) }), span: src/lib.rs:37:16: 37:28 (#8) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:37:29: 43:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:43:12: 49:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) })
[DEBUG] > expr kind is Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) }), span: src/lib.rs:37:16: 37:28 (#8) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:37:29: 43:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:43:12: 49:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) })
[DEBUG] > expr kind is Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:8 ~ a[c74b]::test_nested_if_else)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:52:25: 52:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:52:1: 52:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:52:25: 52:25 (#0), span: src/lib.rs:52:23: 52:23 (#0) }, BodyId { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).15) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).1), kind: Item(ItemId { owner_id: DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo) }), span: src/lib.rs:54:5: 56:6 (#0) }, Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).7), x#0, None), span: src/lib.rs:59:9: 59:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).3), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).4), kind: Path(Resolved(None, Path { span: src/lib.rs:59:13: 59:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).5), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:59:13: 59:16 (#0) }, []), span: src/lib.rs:59:13: 59:18 (#0) }), els: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).6), span: src/lib.rs:59:5: 59:19 (#0), source: Normal }), span: src/lib.rs:59:5: 59:19 (#0) }, Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).8), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).13), y#0, None), span: src/lib.rs:62:9: 62:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).9), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:62:13: 62:16 (#0) }, []), span: src/lib.rs:62:13: 62:18 (#0) }), els: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).12), span: src/lib.rs:62:5: 62:19 (#0), source: Normal }), span: src/lib.rs:62:5: 62:19 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).14), rules: DefaultBlock, span: src/lib.rs:52:26: 63:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:54:17: 54:20 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:54:17: 54:20 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:54:5: 54:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:54:20: 54:20 (#0), span: src/lib.rs:54:11: 54:11 (#0) }, BodyId { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).1), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:55:9: 55:10 (#0) }), span: src/lib.rs:55:9: 55:10 (#0) }), hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).2), rules: DefaultBlock, span: src/lib.rs:54:21: 56:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:55:9: 55:10 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).4), kind: Path(Resolved(None, Path { span: src/lib.rs:59:13: 59:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).5), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:59:13: 59:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:59:13: 59:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).5), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:62:13: 62:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:62:13: 62:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:9 ~ a[c74b]::test_nested_item_fn)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:54:17: 54:20 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:54:17: 54:20 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:54:5: 54:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:54:20: 54:20 (#0), span: src/lib.rs:54:11: 54:11 (#0) }, BodyId { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).1), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:55:9: 55:10 (#0) }), span: src/lib.rs:55:9: 55:10 (#0) }), hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).2), rules: DefaultBlock, span: src/lib.rs:54:21: 56:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:55:9: 55:10 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:65:29: 65:29 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:65:1: 65:29 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:65:29: 65:29 (#0), span: src/lib.rs:65:27: 65:27 (#0) }, BodyId { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).27) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20), y#0, None), span: src/lib.rs:67:9: 67:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).2), kind: If(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).12), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/lib.rs:67:29: 67:31 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, []), span: src/lib.rs:67:16: 67:28 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, []), span: src/lib.rs:67:32: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#11) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:67:47: 67:48 (#0) }), span: src/lib.rs:67:47: 67:48 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/lib.rs:67:45: 67:50 (#0), targeted_by_break: false }, None), span: src/lib.rs:67:45: 67:50 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:67:58: 67:59 (#0) }), span: src/lib.rs:67:58: 67:59 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/lib.rs:67:56: 67:61 (#0), targeted_by_break: false }, None), span: src/lib.rs:67:56: 67:61 (#0) })), span: src/lib.rs:67:13: 67:61 (#0) }), els: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).19), span: src/lib.rs:67:5: 67:62 (#0), source: Normal }), span: src/lib.rs:67:5: 67:62 (#0) }, Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).21), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).25), kind: Binding(BindingMode(No, Not), HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).25), z#0, None), span: src/lib.rs:70:9: 70:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).22), kind: Path(Resolved(None, Path { span: src/lib.rs:70:13: 70:14 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), args: None, infer_args: true }] })), span: src/lib.rs:70:13: 70:14 (#0) }), els: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).24), span: src/lib.rs:70:5: 70:15 (#0), source: Normal }), span: src/lib.rs:70:5: 70:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).26), rules: DefaultBlock, span: src/lib.rs:65:30: 71:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).12), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/lib.rs:67:29: 67:31 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, []), span: src/lib.rs:67:16: 67:28 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, []), span: src/lib.rs:67:32: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#11) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:67:47: 67:48 (#0) }), span: src/lib.rs:67:47: 67:48 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/lib.rs:67:45: 67:50 (#0), targeted_by_break: false }, None), span: src/lib.rs:67:45: 67:50 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:67:58: 67:59 (#0) }), span: src/lib.rs:67:58: 67:59 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/lib.rs:67:56: 67:61 (#0), targeted_by_break: false }, None), span: src/lib.rs:67:56: 67:61 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/lib.rs:67:29: 67:31 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, []), span: src/lib.rs:67:16: 67:28 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, []), span: src/lib.rs:67:32: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#0) })
[DEBUG] > expr kind is Binary(Spanned { node: And, span: src/lib.rs:67:29: 67:31 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, []), span: src/lib.rs:67:16: 67:28 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, []), span: src/lib.rs:67:32: 67:44 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:67:47: 67:48 (#0) }), span: src/lib.rs:67:47: 67:48 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/lib.rs:67:45: 67:50 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:67:47: 67:48 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:67:58: 67:59 (#0) }), span: src/lib.rs:67:58: 67:59 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/lib.rs:67:56: 67:61 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:67:58: 67:59 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:70:13: 70:14 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:70:13: 70:14 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:10 ~ a[c74b]::test_if_else_guard_expr)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:73:21: 73:21 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:73:1: 73:21 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:73:21: 73:21 (#0), span: src/lib.rs:73:19: 73:19 (#0) }, BodyId { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).31) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4), x#0, None), span: src/lib.rs:75:9: 75:14 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:75:17: 75:18 (#0) }), span: src/lib.rs:75:17: 75:18 (#0) }), els: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).3), span: src/lib.rs:75:5: 75:19 (#0), source: Normal }), span: src/lib.rs:75:5: 75:19 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).5), kind: If(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).15), kind: DropTemps(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).6), kind: Binary(Spanned { node: Or, span: src/lib.rs:77:21: 77:23 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).7), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, []), span: src/lib.rs:77:8: 77:20 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).11), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, []), span: src/lib.rs:77:24: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#12) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).22), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).20), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).16), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0)), span: src/lib.rs:78:9: 78:14 (#0) }), span: src/lib.rs:78:9: 78:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).21), rules: DefaultBlock, span: src/lib.rs:77:37: 79:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:77:37: 79:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).23), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).28), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).24), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0)), span: src/lib.rs:80:9: 80:14 (#0) }), span: src/lib.rs:80:9: 80:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).29), rules: DefaultBlock, span: src/lib.rs:79:12: 81:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:79:12: 81:6 (#0) })), span: src/lib.rs:77:5: 81:6 (#0) }), hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).30), rules: DefaultBlock, span: src/lib.rs:73:22: 82:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:75:17: 75:18 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).15), kind: DropTemps(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).6), kind: Binary(Spanned { node: Or, span: src/lib.rs:77:21: 77:23 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).7), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, []), span: src/lib.rs:77:8: 77:20 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).11), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, []), span: src/lib.rs:77:24: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#12) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).22), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).20), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).16), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0)), span: src/lib.rs:78:9: 78:14 (#0) }), span: src/lib.rs:78:9: 78:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).21), rules: DefaultBlock, span: src/lib.rs:77:37: 79:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:77:37: 79:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).23), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).28), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).24), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0)), span: src/lib.rs:80:9: 80:14 (#0) }), span: src/lib.rs:80:9: 80:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).29), rules: DefaultBlock, span: src/lib.rs:79:12: 81:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:79:12: 81:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).6), kind: Binary(Spanned { node: Or, span: src/lib.rs:77:21: 77:23 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).7), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, []), span: src/lib.rs:77:8: 77:20 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).11), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, []), span: src/lib.rs:77:24: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#0) })
[DEBUG] > expr kind is Binary(Spanned { node: Or, span: src/lib.rs:77:21: 77:23 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).7), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, []), span: src/lib.rs:77:8: 77:20 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).11), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, []), span: src/lib.rs:77:24: 77:36 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).20), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).16), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0)), span: src/lib.rs:78:9: 78:14 (#0) }), span: src/lib.rs:78:9: 78:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).21), rules: DefaultBlock, span: src/lib.rs:77:37: 79:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).28), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).24), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0)), span: src/lib.rs:80:9: 80:14 (#0) }), span: src/lib.rs:80:9: 80:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).29), rules: DefaultBlock, span: src/lib.rs:79:12: 81:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:11 ~ a[c74b]::test_assign_mut)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:84:17: 84:17 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:84:1: 84:17 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:84:17: 84:17 (#0), span: src/lib.rs:84:15: 84:15 (#0) }, BodyId { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).12) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).1), kind: Item(ItemId { owner_id: DefId(0:13 ~ a[c74b]::test_struct::Boo) }), span: src/lib.rs:85:5: 89:6 (#0) }, Stmt { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).10), kind: Binding(BindingMode(No, Not), HirId(DefId(0:12 ~ a[c74b]::test_struct).10), boo#0, None), span: src/lib.rs:92:9: 92:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).3), kind: Struct(Resolved(None, Path { span: src/lib.rs:92:15: 92:18 (#0), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).4), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) }), span: src/lib.rs:92:24: 92:25 (#0) }, span: src/lib.rs:92:21: 92:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:92:30: 92:34 (#0) }), span: src/lib.rs:92:30: 92:34 (#0) }, span: src/lib.rs:92:27: 92:34 (#0), is_shorthand: false }], None), span: src/lib.rs:92:15: 92:36 (#0) }), els: None, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).9), span: src/lib.rs:92:5: 92:37 (#0), source: Normal }), span: src/lib.rs:92:5: 92:37 (#0) }], expr: None, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).11), rules: DefaultBlock, span: src/lib.rs:84:18: 93:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/lib.rs:87:9: 87:15 (#0), vis_span: src/lib.rs:87:9: 87:9 (#0), ident: x#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).3), def_id: DefId(0:20 ~ a[c74b]::test_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/lib.rs:87:12: 87:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:87:12: 87:15 (#0) } }, FieldDef { span: src/lib.rs:88:9: 88:16 (#0), vis_span: src/lib.rs:88:9: 88:9 (#0), ident: y#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).6), def_id: DefId(0:14 ~ a[c74b]::test_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:88:12: 88:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/lib.rs:88:12: 88:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:85:15: 85:15 (#0), span: src/lib.rs:85:15: 85:15 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:92:15: 92:18 (#0), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).4), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) }), span: src/lib.rs:92:24: 92:25 (#0) }, span: src/lib.rs:92:21: 92:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:92:30: 92:34 (#0) }), span: src/lib.rs:92:30: 92:34 (#0) }, span: src/lib.rs:92:27: 92:34 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:13 ~ a[c74b]::test_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:92:30: 92:34 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:92:15: 92:18 (#0), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).4), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) }), span: src/lib.rs:92:24: 92:25 (#0) }, span: src/lib.rs:92:21: 92:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:92:30: 92:34 (#0) }), span: src/lib.rs:92:30: 92:34 (#0) }, span: src/lib.rs:92:27: 92:34 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:13 ~ a[c74b]::test_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:92:30: 92:34 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:12 ~ a[c74b]::test_struct)
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/lib.rs:87:9: 87:15 (#0), vis_span: src/lib.rs:87:9: 87:9 (#0), ident: x#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).3), def_id: DefId(0:20 ~ a[c74b]::test_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/lib.rs:87:12: 87:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:87:12: 87:15 (#0) } }, FieldDef { span: src/lib.rs:88:9: 88:16 (#0), vis_span: src/lib.rs:88:9: 88:9 (#0), ident: y#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).6), def_id: DefId(0:14 ~ a[c74b]::test_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:88:12: 88:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/lib.rs:88:12: 88:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:85:15: 85:15 (#0), span: src/lib.rs:85:15: 85:15 (#0) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:95:20: 95:20 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:95:1: 95:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:95:20: 95:20 (#0), span: src/lib.rs:95:18: 95:18 (#0) }, BodyId { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).28) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).1), kind: Item(ItemId { owner_id: DefId(0:16 ~ a[c74b]::test_if_struct::Boo) }), span: src/lib.rs:96:5: 100:6 (#0) }, Stmt { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).26), kind: Binding(BindingMode(No, Not), HirId(DefId(0:15 ~ a[c74b]::test_if_struct).26), boo#0, None), span: src/lib.rs:103:9: 103:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).3), kind: If(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) }), span: src/lib.rs:103:18: 103:30 (#13) }, Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:103:31: 105:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:105:12: 107:6 (#0) })), span: src/lib.rs:103:15: 107:6 (#0) }), els: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).25), span: src/lib.rs:103:5: 107:7 (#0), source: Normal }), span: src/lib.rs:103:5: 107:7 (#0) }], expr: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).27), rules: DefaultBlock, span: src/lib.rs:95:21: 108:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/lib.rs:98:9: 98:15 (#0), vis_span: src/lib.rs:98:9: 98:9 (#0), ident: x#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).3), def_id: DefId(0:21 ~ a[c74b]::test_if_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/lib.rs:98:12: 98:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:98:12: 98:15 (#0) } }, FieldDef { span: src/lib.rs:99:9: 99:16 (#0), vis_span: src/lib.rs:99:9: 99:9 (#0), ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).6), def_id: DefId(0:17 ~ a[c74b]::test_if_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:99:12: 99:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/lib.rs:99:12: 99:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:96:15: 96:15 (#0), span: src/lib.rs:96:15: 96:15 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) }), span: src/lib.rs:103:18: 103:30 (#13) }, Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:103:31: 105:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:105:12: 107:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:16 ~ a[c74b]::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:16 ~ a[c74b]::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) }), span: src/lib.rs:103:18: 103:30 (#13) }, Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:103:31: 105:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:105:12: 107:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:16 ~ a[c74b]::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:16 ~ a[c74b]::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:15 ~ a[c74b]::test_if_struct)
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/lib.rs:98:9: 98:15 (#0), vis_span: src/lib.rs:98:9: 98:9 (#0), ident: x#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).3), def_id: DefId(0:21 ~ a[c74b]::test_if_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/lib.rs:98:12: 98:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:98:12: 98:15 (#0) } }, FieldDef { span: src/lib.rs:99:9: 99:16 (#0), vis_span: src/lib.rs:99:9: 99:9 (#0), ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).6), def_id: DefId(0:17 ~ a[c74b]::test_if_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:99:12: 99:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/lib.rs:99:12: 99:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:96:15: 96:15 (#0), span: src/lib.rs:96:15: 96:15 (#0) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:122:26: 122:26 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:122:1: 122:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:122:26: 122:26 (#0), span: src/lib.rs:122:24: 122:24 (#0) }, BodyId { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).62) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).9), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).9), s#0, None), span: src/lib.rs:123:9: 123:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).2), kind: Call(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).3), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).5), kind: Path(Resolved(None, Path { span: src/lib.rs:123:13: 123:19 (#0), res: Def(Struct, DefId(5:8016 ~ alloc[5873]::string::String)), segments: [PathSegment { ident: String#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).4), res: Def(Struct, DefId(5:8016 ~ alloc[5873]::string::String)), args: None, infer_args: true }] })), span: src/lib.rs:123:13: 123:19 (#0) }, PathSegment { ident: from#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).6), res: Err, args: None, infer_args: true })), span: src/lib.rs:123:13: 123:25 (#0) }, [Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).7), kind: Lit(Spanned { node: Str("far", Cooked), span: src/lib.rs:123:26: 123:31 (#0) }), span: src/lib.rs:123:26: 123:31 (#0) }]), span: src/lib.rs:123:13: 123:32 (#0) }), els: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).8), span: src/lib.rs:123:5: 123:33 (#0), source: Normal }), span: src/lib.rs:123:5: 123:33 (#0) }, Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).10), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).17), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).17), itr#0, None), span: src/lib.rs:125:9: 125:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).11), kind: Struct(LangItem(Range, src/lib.rs:125:15: 125:20 (#0)), [ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).13), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).12), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:125:15: 125:16 (#0) }), span: src/lib.rs:125:15: 125:16 (#0) }, span: src/lib.rs:125:15: 125:16 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).15), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).14), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: src/lib.rs:125:18: 125:20 (#0) }), span: src/lib.rs:125:18: 125:20 (#0) }, span: src/lib.rs:125:18: 125:20 (#0), is_shorthand: false }], None), span: src/lib.rs:125:15: 125:20 (#0) }), els: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).16), span: src/lib.rs:125:5: 125:21 (#0), source: Normal }), span: src/lib.rs:125:5: 125:21 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).18), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).19), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57), _t#0, None), span: src/lib.rs:128:9: 128:11 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).20), kind: Match(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).21), kind: MethodCall(PathSegment { ident: into_iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).22), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).23), kind: Struct(Resolved(None, Path { span: src/lib.rs:128:21: 128:26 (#0), res: Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range)), segments: [PathSegment { ident: Range#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).24), res: Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).25), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).26), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:128:36: 128:37 (#0) }), span: src/lib.rs:128:36: 128:37 (#0) }, span: src/lib.rs:128:29: 128:37 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).27), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).28), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: src/lib.rs:128:44: 128:46 (#0) }), span: src/lib.rs:128:44: 128:46 (#0) }, span: src/lib.rs:128:39: 128:46 (#0), is_shorthand: false }], None), span: src/lib.rs:128:20: 128:49 (#0) }, [], src/lib.rs:128:50: 128:61 (#0)), span: src/lib.rs:128:20: 128:61 (#0) }, [Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).30), span: src/lib.rs:129:9: 140:10 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29), iter#0, None), span: src/lib.rs:129:9: 129:17 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).31), kind: Loop(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).32), kind: Match(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).33), kind: MethodCall(PathSegment { ident: next#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).35), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).36), kind: Path(Resolved(None, Path { span: src/lib.rs:130:25: 130:29 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).37), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29)), args: None, infer_args: true }] })), span: src/lib.rs:130:25: 130:29 (#0) }), span: src/lib.rs:130:19: 130:30 (#0) }, [], src/lib.rs:130:31: 130:37 (#0)), span: src/lib.rs:130:19: 130:37 (#0) }, [Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).40), span: src/lib.rs:131:17: 131:30 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).39), kind: Path(Resolved(None, Path { span: src/lib.rs:131:17: 131:21 (#0), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), segments: [PathSegment { ident: None#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).38), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), args: None, infer_args: true }] })), span: src/lib.rs:131:17: 131:21 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).41), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).31)) }, None), span: src/lib.rs:131:25: 131:30 (#0) } }, Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).46), span: src/lib.rs:132:17: 138:18 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).45), kind: Struct(Resolved(None, Path { span: src/lib.rs:132:17: 132:21 (#0), res: Def(Variant, DefId(2:37173 ~ core[7d5a]::option::Option::Some)), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).42), res: Def(Variant, DefId(2:37173 ~ core[7d5a]::option::Option::Some)), args: None, infer_args: true }] }), [PatField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).43), ident: 0#0, pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).44), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).44), i#0, None), span: src/lib.rs:132:27: 132:28 (#0), default_binding_modes: true }, is_shorthand: false, span: src/lib.rs:132:24: 132:28 (#0) }], false), span: src/lib.rs:132:17: 132:30 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).47), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).48), kind: Item(ItemId { owner_id: DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo) }), span: src/lib.rs:134:21: 136:22 (#0) }, Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).53), kind: Semi(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).49), kind: Call(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).50), kind: Path(Resolved(None, Path { span: src/lib.rs:137:21: 137:24 (#0), res: Def(Fn, DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)), segments: [PathSegment { ident: foo#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).51), res: Def(Fn, DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)), args: None, infer_args: true }] })), span: src/lib.rs:137:21: 137:24 (#0) }, [Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).52), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:137:25: 137:26 (#0) }), span: src/lib.rs:137:25: 137:26 (#0) }]), span: src/lib.rs:137:21: 137:27 (#0) }), span: src/lib.rs:137:21: 137:28 (#0) }], expr: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).54), rules: DefaultBlock, span: src/lib.rs:132:34: 138:18 (#0), targeted_by_break: false }, None), span: src/lib.rs:132:34: 138:18 (#0) } }], Normal), span: src/lib.rs:130:13: 139:14 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).55), rules: DefaultBlock, span: src/lib.rs:129:26: 140:10 (#0), targeted_by_break: false }, None, Loop, src/lib.rs:129:21: 129:25 (#0)), span: src/lib.rs:129:21: 140:10 (#0) } }], Normal), span: src/lib.rs:128:14: 141:6 (#0) }), els: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).56), span: src/lib.rs:128:5: 141:7 (#0), source: Normal }), span: src/lib.rs:128:5: 141:7 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).58), kind: Path(Resolved(None, Path { span: src/lib.rs:142:5: 142:7 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), segments: [PathSegment { ident: _t#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).59), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), args: None, infer_args: true }] })), span: src/lib.rs:142:5: 142:7 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).60), rules: DefaultBlock, span: src/lib.rs:127:1: 143:2 (#0), targeted_by_break: false }, None), span: src/lib.rs:127:1: 143:2 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).61), rules: DefaultBlock, span: src/lib.rs:122:27: 153:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).19), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57), _t#0, None), span: src/lib.rs:128:9: 128:11 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).20), kind: Match(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).21), kind: MethodCall(PathSegment { ident: into_iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).22), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).23), kind: Struct(Resolved(None, Path { span: src/lib.rs:128:21: 128:26 (#0), res: Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range)), segments: [PathSegment { ident: Range#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).24), res: Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).25), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).26), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:128:36: 128:37 (#0) }), span: src/lib.rs:128:36: 128:37 (#0) }, span: src/lib.rs:128:29: 128:37 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).27), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).28), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: src/lib.rs:128:44: 128:46 (#0) }), span: src/lib.rs:128:44: 128:46 (#0) }, span: src/lib.rs:128:39: 128:46 (#0), is_shorthand: false }], None), span: src/lib.rs:128:20: 128:49 (#0) }, [], src/lib.rs:128:50: 128:61 (#0)), span: src/lib.rs:128:20: 128:61 (#0) }, [Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).30), span: src/lib.rs:129:9: 140:10 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29), iter#0, None), span: src/lib.rs:129:9: 129:17 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).31), kind: Loop(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).32), kind: Match(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).33), kind: MethodCall(PathSegment { ident: next#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).35), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).36), kind: Path(Resolved(None, Path { span: src/lib.rs:130:25: 130:29 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).37), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29)), args: None, infer_args: true }] })), span: src/lib.rs:130:25: 130:29 (#0) }), span: src/lib.rs:130:19: 130:30 (#0) }, [], src/lib.rs:130:31: 130:37 (#0)), span: src/lib.rs:130:19: 130:37 (#0) }, [Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).40), span: src/lib.rs:131:17: 131:30 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).39), kind: Path(Resolved(None, Path { span: src/lib.rs:131:17: 131:21 (#0), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), segments: [PathSegment { ident: None#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).38), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), args: None, infer_args: true }] })), span: src/lib.rs:131:17: 131:21 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).41), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).31)) }, None), span: src/lib.rs:131:25: 131:30 (#0) } }, Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).46), span: src/lib.rs:132:17: 138:18 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).45), kind: Struct(Resolved(None, Path { span: src/lib.rs:132:17: 132:21 (#0), res: Def(Variant, DefId(2:37173 ~ core[7d5a]::option::Option::Some)), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).42), res: Def(Variant, DefId(2:37173 ~ core[7d5a]::option::Option::Some)), args: None, infer_args: true }] }), [PatField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).43), ident: 0#0, pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).44), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).44), i#0, None), span: src/lib.rs:132:27: 132:28 (#0), default_binding_modes: true }, is_shorthand: false, span: src/lib.rs:132:24: 132:28 (#0) }], false), span: src/lib.rs:132:17: 132:30 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).47), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).48), kind: Item(ItemId { owner_id: DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo) }), span: src/lib.rs:134:21: 136:22 (#0) }, Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).53), kind: Semi(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).49), kind: Call(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).50), kind: Path(Resolved(None, Path { span: src/lib.rs:137:21: 137:24 (#0), res: Def(Fn, DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)), segments: [PathSegment { ident: foo#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).51), res: Def(Fn, DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)), args: None, infer_args: true }] })), span: src/lib.rs:137:21: 137:24 (#0) }, [Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).52), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:137:25: 137:26 (#0) }), span: src/lib.rs:137:25: 137:26 (#0) }]), span: src/lib.rs:137:21: 137:27 (#0) }), span: src/lib.rs:137:21: 137:28 (#0) }], expr: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).54), rules: DefaultBlock, span: src/lib.rs:132:34: 138:18 (#0), targeted_by_break: false }, None), span: src/lib.rs:132:34: 138:18 (#0) } }], Normal), span: src/lib.rs:130:13: 139:14 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).55), rules: DefaultBlock, span: src/lib.rs:129:26: 140:10 (#0), targeted_by_break: false }, None, Loop, src/lib.rs:129:21: 129:25 (#0)), span: src/lib.rs:129:21: 140:10 (#0) } }], Normal), span: src/lib.rs:128:14: 141:6 (#0) }), els: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).56), span: src/lib.rs:128:5: 141:7 (#0), source: Normal }), span: src/lib.rs:128:5: 141:7 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).58), kind: Path(Resolved(None, Path { span: src/lib.rs:142:5: 142:7 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), segments: [PathSegment { ident: _t#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).59), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), args: None, infer_args: true }] })), span: src/lib.rs:142:5: 142:7 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).60), rules: DefaultBlock, span: src/lib.rs:127:1: 143:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:142:5: 142:7 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), segments: [PathSegment { ident: _t#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).59), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:18 ~ a[c74b]::test_fn_args_in_loop)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).6), kind: Path(Resolved(None, Path { span: src/lib.rs:134:31: 134:34 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).7), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:134:31: 134:34 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).8), kind: Path(Resolved(None, Path { span: src/lib.rs:134:39: 134:42 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).9), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:134:39: 134:42 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:134:21: 134:42 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:134:42: 134:42 (#0), span: src/lib.rs:134:27: 134:27 (#0) }, BodyId { hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).5) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).3), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:135:25: 135:26 (#0) }), span: src/lib.rs:135:25: 135:26 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).4), rules: DefaultBlock, span: src/lib.rs:134:43: 136:22 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:135:25: 135:26 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Coenobita invoked for crate 'c'
=========
[DEBUG] Coenobita invoked for crate 'b'
=========
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:19: 2:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:3 ~ b[3f10]::value).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:19: 2:22 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:1: 2:22 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:22: 2:22 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:13: 2:13 (#0) }, BodyId { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).1), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) }), hir_id: HirId(DefId(0:3 ~ b[3f10]::value).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:23: 4:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:3 ~ b[3f10]::value)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:3 ~ c[3801]::value).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:19: 2:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:3 ~ c[3801]::value).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:19: 2:22 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:1: 2:22 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:22: 2:22 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:13: 2:13 (#0) }, BodyId { hir_id: HirId(DefId(0:3 ~ c[3801]::value).3) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:21: 7:25 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:21: 7:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:1: 7:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:25: 7:25 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:15: 7:15 (#0) }, BodyId { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).1), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) }), hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:26: 9:2 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:3 ~ c[3801]::value).1), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:5: 3:6 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:5: 3:6 (#0) }), hir_id: HirId(DefId(0:3 ~ c[3801]::value).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:23: 4:2 (#0), targeted_by_break: false }, None)
[DEBUG] Trying to get type of function DefId(0:4 ~ b[3f10]::boolean)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:5: 3:6 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:3 ~ c[3801]::value)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:21: 7:25 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:21: 7:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:1: 7:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:25: 7:25 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:15: 7:15 (#0) }, BodyId { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).1), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:5: 8:9 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:5: 8:9 (#0) }), hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:26: 9:2 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:5: 8:9 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:4 ~ c[3801]::boolean)
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Use(Path { span: src/lib.rs:4:5: 4:23 (#0), res: [Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range))], segments: [PathSegment { ident: core#0, hir_id: HirId(DefId(0:3 ~ a[c74b]::{use#1}).1), res: Def(Mod, DefId(2:0 ~ core[7d5a])), args: None, infer_args: false }, PathSegment { ident: range#0, hir_id: HirId(DefId(0:3 ~ a[c74b]::{use#1}).2), res: Def(Mod, DefId(2:10174 ~ core[7d5a]::range)), args: None, infer_args: false }, PathSegment { ident: Range#0, hir_id: HirId(DefId(0:3 ~ a[c74b]::{use#1}).3), res: Err, args: None, infer_args: false }] }, Single)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:6:25: 6:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:6:1: 6:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:6:25: 6:25 (#0), span: src/lib.rs:6:23: 6:23 (#0) }, BodyId { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).16) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).7), x#0, None), span: src/lib.rs:8:9: 8:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).2), kind: Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).3), kind: Path(Resolved(None, Path { span: src/lib.rs:8:13: 8:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).4), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).5), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:8:13: 8:21 (#0) }, []), span: src/lib.rs:8:13: 8:23 (#0) }), els: None, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).6), span: src/lib.rs:8:5: 8:24 (#0), source: Normal }), span: src/lib.rs:8:5: 8:24 (#0) }, Stmt { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).8), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).14), kind: Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).14), x#0, None), span: src/lib.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).9), kind: Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:11:13: 11:21 (#0) }, []), span: src/lib.rs:11:13: 11:23 (#0) }), els: None, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).13), span: src/lib.rs:11:5: 11:24 (#0), source: Normal }), span: src/lib.rs:11:5: 11:24 (#0) }], expr: None, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).15), rules: DefaultBlock, span: src/lib.rs:6:26: 12:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).3), kind: Path(Resolved(None, Path { span: src/lib.rs:8:13: 8:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).4), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).5), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:8:13: 8:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:8:13: 8:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).4), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).5), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:11:13: 11:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:11:13: 11:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:4 ~ a[c74b]::test_let_annotation)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:14:24: 14:24 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:14:1: 14:24 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:14:24: 14:24 (#0), span: src/lib.rs:14:22: 14:22 (#0) }, BodyId { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).22) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15), kind: Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15), y#0, None), span: src/lib.rs:16:9: 16:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:16:16: 16:26 (#0) }, []), span: src/lib.rs:16:16: 16:28 (#0) }), span: src/lib.rs:16:16: 16:28 (#6) }, Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).10), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:16:31: 16:32 (#0) }), span: src/lib.rs:16:31: 16:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).9), rules: DefaultBlock, span: src/lib.rs:16:29: 16:34 (#0), targeted_by_break: false }, None), span: src/lib.rs:16:29: 16:34 (#0) }, Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).11), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:16:42: 16:43 (#0) }), span: src/lib.rs:16:42: 16:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).13), rules: DefaultBlock, span: src/lib.rs:16:40: 16:45 (#0), targeted_by_break: false }, None), span: src/lib.rs:16:40: 16:45 (#0) })), span: src/lib.rs:16:13: 16:45 (#0) }), els: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).14), span: src/lib.rs:16:5: 16:46 (#0), source: Normal }), span: src/lib.rs:16:5: 16:46 (#0) }, Stmt { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).16), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).20), z#0, None), span: src/lib.rs:19:9: 19:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).17), kind: Path(Resolved(None, Path { span: src/lib.rs:19:13: 19:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), args: None, infer_args: true }] })), span: src/lib.rs:19:13: 19:14 (#0) }), els: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).19), span: src/lib.rs:19:5: 19:15 (#0), source: Normal }), span: src/lib.rs:19:5: 19:15 (#0) }], expr: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).21), rules: DefaultBlock, span: src/lib.rs:14:25: 20:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:16:16: 16:26 (#0) }, []), span: src/lib.rs:16:16: 16:28 (#0) }), span: src/lib.rs:16:16: 16:28 (#6) }, Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).10), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:16:31: 16:32 (#0) }), span: src/lib.rs:16:31: 16:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).9), rules: DefaultBlock, span: src/lib.rs:16:29: 16:34 (#0), targeted_by_break: false }, None), span: src/lib.rs:16:29: 16:34 (#0) }, Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).11), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:16:42: 16:43 (#0) }), span: src/lib.rs:16:42: 16:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).13), rules: DefaultBlock, span: src/lib.rs:16:40: 16:45 (#0), targeted_by_break: false }, None), span: src/lib.rs:16:40: 16:45 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:16:16: 16:26 (#0) }, []), span: src/lib.rs:16:16: 16:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:16:16: 16:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:16:31: 16:32 (#0) }), span: src/lib.rs:16:31: 16:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).9), rules: DefaultBlock, span: src/lib.rs:16:29: 16:34 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:16:31: 16:32 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:16:42: 16:43 (#0) }), span: src/lib.rs:16:42: 16:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).13), rules: DefaultBlock, span: src/lib.rs:16:40: 16:45 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:16:42: 16:43 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:19:13: 19:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:19:13: 19:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:5 ~ a[c74b]::test_basic_if_else)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:22:19: 22:19 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:22:1: 22:19 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:22:19: 22:19 (#0), span: src/lib.rs:22:17: 22:17 (#0) }, BodyId { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).21) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).12), kind: Binding(BindingMode(No, Not), HirId(DefId(0:6 ~ a[c74b]::test_addition).12), x#0, None), span: src/lib.rs:24:9: 24:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).2), kind: Binary(Spanned { node: Add, span: src/lib.rs:24:24: 24:25 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).4), kind: Path(Resolved(None, Path { span: src/lib.rs:24:13: 24:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).6), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:13: 24:21 (#0) }, []), span: src/lib.rs:24:13: 24:23 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).7), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).8), kind: Path(Resolved(None, Path { span: src/lib.rs:24:26: 24:34 (#0), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).10), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:26: 24:34 (#0) }, []), span: src/lib.rs:24:26: 24:36 (#0) }), span: src/lib.rs:24:13: 24:36 (#0) }), els: None, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).11), span: src/lib.rs:24:5: 24:37 (#0), source: Normal }), span: src/lib.rs:24:5: 24:37 (#0) }, Stmt { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).13), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).19), kind: Binding(BindingMode(No, Not), HirId(DefId(0:6 ~ a[c74b]::test_addition).19), y#0, None), span: src/lib.rs:27:9: 27:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).14), kind: Binary(Spanned { node: Add, span: src/lib.rs:27:15: 27:16 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) }), span: src/lib.rs:27:13: 27:14 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).16), kind: Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] })), span: src/lib.rs:27:17: 27:18 (#0) }), span: src/lib.rs:27:13: 27:18 (#0) }), els: None, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).18), span: src/lib.rs:27:5: 27:19 (#0), source: Normal }), span: src/lib.rs:27:5: 27:19 (#0) }], expr: None, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).20), rules: DefaultBlock, span: src/lib.rs:22:20: 28:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:24:24: 24:25 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).4), kind: Path(Resolved(None, Path { span: src/lib.rs:24:13: 24:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).6), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:13: 24:21 (#0) }, []), span: src/lib.rs:24:13: 24:23 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).7), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).8), kind: Path(Resolved(None, Path { span: src/lib.rs:24:26: 24:34 (#0), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).10), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:26: 24:34 (#0) }, []), span: src/lib.rs:24:26: 24:36 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).4), kind: Path(Resolved(None, Path { span: src/lib.rs:24:13: 24:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).6), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:13: 24:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:24:13: 24:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).6), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).8), kind: Path(Resolved(None, Path { span: src/lib.rs:24:26: 24:34 (#0), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).10), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:26: 24:34 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:24:26: 24:34 (#0), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).10), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:3 ~ c[3801]::value)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:27:15: 27:16 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) }), span: src/lib.rs:27:13: 27:14 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).16), kind: Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] })), span: src/lib.rs:27:17: 27:18 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:27:15: 27:16 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) }), span: src/lib.rs:27:13: 27:14 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).16), kind: Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] })), span: src/lib.rs:27:17: 27:18 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:6 ~ a[c74b]::test_addition)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:30:30: 30:30 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:30:1: 30:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:30:30: 30:30 (#0), span: src/lib.rs:30:28: 30:28 (#0) }, BodyId { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).22) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).20), y#0, None), span: src/lib.rs:32:9: 32:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) }), span: src/lib.rs:32:16: 32:28 (#7) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:29: 32:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:53: 32:58 (#0) })), span: src/lib.rs:32:13: 32:58 (#0) }), els: None, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).19), span: src/lib.rs:32:5: 32:59 (#0), source: Normal }), span: src/lib.rs:32:5: 32:59 (#0) }], expr: None, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).21), rules: DefaultBlock, span: src/lib.rs:30:31: 33:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) }), span: src/lib.rs:32:16: 32:28 (#7) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:29: 32:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:53: 32:58 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) }), span: src/lib.rs:32:16: 32:28 (#7) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:29: 32:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:53: 32:58 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:7 ~ a[c74b]::test_addition_in_if_else)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:35:25: 35:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:35:1: 35:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:35:25: 35:25 (#0), span: src/lib.rs:35:23: 35:23 (#0) }, BodyId { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).40) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).38), kind: Binding(BindingMode(No, Not), HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).38), y#0, None), span: src/lib.rs:37:9: 37:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) }), span: src/lib.rs:37:16: 37:28 (#8) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:37:29: 43:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:43:12: 49:6 (#0) })), span: src/lib.rs:37:13: 49:6 (#0) }), els: None, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).37), span: src/lib.rs:37:5: 49:7 (#0), source: Normal }), span: src/lib.rs:37:5: 49:7 (#0) }], expr: None, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).39), rules: DefaultBlock, span: src/lib.rs:35:26: 50:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) }), span: src/lib.rs:37:16: 37:28 (#8) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:37:29: 43:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:43:12: 49:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) })
[DEBUG] > expr kind is Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) }), span: src/lib.rs:37:16: 37:28 (#8) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:37:29: 43:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:43:12: 49:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) })
[DEBUG] > expr kind is Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:8 ~ a[c74b]::test_nested_if_else)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:52:25: 52:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:52:1: 52:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:52:25: 52:25 (#0), span: src/lib.rs:52:23: 52:23 (#0) }, BodyId { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).15) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).1), kind: Item(ItemId { owner_id: DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo) }), span: src/lib.rs:54:5: 56:6 (#0) }, Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).7), x#0, None), span: src/lib.rs:59:9: 59:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).3), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).4), kind: Path(Resolved(None, Path { span: src/lib.rs:59:13: 59:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).5), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:59:13: 59:16 (#0) }, []), span: src/lib.rs:59:13: 59:18 (#0) }), els: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).6), span: src/lib.rs:59:5: 59:19 (#0), source: Normal }), span: src/lib.rs:59:5: 59:19 (#0) }, Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).8), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).13), y#0, None), span: src/lib.rs:62:9: 62:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).9), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:62:13: 62:16 (#0) }, []), span: src/lib.rs:62:13: 62:18 (#0) }), els: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).12), span: src/lib.rs:62:5: 62:19 (#0), source: Normal }), span: src/lib.rs:62:5: 62:19 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).14), rules: DefaultBlock, span: src/lib.rs:52:26: 63:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:54:17: 54:20 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:54:17: 54:20 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:54:5: 54:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:54:20: 54:20 (#0), span: src/lib.rs:54:11: 54:11 (#0) }, BodyId { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).1), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:55:9: 55:10 (#0) }), span: src/lib.rs:55:9: 55:10 (#0) }), hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).2), rules: DefaultBlock, span: src/lib.rs:54:21: 56:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:55:9: 55:10 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).4), kind: Path(Resolved(None, Path { span: src/lib.rs:59:13: 59:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).5), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:59:13: 59:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:59:13: 59:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).5), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:62:13: 62:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:62:13: 62:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:9 ~ a[c74b]::test_nested_item_fn)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:54:17: 54:20 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:54:17: 54:20 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:54:5: 54:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:54:20: 54:20 (#0), span: src/lib.rs:54:11: 54:11 (#0) }, BodyId { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).1), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:55:9: 55:10 (#0) }), span: src/lib.rs:55:9: 55:10 (#0) }), hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).2), rules: DefaultBlock, span: src/lib.rs:54:21: 56:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:55:9: 55:10 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:65:29: 65:29 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:65:1: 65:29 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:65:29: 65:29 (#0), span: src/lib.rs:65:27: 65:27 (#0) }, BodyId { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).27) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20), y#0, None), span: src/lib.rs:67:9: 67:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).2), kind: If(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).12), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/lib.rs:67:29: 67:31 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, []), span: src/lib.rs:67:16: 67:28 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, []), span: src/lib.rs:67:32: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#11) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:67:47: 67:48 (#0) }), span: src/lib.rs:67:47: 67:48 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/lib.rs:67:45: 67:50 (#0), targeted_by_break: false }, None), span: src/lib.rs:67:45: 67:50 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:67:58: 67:59 (#0) }), span: src/lib.rs:67:58: 67:59 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/lib.rs:67:56: 67:61 (#0), targeted_by_break: false }, None), span: src/lib.rs:67:56: 67:61 (#0) })), span: src/lib.rs:67:13: 67:61 (#0) }), els: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).19), span: src/lib.rs:67:5: 67:62 (#0), source: Normal }), span: src/lib.rs:67:5: 67:62 (#0) }, Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).21), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).25), kind: Binding(BindingMode(No, Not), HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).25), z#0, None), span: src/lib.rs:70:9: 70:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).22), kind: Path(Resolved(None, Path { span: src/lib.rs:70:13: 70:14 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), args: None, infer_args: true }] })), span: src/lib.rs:70:13: 70:14 (#0) }), els: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).24), span: src/lib.rs:70:5: 70:15 (#0), source: Normal }), span: src/lib.rs:70:5: 70:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).26), rules: DefaultBlock, span: src/lib.rs:65:30: 71:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).12), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/lib.rs:67:29: 67:31 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, []), span: src/lib.rs:67:16: 67:28 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, []), span: src/lib.rs:67:32: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#11) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:67:47: 67:48 (#0) }), span: src/lib.rs:67:47: 67:48 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/lib.rs:67:45: 67:50 (#0), targeted_by_break: false }, None), span: src/lib.rs:67:45: 67:50 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:67:58: 67:59 (#0) }), span: src/lib.rs:67:58: 67:59 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/lib.rs:67:56: 67:61 (#0), targeted_by_break: false }, None), span: src/lib.rs:67:56: 67:61 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/lib.rs:67:29: 67:31 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, []), span: src/lib.rs:67:16: 67:28 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, []), span: src/lib.rs:67:32: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#0) })
[DEBUG] > expr kind is Binary(Spanned { node: And, span: src/lib.rs:67:29: 67:31 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, []), span: src/lib.rs:67:16: 67:28 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, []), span: src/lib.rs:67:32: 67:44 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:67:47: 67:48 (#0) }), span: src/lib.rs:67:47: 67:48 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/lib.rs:67:45: 67:50 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:67:47: 67:48 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:67:58: 67:59 (#0) }), span: src/lib.rs:67:58: 67:59 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/lib.rs:67:56: 67:61 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:67:58: 67:59 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:70:13: 70:14 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:70:13: 70:14 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:10 ~ a[c74b]::test_if_else_guard_expr)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:73:21: 73:21 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:73:1: 73:21 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:73:21: 73:21 (#0), span: src/lib.rs:73:19: 73:19 (#0) }, BodyId { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).31) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4), x#0, None), span: src/lib.rs:75:9: 75:14 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:75:17: 75:18 (#0) }), span: src/lib.rs:75:17: 75:18 (#0) }), els: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).3), span: src/lib.rs:75:5: 75:19 (#0), source: Normal }), span: src/lib.rs:75:5: 75:19 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).5), kind: If(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).15), kind: DropTemps(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).6), kind: Binary(Spanned { node: Or, span: src/lib.rs:77:21: 77:23 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).7), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, []), span: src/lib.rs:77:8: 77:20 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).11), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, []), span: src/lib.rs:77:24: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#12) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).22), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).20), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).16), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0)), span: src/lib.rs:78:9: 78:14 (#0) }), span: src/lib.rs:78:9: 78:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).21), rules: DefaultBlock, span: src/lib.rs:77:37: 79:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:77:37: 79:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).23), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).28), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).24), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0)), span: src/lib.rs:80:9: 80:14 (#0) }), span: src/lib.rs:80:9: 80:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).29), rules: DefaultBlock, span: src/lib.rs:79:12: 81:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:79:12: 81:6 (#0) })), span: src/lib.rs:77:5: 81:6 (#0) }), hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).30), rules: DefaultBlock, span: src/lib.rs:73:22: 82:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:75:17: 75:18 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).15), kind: DropTemps(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).6), kind: Binary(Spanned { node: Or, span: src/lib.rs:77:21: 77:23 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).7), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, []), span: src/lib.rs:77:8: 77:20 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).11), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, []), span: src/lib.rs:77:24: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#12) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).22), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).20), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).16), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0)), span: src/lib.rs:78:9: 78:14 (#0) }), span: src/lib.rs:78:9: 78:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).21), rules: DefaultBlock, span: src/lib.rs:77:37: 79:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:77:37: 79:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).23), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).28), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).24), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0)), span: src/lib.rs:80:9: 80:14 (#0) }), span: src/lib.rs:80:9: 80:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).29), rules: DefaultBlock, span: src/lib.rs:79:12: 81:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:79:12: 81:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).6), kind: Binary(Spanned { node: Or, span: src/lib.rs:77:21: 77:23 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).7), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, []), span: src/lib.rs:77:8: 77:20 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).11), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, []), span: src/lib.rs:77:24: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#0) })
[DEBUG] > expr kind is Binary(Spanned { node: Or, span: src/lib.rs:77:21: 77:23 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).7), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, []), span: src/lib.rs:77:8: 77:20 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).11), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, []), span: src/lib.rs:77:24: 77:36 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).20), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).16), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0)), span: src/lib.rs:78:9: 78:14 (#0) }), span: src/lib.rs:78:9: 78:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).21), rules: DefaultBlock, span: src/lib.rs:77:37: 79:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).28), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).24), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0)), span: src/lib.rs:80:9: 80:14 (#0) }), span: src/lib.rs:80:9: 80:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).29), rules: DefaultBlock, span: src/lib.rs:79:12: 81:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:11 ~ a[c74b]::test_assign_mut)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:84:17: 84:17 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:84:1: 84:17 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:84:17: 84:17 (#0), span: src/lib.rs:84:15: 84:15 (#0) }, BodyId { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).12) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).1), kind: Item(ItemId { owner_id: DefId(0:13 ~ a[c74b]::test_struct::Boo) }), span: src/lib.rs:85:5: 89:6 (#0) }, Stmt { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).10), kind: Binding(BindingMode(No, Not), HirId(DefId(0:12 ~ a[c74b]::test_struct).10), boo#0, None), span: src/lib.rs:92:9: 92:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).3), kind: Struct(Resolved(None, Path { span: src/lib.rs:92:15: 92:18 (#0), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).4), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) }), span: src/lib.rs:92:24: 92:25 (#0) }, span: src/lib.rs:92:21: 92:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:92:30: 92:34 (#0) }), span: src/lib.rs:92:30: 92:34 (#0) }, span: src/lib.rs:92:27: 92:34 (#0), is_shorthand: false }], None), span: src/lib.rs:92:15: 92:36 (#0) }), els: None, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).9), span: src/lib.rs:92:5: 92:37 (#0), source: Normal }), span: src/lib.rs:92:5: 92:37 (#0) }], expr: None, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).11), rules: DefaultBlock, span: src/lib.rs:84:18: 93:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/lib.rs:87:9: 87:15 (#0), vis_span: src/lib.rs:87:9: 87:9 (#0), ident: x#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).3), def_id: DefId(0:20 ~ a[c74b]::test_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/lib.rs:87:12: 87:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:87:12: 87:15 (#0) } }, FieldDef { span: src/lib.rs:88:9: 88:16 (#0), vis_span: src/lib.rs:88:9: 88:9 (#0), ident: y#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).6), def_id: DefId(0:14 ~ a[c74b]::test_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:88:12: 88:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/lib.rs:88:12: 88:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:85:15: 85:15 (#0), span: src/lib.rs:85:15: 85:15 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:92:15: 92:18 (#0), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).4), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) }), span: src/lib.rs:92:24: 92:25 (#0) }, span: src/lib.rs:92:21: 92:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:92:30: 92:34 (#0) }), span: src/lib.rs:92:30: 92:34 (#0) }, span: src/lib.rs:92:27: 92:34 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:13 ~ a[c74b]::test_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:92:15: 92:18 (#0), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).4), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) }), span: src/lib.rs:92:24: 92:25 (#0) }, span: src/lib.rs:92:21: 92:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:92:30: 92:34 (#0) }), span: src/lib.rs:92:30: 92:34 (#0) }, span: src/lib.rs:92:27: 92:34 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:13 ~ a[c74b]::test_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:12 ~ a[c74b]::test_struct)
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/lib.rs:87:9: 87:15 (#0), vis_span: src/lib.rs:87:9: 87:9 (#0), ident: x#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).3), def_id: DefId(0:20 ~ a[c74b]::test_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/lib.rs:87:12: 87:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:87:12: 87:15 (#0) } }, FieldDef { span: src/lib.rs:88:9: 88:16 (#0), vis_span: src/lib.rs:88:9: 88:9 (#0), ident: y#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).6), def_id: DefId(0:14 ~ a[c74b]::test_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:88:12: 88:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/lib.rs:88:12: 88:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:85:15: 85:15 (#0), span: src/lib.rs:85:15: 85:15 (#0) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:95:20: 95:20 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:95:1: 95:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:95:20: 95:20 (#0), span: src/lib.rs:95:18: 95:18 (#0) }, BodyId { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).28) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).1), kind: Item(ItemId { owner_id: DefId(0:16 ~ a[c74b]::test_if_struct::Boo) }), span: src/lib.rs:96:5: 100:6 (#0) }, Stmt { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).26), kind: Binding(BindingMode(No, Not), HirId(DefId(0:15 ~ a[c74b]::test_if_struct).26), boo#0, None), span: src/lib.rs:103:9: 103:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).3), kind: If(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) }), span: src/lib.rs:103:18: 103:30 (#13) }, Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:103:31: 105:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:105:12: 107:6 (#0) })), span: src/lib.rs:103:15: 107:6 (#0) }), els: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).25), span: src/lib.rs:103:5: 107:7 (#0), source: Normal }), span: src/lib.rs:103:5: 107:7 (#0) }], expr: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).27), rules: DefaultBlock, span: src/lib.rs:95:21: 108:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/lib.rs:98:9: 98:15 (#0), vis_span: src/lib.rs:98:9: 98:9 (#0), ident: x#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).3), def_id: DefId(0:21 ~ a[c74b]::test_if_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/lib.rs:98:12: 98:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:98:12: 98:15 (#0) } }, FieldDef { span: src/lib.rs:99:9: 99:16 (#0), vis_span: src/lib.rs:99:9: 99:9 (#0), ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).6), def_id: DefId(0:17 ~ a[c74b]::test_if_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:99:12: 99:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/lib.rs:99:12: 99:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:96:15: 96:15 (#0), span: src/lib.rs:96:15: 96:15 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) }), span: src/lib.rs:103:18: 103:30 (#13) }, Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:103:31: 105:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:105:12: 107:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:16 ~ a[c74b]::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:16 ~ a[c74b]::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) }), span: src/lib.rs:103:18: 103:30 (#13) }, Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:103:31: 105:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:105:12: 107:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:16 ~ a[c74b]::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:16 ~ a[c74b]::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:15 ~ a[c74b]::test_if_struct)
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/lib.rs:98:9: 98:15 (#0), vis_span: src/lib.rs:98:9: 98:9 (#0), ident: x#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).3), def_id: DefId(0:21 ~ a[c74b]::test_if_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/lib.rs:98:12: 98:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:98:12: 98:15 (#0) } }, FieldDef { span: src/lib.rs:99:9: 99:16 (#0), vis_span: src/lib.rs:99:9: 99:9 (#0), ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).6), def_id: DefId(0:17 ~ a[c74b]::test_if_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:99:12: 99:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/lib.rs:99:12: 99:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:96:15: 96:15 (#0), span: src/lib.rs:96:15: 96:15 (#0) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:122:26: 122:26 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:122:1: 122:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:122:26: 122:26 (#0), span: src/lib.rs:122:24: 122:24 (#0) }, BodyId { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).62) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).9), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).9), s#0, None), span: src/lib.rs:123:9: 123:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).2), kind: Call(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).3), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).5), kind: Path(Resolved(None, Path { span: src/lib.rs:123:13: 123:19 (#0), res: Def(Struct, DefId(5:8016 ~ alloc[5873]::string::String)), segments: [PathSegment { ident: String#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).4), res: Def(Struct, DefId(5:8016 ~ alloc[5873]::string::String)), args: None, infer_args: true }] })), span: src/lib.rs:123:13: 123:19 (#0) }, PathSegment { ident: from#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).6), res: Err, args: None, infer_args: true })), span: src/lib.rs:123:13: 123:25 (#0) }, [Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).7), kind: Lit(Spanned { node: Str("far", Cooked), span: src/lib.rs:123:26: 123:31 (#0) }), span: src/lib.rs:123:26: 123:31 (#0) }]), span: src/lib.rs:123:13: 123:32 (#0) }), els: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).8), span: src/lib.rs:123:5: 123:33 (#0), source: Normal }), span: src/lib.rs:123:5: 123:33 (#0) }, Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).10), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).17), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).17), itr#0, None), span: src/lib.rs:125:9: 125:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).11), kind: Struct(LangItem(Range, src/lib.rs:125:15: 125:20 (#0)), [ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).13), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).12), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:125:15: 125:16 (#0) }), span: src/lib.rs:125:15: 125:16 (#0) }, span: src/lib.rs:125:15: 125:16 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).15), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).14), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: src/lib.rs:125:18: 125:20 (#0) }), span: src/lib.rs:125:18: 125:20 (#0) }, span: src/lib.rs:125:18: 125:20 (#0), is_shorthand: false }], None), span: src/lib.rs:125:15: 125:20 (#0) }), els: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).16), span: src/lib.rs:125:5: 125:21 (#0), source: Normal }), span: src/lib.rs:125:5: 125:21 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).18), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).19), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57), _t#0, None), span: src/lib.rs:128:9: 128:11 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).20), kind: Match(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).21), kind: MethodCall(PathSegment { ident: into_iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).22), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).23), kind: Struct(Resolved(None, Path { span: src/lib.rs:128:21: 128:26 (#0), res: Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range)), segments: [PathSegment { ident: Range#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).24), res: Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).25), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).26), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:128:36: 128:37 (#0) }), span: src/lib.rs:128:36: 128:37 (#0) }, span: src/lib.rs:128:29: 128:37 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).27), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).28), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: src/lib.rs:128:44: 128:46 (#0) }), span: src/lib.rs:128:44: 128:46 (#0) }, span: src/lib.rs:128:39: 128:46 (#0), is_shorthand: false }], None), span: src/lib.rs:128:20: 128:49 (#0) }, [], src/lib.rs:128:50: 128:61 (#0)), span: src/lib.rs:128:20: 128:61 (#0) }, [Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).30), span: src/lib.rs:129:9: 140:10 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29), iter#0, None), span: src/lib.rs:129:9: 129:17 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).31), kind: Loop(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).32), kind: Match(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).33), kind: MethodCall(PathSegment { ident: next#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).35), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).36), kind: Path(Resolved(None, Path { span: src/lib.rs:130:25: 130:29 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).37), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29)), args: None, infer_args: true }] })), span: src/lib.rs:130:25: 130:29 (#0) }), span: src/lib.rs:130:19: 130:30 (#0) }, [], src/lib.rs:130:31: 130:37 (#0)), span: src/lib.rs:130:19: 130:37 (#0) }, [Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).40), span: src/lib.rs:131:17: 131:30 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).39), kind: Path(Resolved(None, Path { span: src/lib.rs:131:17: 131:21 (#0), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), segments: [PathSegment { ident: None#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).38), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), args: None, infer_args: true }] })), span: src/lib.rs:131:17: 131:21 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).41), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).31)) }, None), span: src/lib.rs:131:25: 131:30 (#0) } }, Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).46), span: src/lib.rs:132:17: 138:18 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).45), kind: Struct(Resolved(None, Path { span: src/lib.rs:132:17: 132:21 (#0), res: Def(Variant, DefId(2:37173 ~ core[7d5a]::option::Option::Some)), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).42), res: Def(Variant, DefId(2:37173 ~ core[7d5a]::option::Option::Some)), args: None, infer_args: true }] }), [PatField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).43), ident: 0#0, pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).44), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).44), i#0, None), span: src/lib.rs:132:27: 132:28 (#0), default_binding_modes: true }, is_shorthand: false, span: src/lib.rs:132:24: 132:28 (#0) }], false), span: src/lib.rs:132:17: 132:30 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).47), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).48), kind: Item(ItemId { owner_id: DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo) }), span: src/lib.rs:134:21: 136:22 (#0) }, Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).53), kind: Semi(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).49), kind: Call(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).50), kind: Path(Resolved(None, Path { span: src/lib.rs:137:21: 137:24 (#0), res: Def(Fn, DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)), segments: [PathSegment { ident: foo#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).51), res: Def(Fn, DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)), args: None, infer_args: true }] })), span: src/lib.rs:137:21: 137:24 (#0) }, [Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).52), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:137:25: 137:26 (#0) }), span: src/lib.rs:137:25: 137:26 (#0) }]), span: src/lib.rs:137:21: 137:27 (#0) }), span: src/lib.rs:137:21: 137:28 (#0) }], expr: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).54), rules: DefaultBlock, span: src/lib.rs:132:34: 138:18 (#0), targeted_by_break: false }, None), span: src/lib.rs:132:34: 138:18 (#0) } }], Normal), span: src/lib.rs:130:13: 139:14 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).55), rules: DefaultBlock, span: src/lib.rs:129:26: 140:10 (#0), targeted_by_break: false }, None, Loop, src/lib.rs:129:21: 129:25 (#0)), span: src/lib.rs:129:21: 140:10 (#0) } }], Normal), span: src/lib.rs:128:14: 141:6 (#0) }), els: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).56), span: src/lib.rs:128:5: 141:7 (#0), source: Normal }), span: src/lib.rs:128:5: 141:7 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).58), kind: Path(Resolved(None, Path { span: src/lib.rs:142:5: 142:7 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), segments: [PathSegment { ident: _t#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).59), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), args: None, infer_args: true }] })), span: src/lib.rs:142:5: 142:7 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).60), rules: DefaultBlock, span: src/lib.rs:127:1: 143:2 (#0), targeted_by_break: false }, None), span: src/lib.rs:127:1: 143:2 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).61), rules: DefaultBlock, span: src/lib.rs:122:27: 153:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).19), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57), _t#0, None), span: src/lib.rs:128:9: 128:11 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).20), kind: Match(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).21), kind: MethodCall(PathSegment { ident: into_iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).22), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).23), kind: Struct(Resolved(None, Path { span: src/lib.rs:128:21: 128:26 (#0), res: Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range)), segments: [PathSegment { ident: Range#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).24), res: Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).25), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).26), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:128:36: 128:37 (#0) }), span: src/lib.rs:128:36: 128:37 (#0) }, span: src/lib.rs:128:29: 128:37 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).27), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).28), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: src/lib.rs:128:44: 128:46 (#0) }), span: src/lib.rs:128:44: 128:46 (#0) }, span: src/lib.rs:128:39: 128:46 (#0), is_shorthand: false }], None), span: src/lib.rs:128:20: 128:49 (#0) }, [], src/lib.rs:128:50: 128:61 (#0)), span: src/lib.rs:128:20: 128:61 (#0) }, [Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).30), span: src/lib.rs:129:9: 140:10 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29), iter#0, None), span: src/lib.rs:129:9: 129:17 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).31), kind: Loop(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).32), kind: Match(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).33), kind: MethodCall(PathSegment { ident: next#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).35), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).36), kind: Path(Resolved(None, Path { span: src/lib.rs:130:25: 130:29 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).37), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29)), args: None, infer_args: true }] })), span: src/lib.rs:130:25: 130:29 (#0) }), span: src/lib.rs:130:19: 130:30 (#0) }, [], src/lib.rs:130:31: 130:37 (#0)), span: src/lib.rs:130:19: 130:37 (#0) }, [Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).40), span: src/lib.rs:131:17: 131:30 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).39), kind: Path(Resolved(None, Path { span: src/lib.rs:131:17: 131:21 (#0), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), segments: [PathSegment { ident: None#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).38), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), args: None, infer_args: true }] })), span: src/lib.rs:131:17: 131:21 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).41), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).31)) }, None), span: src/lib.rs:131:25: 131:30 (#0) } }, Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).46), span: src/lib.rs:132:17: 138:18 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).45), kind: Struct(Resolved(None, Path { span: src/lib.rs:132:17: 132:21 (#0), res: Def(Variant, DefId(2:37173 ~ core[7d5a]::option::Option::Some)), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).42), res: Def(Variant, DefId(2:37173 ~ core[7d5a]::option::Option::Some)), args: None, infer_args: true }] }), [PatField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).43), ident: 0#0, pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).44), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).44), i#0, None), span: src/lib.rs:132:27: 132:28 (#0), default_binding_modes: true }, is_shorthand: false, span: src/lib.rs:132:24: 132:28 (#0) }], false), span: src/lib.rs:132:17: 132:30 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).47), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).48), kind: Item(ItemId { owner_id: DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo) }), span: src/lib.rs:134:21: 136:22 (#0) }, Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).53), kind: Semi(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).49), kind: Call(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).50), kind: Path(Resolved(None, Path { span: src/lib.rs:137:21: 137:24 (#0), res: Def(Fn, DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)), segments: [PathSegment { ident: foo#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).51), res: Def(Fn, DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)), args: None, infer_args: true }] })), span: src/lib.rs:137:21: 137:24 (#0) }, [Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).52), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:137:25: 137:26 (#0) }), span: src/lib.rs:137:25: 137:26 (#0) }]), span: src/lib.rs:137:21: 137:27 (#0) }), span: src/lib.rs:137:21: 137:28 (#0) }], expr: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).54), rules: DefaultBlock, span: src/lib.rs:132:34: 138:18 (#0), targeted_by_break: false }, None), span: src/lib.rs:132:34: 138:18 (#0) } }], Normal), span: src/lib.rs:130:13: 139:14 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).55), rules: DefaultBlock, span: src/lib.rs:129:26: 140:10 (#0), targeted_by_break: false }, None, Loop, src/lib.rs:129:21: 129:25 (#0)), span: src/lib.rs:129:21: 140:10 (#0) } }], Normal), span: src/lib.rs:128:14: 141:6 (#0) }), els: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).56), span: src/lib.rs:128:5: 141:7 (#0), source: Normal }), span: src/lib.rs:128:5: 141:7 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).58), kind: Path(Resolved(None, Path { span: src/lib.rs:142:5: 142:7 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), segments: [PathSegment { ident: _t#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).59), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), args: None, infer_args: true }] })), span: src/lib.rs:142:5: 142:7 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).60), rules: DefaultBlock, span: src/lib.rs:127:1: 143:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:142:5: 142:7 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), segments: [PathSegment { ident: _t#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).59), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:18 ~ a[c74b]::test_fn_args_in_loop)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).6), kind: Path(Resolved(None, Path { span: src/lib.rs:134:31: 134:34 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).7), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:134:31: 134:34 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).8), kind: Path(Resolved(None, Path { span: src/lib.rs:134:39: 134:42 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).9), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:134:39: 134:42 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:134:21: 134:42 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:134:42: 134:42 (#0), span: src/lib.rs:134:27: 134:27 (#0) }, BodyId { hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).5) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).3), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:135:25: 135:26 (#0) }), span: src/lib.rs:135:25: 135:26 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).4), rules: DefaultBlock, span: src/lib.rs:134:43: 136:22 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:135:25: 135:26 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Coenobita invoked for crate 'c'
=========
[DEBUG] Coenobita invoked for crate 'b'
=========
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:3 ~ c[3801]::value).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:19: 2:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:3 ~ c[3801]::value).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:19: 2:22 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:1: 2:22 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:22: 2:22 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:13: 2:13 (#0) }, BodyId { hir_id: HirId(DefId(0:3 ~ c[3801]::value).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:3 ~ c[3801]::value).1), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:5: 3:6 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:5: 3:6 (#0) }), hir_id: HirId(DefId(0:3 ~ c[3801]::value).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:2:23: 4:2 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:5: 3:6 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:3 ~ c[3801]::value)
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:21: 7:25 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:21: 7:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:1: 7:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:25: 7:25 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:15: 7:15 (#0) }, BodyId { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).3) })
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).1), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:5: 8:9 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:5: 8:9 (#0) }), hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:7:26: 9:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:19: 2:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:3 ~ b[3f10]::value).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:19: 2:22 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:1: 2:22 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:22: 2:22 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:13: 2:13 (#0) }, BodyId { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).3) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:5: 8:9 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:4 ~ c[3801]::boolean)
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).1), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) }), hir_id: HirId(DefId(0:3 ~ b[3f10]::value).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:23: 4:2 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:3 ~ b[3f10]::value)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:21: 7:25 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:21: 7:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:1: 7:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:25: 7:25 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:15: 7:15 (#0) }, BodyId { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).1), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) }), hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:26: 9:2 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:4 ~ b[3f10]::boolean)
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Use(Path { span: src/lib.rs:4:5: 4:23 (#0), res: [Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range))], segments: [PathSegment { ident: core#0, hir_id: HirId(DefId(0:3 ~ a[c74b]::{use#1}).1), res: Def(Mod, DefId(2:0 ~ core[7d5a])), args: None, infer_args: false }, PathSegment { ident: range#0, hir_id: HirId(DefId(0:3 ~ a[c74b]::{use#1}).2), res: Def(Mod, DefId(2:10174 ~ core[7d5a]::range)), args: None, infer_args: false }, PathSegment { ident: Range#0, hir_id: HirId(DefId(0:3 ~ a[c74b]::{use#1}).3), res: Err, args: None, infer_args: false }] }, Single)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:6:25: 6:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:6:1: 6:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:6:25: 6:25 (#0), span: src/lib.rs:6:23: 6:23 (#0) }, BodyId { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).16) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).7), x#0, None), span: src/lib.rs:8:9: 8:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).2), kind: Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).3), kind: Path(Resolved(None, Path { span: src/lib.rs:8:13: 8:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).4), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).5), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:8:13: 8:21 (#0) }, []), span: src/lib.rs:8:13: 8:23 (#0) }), els: None, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).6), span: src/lib.rs:8:5: 8:24 (#0), source: Normal }), span: src/lib.rs:8:5: 8:24 (#0) }, Stmt { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).8), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).14), kind: Binding(BindingMode(No, Not), HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).14), x#0, None), span: src/lib.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).9), kind: Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:11:13: 11:21 (#0) }, []), span: src/lib.rs:11:13: 11:23 (#0) }), els: None, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).13), span: src/lib.rs:11:5: 11:24 (#0), source: Normal }), span: src/lib.rs:11:5: 11:24 (#0) }], expr: None, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).15), rules: DefaultBlock, span: src/lib.rs:6:26: 12:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).3), kind: Path(Resolved(None, Path { span: src/lib.rs:8:13: 8:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).4), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).5), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:8:13: 8:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:8:13: 8:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).4), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).5), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:11:13: 11:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:11:13: 11:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:11:13: 11:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).11), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:4 ~ a[c74b]::test_let_annotation).12), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:4 ~ a[c74b]::test_let_annotation)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:14:24: 14:24 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:14:1: 14:24 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:14:24: 14:24 (#0), span: src/lib.rs:14:22: 14:22 (#0) }, BodyId { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).22) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15), kind: Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15), y#0, None), span: src/lib.rs:16:9: 16:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:16:16: 16:26 (#0) }, []), span: src/lib.rs:16:16: 16:28 (#0) }), span: src/lib.rs:16:16: 16:28 (#6) }, Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).10), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:16:31: 16:32 (#0) }), span: src/lib.rs:16:31: 16:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).9), rules: DefaultBlock, span: src/lib.rs:16:29: 16:34 (#0), targeted_by_break: false }, None), span: src/lib.rs:16:29: 16:34 (#0) }, Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).11), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:16:42: 16:43 (#0) }), span: src/lib.rs:16:42: 16:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).13), rules: DefaultBlock, span: src/lib.rs:16:40: 16:45 (#0), targeted_by_break: false }, None), span: src/lib.rs:16:40: 16:45 (#0) })), span: src/lib.rs:16:13: 16:45 (#0) }), els: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).14), span: src/lib.rs:16:5: 16:46 (#0), source: Normal }), span: src/lib.rs:16:5: 16:46 (#0) }, Stmt { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).16), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).20), z#0, None), span: src/lib.rs:19:9: 19:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).17), kind: Path(Resolved(None, Path { span: src/lib.rs:19:13: 19:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), args: None, infer_args: true }] })), span: src/lib.rs:19:13: 19:14 (#0) }), els: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).19), span: src/lib.rs:19:5: 19:15 (#0), source: Normal }), span: src/lib.rs:19:5: 19:15 (#0) }], expr: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).21), rules: DefaultBlock, span: src/lib.rs:14:25: 20:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:16:16: 16:26 (#0) }, []), span: src/lib.rs:16:16: 16:28 (#0) }), span: src/lib.rs:16:16: 16:28 (#6) }, Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).10), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:16:31: 16:32 (#0) }), span: src/lib.rs:16:31: 16:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).9), rules: DefaultBlock, span: src/lib.rs:16:29: 16:34 (#0), targeted_by_break: false }, None), span: src/lib.rs:16:29: 16:34 (#0) }, Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).11), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:16:42: 16:43 (#0) }), span: src/lib.rs:16:42: 16:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).13), rules: DefaultBlock, span: src/lib.rs:16:40: 16:45 (#0), targeted_by_break: false }, None), span: src/lib.rs:16:40: 16:45 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:16:16: 16:26 (#0) }, []), span: src/lib.rs:16:16: 16:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:16:16: 16:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:16:31: 16:32 (#0) }), span: src/lib.rs:16:31: 16:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).9), rules: DefaultBlock, span: src/lib.rs:16:29: 16:34 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:16:31: 16:32 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:16:42: 16:43 (#0) }), span: src/lib.rs:16:42: 16:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).13), rules: DefaultBlock, span: src/lib.rs:16:40: 16:45 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:16:42: 16:43 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:19:13: 19:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:19:13: 19:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::test_basic_if_else).15)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:5 ~ a[c74b]::test_basic_if_else)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:22:19: 22:19 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:22:1: 22:19 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:22:19: 22:19 (#0), span: src/lib.rs:22:17: 22:17 (#0) }, BodyId { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).21) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).12), kind: Binding(BindingMode(No, Not), HirId(DefId(0:6 ~ a[c74b]::test_addition).12), x#0, None), span: src/lib.rs:24:9: 24:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).2), kind: Binary(Spanned { node: Add, span: src/lib.rs:24:24: 24:25 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).4), kind: Path(Resolved(None, Path { span: src/lib.rs:24:13: 24:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).6), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:13: 24:21 (#0) }, []), span: src/lib.rs:24:13: 24:23 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).7), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).8), kind: Path(Resolved(None, Path { span: src/lib.rs:24:26: 24:34 (#0), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).10), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:26: 24:34 (#0) }, []), span: src/lib.rs:24:26: 24:36 (#0) }), span: src/lib.rs:24:13: 24:36 (#0) }), els: None, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).11), span: src/lib.rs:24:5: 24:37 (#0), source: Normal }), span: src/lib.rs:24:5: 24:37 (#0) }, Stmt { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).13), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).19), kind: Binding(BindingMode(No, Not), HirId(DefId(0:6 ~ a[c74b]::test_addition).19), y#0, None), span: src/lib.rs:27:9: 27:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).14), kind: Binary(Spanned { node: Add, span: src/lib.rs:27:15: 27:16 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) }), span: src/lib.rs:27:13: 27:14 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).16), kind: Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] })), span: src/lib.rs:27:17: 27:18 (#0) }), span: src/lib.rs:27:13: 27:18 (#0) }), els: None, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).18), span: src/lib.rs:27:5: 27:19 (#0), source: Normal }), span: src/lib.rs:27:5: 27:19 (#0) }], expr: None, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).20), rules: DefaultBlock, span: src/lib.rs:22:20: 28:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:24:24: 24:25 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).4), kind: Path(Resolved(None, Path { span: src/lib.rs:24:13: 24:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).6), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:13: 24:21 (#0) }, []), span: src/lib.rs:24:13: 24:23 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).7), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).8), kind: Path(Resolved(None, Path { span: src/lib.rs:24:26: 24:34 (#0), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).10), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:26: 24:34 (#0) }, []), span: src/lib.rs:24:26: 24:36 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).4), kind: Path(Resolved(None, Path { span: src/lib.rs:24:13: 24:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).6), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:13: 24:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:24:13: 24:21 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).6), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).8), kind: Path(Resolved(None, Path { span: src/lib.rs:24:26: 24:34 (#0), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).10), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/lib.rs:24:26: 24:34 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:24:26: 24:34 (#0), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).10), res: Def(Fn, DefId(21:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:3 ~ c[3801]::value)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:27:15: 27:16 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) }), span: src/lib.rs:27:13: 27:14 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).16), kind: Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] })), span: src/lib.rs:27:17: 27:18 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:27:15: 27:16 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) }), span: src/lib.rs:27:13: 27:14 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).16), kind: Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] })), span: src/lib.rs:27:17: 27:18 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:27:13: 27:14 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:27:17: 27:18 (#0), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::test_addition).17), res: Local(HirId(DefId(0:6 ~ a[c74b]::test_addition).12)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:6 ~ a[c74b]::test_addition)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:30:30: 30:30 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:30:1: 30:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:30:30: 30:30 (#0), span: src/lib.rs:30:28: 30:28 (#0) }, BodyId { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).22) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).20), y#0, None), span: src/lib.rs:32:9: 32:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) }), span: src/lib.rs:32:16: 32:28 (#7) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:29: 32:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:53: 32:58 (#0) })), span: src/lib.rs:32:13: 32:58 (#0) }), els: None, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).19), span: src/lib.rs:32:5: 32:59 (#0), source: Normal }), span: src/lib.rs:32:5: 32:59 (#0) }], expr: None, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).21), rules: DefaultBlock, span: src/lib.rs:30:31: 33:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) }), span: src/lib.rs:32:16: 32:28 (#7) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:29: 32:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:53: 32:58 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) }), span: src/lib.rs:32:16: 32:28 (#7) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:29: 32:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None), span: src/lib.rs:32:53: 32:58 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, []), span: src/lib.rs:32:16: 32:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:32:16: 32:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:32:16: 32:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).5), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).6), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) }), span: src/lib.rs:32:31: 32:45 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).14), rules: DefaultBlock, span: src/lib.rs:32:29: 32:47 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/lib.rs:32:33: 32:34 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) }), span: src/lib.rs:32:31: 32:32 (#0) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, []), span: src/lib.rs:32:35: 32:45 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:32:31: 32:32 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/lib.rs:32:35: 32:43 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:32:35: 32:43 (#0), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).12), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).13), res: Def(Fn, DefId(20:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) }), span: src/lib.rs:32:55: 32:56 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::test_addition_in_if_else).18), rules: DefaultBlock, span: src/lib.rs:32:53: 32:58 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:32:55: 32:56 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:7 ~ a[c74b]::test_addition_in_if_else)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:35:25: 35:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:35:1: 35:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:35:25: 35:25 (#0), span: src/lib.rs:35:23: 35:23 (#0) }, BodyId { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).40) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).38), kind: Binding(BindingMode(No, Not), HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).38), y#0, None), span: src/lib.rs:37:9: 37:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) }), span: src/lib.rs:37:16: 37:28 (#8) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:37:29: 43:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:43:12: 49:6 (#0) })), span: src/lib.rs:37:13: 49:6 (#0) }), els: None, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).37), span: src/lib.rs:37:5: 49:7 (#0), source: Normal }), span: src/lib.rs:37:5: 49:7 (#0) }], expr: None, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).39), rules: DefaultBlock, span: src/lib.rs:35:26: 50:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) }), span: src/lib.rs:37:16: 37:28 (#8) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:37:29: 43:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:43:12: 49:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) })
[DEBUG] > expr kind is Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) }), span: src/lib.rs:37:16: 37:28 (#8) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:37:29: 43:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:43:12: 49:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, []), span: src/lib.rs:37:16: 37:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:37:16: 37:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:37:16: 37:26 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).5), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).6), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) })), span: src/lib.rs:38:9: 42:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).20), rules: DefaultBlock, span: src/lib.rs:37:29: 43:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) }), span: src/lib.rs:38:12: 38:24 (#9) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:38:25: 40:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:40:16: 42:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, []), span: src/lib.rs:38:12: 38:24 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:38:12: 38:22 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:38:12: 38:22 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).11), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).12), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) }), span: src/lib.rs:39:13: 39:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).15), rules: DefaultBlock, span: src/lib.rs:38:25: 40:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:39:13: 39:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) }), span: src/lib.rs:41:13: 41:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).19), rules: DefaultBlock, span: src/lib.rs:40:16: 42:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:41:13: 41:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) })), span: src/lib.rs:44:9: 48:10 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).36), rules: DefaultBlock, span: src/lib.rs:43:12: 49:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#10) }, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:44:26: 46:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None), span: src/lib.rs:46:16: 48:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) }), span: src/lib.rs:44:12: 44:25 (#0) })
[DEBUG] > expr kind is Unary(Not, Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, []), span: src/lib.rs:44:13: 44:25 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:44:13: 44:23 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:44:13: 44:23 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).27), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).28), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) }), span: src/lib.rs:45:13: 45:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).31), rules: DefaultBlock, span: src/lib.rs:44:26: 46:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:45:13: 45:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) }), span: src/lib.rs:47:13: 47:14 (#0) }), hir_id: HirId(DefId(0:8 ~ a[c74b]::test_nested_if_else).35), rules: DefaultBlock, span: src/lib.rs:46:16: 48:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/lib.rs:47:13: 47:14 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:8 ~ a[c74b]::test_nested_if_else)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:52:25: 52:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:52:1: 52:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:52:25: 52:25 (#0), span: src/lib.rs:52:23: 52:23 (#0) }, BodyId { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).15) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).1), kind: Item(ItemId { owner_id: DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo) }), span: src/lib.rs:54:5: 56:6 (#0) }, Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).7), x#0, None), span: src/lib.rs:59:9: 59:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).3), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).4), kind: Path(Resolved(None, Path { span: src/lib.rs:59:13: 59:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).5), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:59:13: 59:16 (#0) }, []), span: src/lib.rs:59:13: 59:18 (#0) }), els: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).6), span: src/lib.rs:59:5: 59:19 (#0), source: Normal }), span: src/lib.rs:59:5: 59:19 (#0) }, Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).8), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).13), y#0, None), span: src/lib.rs:62:9: 62:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).9), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:62:13: 62:16 (#0) }, []), span: src/lib.rs:62:13: 62:18 (#0) }), els: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).12), span: src/lib.rs:62:5: 62:19 (#0), source: Normal }), span: src/lib.rs:62:5: 62:19 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).14), rules: DefaultBlock, span: src/lib.rs:52:26: 63:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:54:17: 54:20 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:54:17: 54:20 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:54:5: 54:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:54:20: 54:20 (#0), span: src/lib.rs:54:11: 54:11 (#0) }, BodyId { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).1), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:55:9: 55:10 (#0) }), span: src/lib.rs:55:9: 55:10 (#0) }), hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).2), rules: DefaultBlock, span: src/lib.rs:54:21: 56:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:55:9: 55:10 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).4), kind: Path(Resolved(None, Path { span: src/lib.rs:59:13: 59:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).5), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:59:13: 59:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:59:13: 59:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).5), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:62:13: 62:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/lib.rs:62:13: 62:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:62:13: 62:16 (#0), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::test_nested_item_fn).11), res: Def(Fn, DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:9 ~ a[c74b]::test_nested_item_fn)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:54:17: 54:20 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:54:17: 54:20 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:54:5: 54:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:54:20: 54:20 (#0), span: src/lib.rs:54:11: 54:11 (#0) }, BodyId { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).1), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:55:9: 55:10 (#0) }), span: src/lib.rs:55:9: 55:10 (#0) }), hir_id: HirId(DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo).2), rules: DefaultBlock, span: src/lib.rs:54:21: 56:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:55:9: 55:10 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::test_nested_item_fn::boo)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:65:29: 65:29 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:65:1: 65:29 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:65:29: 65:29 (#0), span: src/lib.rs:65:27: 65:27 (#0) }, BodyId { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).27) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20), y#0, None), span: src/lib.rs:67:9: 67:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).2), kind: If(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).12), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/lib.rs:67:29: 67:31 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, []), span: src/lib.rs:67:16: 67:28 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, []), span: src/lib.rs:67:32: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#11) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:67:47: 67:48 (#0) }), span: src/lib.rs:67:47: 67:48 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/lib.rs:67:45: 67:50 (#0), targeted_by_break: false }, None), span: src/lib.rs:67:45: 67:50 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:67:58: 67:59 (#0) }), span: src/lib.rs:67:58: 67:59 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/lib.rs:67:56: 67:61 (#0), targeted_by_break: false }, None), span: src/lib.rs:67:56: 67:61 (#0) })), span: src/lib.rs:67:13: 67:61 (#0) }), els: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).19), span: src/lib.rs:67:5: 67:62 (#0), source: Normal }), span: src/lib.rs:67:5: 67:62 (#0) }, Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).21), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).25), kind: Binding(BindingMode(No, Not), HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).25), z#0, None), span: src/lib.rs:70:9: 70:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).22), kind: Path(Resolved(None, Path { span: src/lib.rs:70:13: 70:14 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), args: None, infer_args: true }] })), span: src/lib.rs:70:13: 70:14 (#0) }), els: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).24), span: src/lib.rs:70:5: 70:15 (#0), source: Normal }), span: src/lib.rs:70:5: 70:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).26), rules: DefaultBlock, span: src/lib.rs:65:30: 71:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).12), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/lib.rs:67:29: 67:31 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, []), span: src/lib.rs:67:16: 67:28 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, []), span: src/lib.rs:67:32: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#11) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:67:47: 67:48 (#0) }), span: src/lib.rs:67:47: 67:48 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/lib.rs:67:45: 67:50 (#0), targeted_by_break: false }, None), span: src/lib.rs:67:45: 67:50 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:67:58: 67:59 (#0) }), span: src/lib.rs:67:58: 67:59 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/lib.rs:67:56: 67:61 (#0), targeted_by_break: false }, None), span: src/lib.rs:67:56: 67:61 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/lib.rs:67:29: 67:31 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, []), span: src/lib.rs:67:16: 67:28 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, []), span: src/lib.rs:67:32: 67:44 (#0) }), span: src/lib.rs:67:16: 67:44 (#0) })
[DEBUG] > expr kind is Binary(Spanned { node: And, span: src/lib.rs:67:29: 67:31 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, []), span: src/lib.rs:67:16: 67:28 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, []), span: src/lib.rs:67:32: 67:44 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:16: 67:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:67:16: 67:26 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:67:32: 67:42 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:67:32: 67:42 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).10), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).11), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:67:47: 67:48 (#0) }), span: src/lib.rs:67:47: 67:48 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/lib.rs:67:45: 67:50 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:67:47: 67:48 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:67:58: 67:59 (#0) }), span: src/lib.rs:67:58: 67:59 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/lib.rs:67:56: 67:61 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:67:58: 67:59 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:70:13: 70:14 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:70:13: 70:14 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:10 ~ a[c74b]::test_if_else_guard_expr).20)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:10 ~ a[c74b]::test_if_else_guard_expr)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:73:21: 73:21 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:73:1: 73:21 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:73:21: 73:21 (#0), span: src/lib.rs:73:19: 73:19 (#0) }, BodyId { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).31) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4), x#0, None), span: src/lib.rs:75:9: 75:14 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:75:17: 75:18 (#0) }), span: src/lib.rs:75:17: 75:18 (#0) }), els: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).3), span: src/lib.rs:75:5: 75:19 (#0), source: Normal }), span: src/lib.rs:75:5: 75:19 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).5), kind: If(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).15), kind: DropTemps(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).6), kind: Binary(Spanned { node: Or, span: src/lib.rs:77:21: 77:23 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).7), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, []), span: src/lib.rs:77:8: 77:20 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).11), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, []), span: src/lib.rs:77:24: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#12) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).22), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).20), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).16), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0)), span: src/lib.rs:78:9: 78:14 (#0) }), span: src/lib.rs:78:9: 78:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).21), rules: DefaultBlock, span: src/lib.rs:77:37: 79:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:77:37: 79:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).23), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).28), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).24), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0)), span: src/lib.rs:80:9: 80:14 (#0) }), span: src/lib.rs:80:9: 80:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).29), rules: DefaultBlock, span: src/lib.rs:79:12: 81:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:79:12: 81:6 (#0) })), span: src/lib.rs:77:5: 81:6 (#0) }), hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).30), rules: DefaultBlock, span: src/lib.rs:73:22: 82:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:75:17: 75:18 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).15), kind: DropTemps(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).6), kind: Binary(Spanned { node: Or, span: src/lib.rs:77:21: 77:23 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).7), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, []), span: src/lib.rs:77:8: 77:20 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).11), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, []), span: src/lib.rs:77:24: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#12) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).22), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).20), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).16), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0)), span: src/lib.rs:78:9: 78:14 (#0) }), span: src/lib.rs:78:9: 78:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).21), rules: DefaultBlock, span: src/lib.rs:77:37: 79:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:77:37: 79:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).23), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).28), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).24), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0)), span: src/lib.rs:80:9: 80:14 (#0) }), span: src/lib.rs:80:9: 80:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).29), rules: DefaultBlock, span: src/lib.rs:79:12: 81:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:79:12: 81:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).6), kind: Binary(Spanned { node: Or, span: src/lib.rs:77:21: 77:23 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).7), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, []), span: src/lib.rs:77:8: 77:20 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).11), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, []), span: src/lib.rs:77:24: 77:36 (#0) }), span: src/lib.rs:77:8: 77:36 (#0) })
[DEBUG] > expr kind is Binary(Spanned { node: Or, span: src/lib.rs:77:21: 77:23 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).7), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, []), span: src/lib.rs:77:8: 77:20 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).11), kind: Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, []), span: src/lib.rs:77:24: 77:36 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).8), kind: Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:8: 77:18 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:77:8: 77:18 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).9), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).10), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).12), kind: Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:77:24: 77:34 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:77:24: 77:34 (#0), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).13), res: Def(Mod, DefId(20:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).14), res: Def(Fn, DefId(20:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).20), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).16), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0)), span: src/lib.rs:78:9: 78:14 (#0) }), span: src/lib.rs:78:9: 78:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).21), rules: DefaultBlock, span: src/lib.rs:77:37: 79:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).17), kind: Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:78:9: 78:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).19), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) }), span: src/lib.rs:78:13: 78:14 (#0) }, src/lib.rs:78:11: 78:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:78:9: 78:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).18), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:78:13: 78:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).28), kind: Semi(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).24), kind: Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0)), span: src/lib.rs:80:9: 80:14 (#0) }), span: src/lib.rs:80:9: 80:15 (#0) }], expr: None, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).29), rules: DefaultBlock, span: src/lib.rs:79:12: 81:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).25), kind: Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] })), span: src/lib.rs:80:9: 80:10 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).27), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) }), span: src/lib.rs:80:13: 80:14 (#0) }, src/lib.rs:80:11: 80:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:80:9: 80:10 (#0), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).26), res: Local(HirId(DefId(0:11 ~ a[c74b]::test_assign_mut).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/lib.rs:80:13: 80:14 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:11 ~ a[c74b]::test_assign_mut)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:84:17: 84:17 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:84:1: 84:17 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:84:17: 84:17 (#0), span: src/lib.rs:84:15: 84:15 (#0) }, BodyId { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).12) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).1), kind: Item(ItemId { owner_id: DefId(0:13 ~ a[c74b]::test_struct::Boo) }), span: src/lib.rs:85:5: 89:6 (#0) }, Stmt { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).10), kind: Binding(BindingMode(No, Not), HirId(DefId(0:12 ~ a[c74b]::test_struct).10), boo#0, None), span: src/lib.rs:92:9: 92:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).3), kind: Struct(Resolved(None, Path { span: src/lib.rs:92:15: 92:18 (#0), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).4), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) }), span: src/lib.rs:92:24: 92:25 (#0) }, span: src/lib.rs:92:21: 92:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:92:30: 92:34 (#0) }), span: src/lib.rs:92:30: 92:34 (#0) }, span: src/lib.rs:92:27: 92:34 (#0), is_shorthand: false }], None), span: src/lib.rs:92:15: 92:36 (#0) }), els: None, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).9), span: src/lib.rs:92:5: 92:37 (#0), source: Normal }), span: src/lib.rs:92:5: 92:37 (#0) }], expr: None, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).11), rules: DefaultBlock, span: src/lib.rs:84:18: 93:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/lib.rs:87:9: 87:15 (#0), vis_span: src/lib.rs:87:9: 87:9 (#0), ident: x#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).3), def_id: DefId(0:20 ~ a[c74b]::test_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/lib.rs:87:12: 87:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:87:12: 87:15 (#0) } }, FieldDef { span: src/lib.rs:88:9: 88:16 (#0), vis_span: src/lib.rs:88:9: 88:9 (#0), ident: y#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).6), def_id: DefId(0:14 ~ a[c74b]::test_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:88:12: 88:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/lib.rs:88:12: 88:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:85:15: 85:15 (#0), span: src/lib.rs:85:15: 85:15 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:92:15: 92:18 (#0), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).4), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) }), span: src/lib.rs:92:24: 92:25 (#0) }, span: src/lib.rs:92:21: 92:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:92:30: 92:34 (#0) }), span: src/lib.rs:92:30: 92:34 (#0) }, span: src/lib.rs:92:27: 92:34 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:13 ~ a[c74b]::test_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:92:30: 92:34 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:92:15: 92:18 (#0), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).4), res: Def(Struct, DefId(0:13 ~ a[c74b]::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) }), span: src/lib.rs:92:24: 92:25 (#0) }, span: src/lib.rs:92:21: 92:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:12 ~ a[c74b]::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:92:30: 92:34 (#0) }), span: src/lib.rs:92:30: 92:34 (#0) }, span: src/lib.rs:92:27: 92:34 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:13 ~ a[c74b]::test_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:92:24: 92:25 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:92:30: 92:34 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:12 ~ a[c74b]::test_struct)
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/lib.rs:87:9: 87:15 (#0), vis_span: src/lib.rs:87:9: 87:9 (#0), ident: x#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).3), def_id: DefId(0:20 ~ a[c74b]::test_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/lib.rs:87:12: 87:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:87:12: 87:15 (#0) } }, FieldDef { span: src/lib.rs:88:9: 88:16 (#0), vis_span: src/lib.rs:88:9: 88:9 (#0), ident: y#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).6), def_id: DefId(0:14 ~ a[c74b]::test_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:88:12: 88:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::test_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/lib.rs:88:12: 88:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:85:15: 85:15 (#0), span: src/lib.rs:85:15: 85:15 (#0) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:95:20: 95:20 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:95:1: 95:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:95:20: 95:20 (#0), span: src/lib.rs:95:18: 95:18 (#0) }, BodyId { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).28) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).1), kind: Item(ItemId { owner_id: DefId(0:16 ~ a[c74b]::test_if_struct::Boo) }), span: src/lib.rs:96:5: 100:6 (#0) }, Stmt { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).26), kind: Binding(BindingMode(No, Not), HirId(DefId(0:15 ~ a[c74b]::test_if_struct).26), boo#0, None), span: src/lib.rs:103:9: 103:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).3), kind: If(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) }), span: src/lib.rs:103:18: 103:30 (#13) }, Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:103:31: 105:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:105:12: 107:6 (#0) })), span: src/lib.rs:103:15: 107:6 (#0) }), els: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).25), span: src/lib.rs:103:5: 107:7 (#0), source: Normal }), span: src/lib.rs:103:5: 107:7 (#0) }], expr: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).27), rules: DefaultBlock, span: src/lib.rs:95:21: 108:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/lib.rs:98:9: 98:15 (#0), vis_span: src/lib.rs:98:9: 98:9 (#0), ident: x#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).3), def_id: DefId(0:21 ~ a[c74b]::test_if_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/lib.rs:98:12: 98:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:98:12: 98:15 (#0) } }, FieldDef { span: src/lib.rs:99:9: 99:16 (#0), vis_span: src/lib.rs:99:9: 99:9 (#0), ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).6), def_id: DefId(0:17 ~ a[c74b]::test_if_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:99:12: 99:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/lib.rs:99:12: 99:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:96:15: 96:15 (#0), span: src/lib.rs:96:15: 96:15 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) }), span: src/lib.rs:103:18: 103:30 (#13) }, Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:103:31: 105:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:105:12: 107:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:16 ~ a[c74b]::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:16 ~ a[c74b]::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) }), span: src/lib.rs:103:18: 103:30 (#13) }, Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:103:31: 105:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None), span: src/lib.rs:105:12: 107:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, []), span: src/lib.rs:103:18: 103:30 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/lib.rs:103:18: 103:28 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:103:18: 103:28 (#0), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).6), res: Def(Mod, DefId(21:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).7), res: Def(Fn, DefId(21:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None), span: src/lib.rs:104:9: 104:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).15), rules: DefaultBlock, span: src/lib.rs:103:31: 105:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:104:9: 104:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).10), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) }), span: src/lib.rs:104:18: 104:19 (#0) }, span: src/lib.rs:104:15: 104:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) }), span: src/lib.rs:104:24: 104:28 (#0) }, span: src/lib.rs:104:21: 104:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:16 ~ a[c74b]::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:104:18: 104:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:104:24: 104:28 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None), span: src/lib.rs:106:9: 106:30 (#0) }), hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).24), rules: DefaultBlock, span: src/lib.rs:105:12: 107:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/lib.rs:106:9: 106:12 (#0), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).19), res: Def(Struct, DefId(0:16 ~ a[c74b]::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) }), span: src/lib.rs:106:18: 106:19 (#0) }, span: src/lib.rs:106:15: 106:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) }), span: src/lib.rs:106:24: 106:28 (#0) }, span: src/lib.rs:106:21: 106:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:16 ~ a[c74b]::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/lib.rs:106:18: 106:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/lib.rs:106:24: 106:28 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:15 ~ a[c74b]::test_if_struct)
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/lib.rs:98:9: 98:15 (#0), vis_span: src/lib.rs:98:9: 98:9 (#0), ident: x#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).3), def_id: DefId(0:21 ~ a[c74b]::test_if_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/lib.rs:98:12: 98:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:98:12: 98:15 (#0) } }, FieldDef { span: src/lib.rs:99:9: 99:16 (#0), vis_span: src/lib.rs:99:9: 99:9 (#0), ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).6), def_id: DefId(0:17 ~ a[c74b]::test_if_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/lib.rs:99:12: 99:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::test_if_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/lib.rs:99:12: 99:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:96:15: 96:15 (#0), span: src/lib.rs:96:15: 96:15 (#0) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/lib.rs:122:26: 122:26 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:122:1: 122:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:122:26: 122:26 (#0), span: src/lib.rs:122:24: 122:24 (#0) }, BodyId { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).62) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).9), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).9), s#0, None), span: src/lib.rs:123:9: 123:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).2), kind: Call(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).3), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).5), kind: Path(Resolved(None, Path { span: src/lib.rs:123:13: 123:19 (#0), res: Def(Struct, DefId(5:8016 ~ alloc[5873]::string::String)), segments: [PathSegment { ident: String#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).4), res: Def(Struct, DefId(5:8016 ~ alloc[5873]::string::String)), args: None, infer_args: true }] })), span: src/lib.rs:123:13: 123:19 (#0) }, PathSegment { ident: from#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).6), res: Err, args: None, infer_args: true })), span: src/lib.rs:123:13: 123:25 (#0) }, [Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).7), kind: Lit(Spanned { node: Str("far", Cooked), span: src/lib.rs:123:26: 123:31 (#0) }), span: src/lib.rs:123:26: 123:31 (#0) }]), span: src/lib.rs:123:13: 123:32 (#0) }), els: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).8), span: src/lib.rs:123:5: 123:33 (#0), source: Normal }), span: src/lib.rs:123:5: 123:33 (#0) }, Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).10), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).17), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).17), itr#0, None), span: src/lib.rs:125:9: 125:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).11), kind: Struct(LangItem(Range, src/lib.rs:125:15: 125:20 (#0)), [ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).13), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).12), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:125:15: 125:16 (#0) }), span: src/lib.rs:125:15: 125:16 (#0) }, span: src/lib.rs:125:15: 125:16 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).15), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).14), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: src/lib.rs:125:18: 125:20 (#0) }), span: src/lib.rs:125:18: 125:20 (#0) }, span: src/lib.rs:125:18: 125:20 (#0), is_shorthand: false }], None), span: src/lib.rs:125:15: 125:20 (#0) }), els: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).16), span: src/lib.rs:125:5: 125:21 (#0), source: Normal }), span: src/lib.rs:125:5: 125:21 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).18), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).19), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57), _t#0, None), span: src/lib.rs:128:9: 128:11 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).20), kind: Match(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).21), kind: MethodCall(PathSegment { ident: into_iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).22), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).23), kind: Struct(Resolved(None, Path { span: src/lib.rs:128:21: 128:26 (#0), res: Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range)), segments: [PathSegment { ident: Range#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).24), res: Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).25), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).26), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:128:36: 128:37 (#0) }), span: src/lib.rs:128:36: 128:37 (#0) }, span: src/lib.rs:128:29: 128:37 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).27), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).28), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: src/lib.rs:128:44: 128:46 (#0) }), span: src/lib.rs:128:44: 128:46 (#0) }, span: src/lib.rs:128:39: 128:46 (#0), is_shorthand: false }], None), span: src/lib.rs:128:20: 128:49 (#0) }, [], src/lib.rs:128:50: 128:61 (#0)), span: src/lib.rs:128:20: 128:61 (#0) }, [Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).30), span: src/lib.rs:129:9: 140:10 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29), iter#0, None), span: src/lib.rs:129:9: 129:17 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).31), kind: Loop(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).32), kind: Match(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).33), kind: MethodCall(PathSegment { ident: next#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).35), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).36), kind: Path(Resolved(None, Path { span: src/lib.rs:130:25: 130:29 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).37), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29)), args: None, infer_args: true }] })), span: src/lib.rs:130:25: 130:29 (#0) }), span: src/lib.rs:130:19: 130:30 (#0) }, [], src/lib.rs:130:31: 130:37 (#0)), span: src/lib.rs:130:19: 130:37 (#0) }, [Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).40), span: src/lib.rs:131:17: 131:30 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).39), kind: Path(Resolved(None, Path { span: src/lib.rs:131:17: 131:21 (#0), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), segments: [PathSegment { ident: None#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).38), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), args: None, infer_args: true }] })), span: src/lib.rs:131:17: 131:21 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).41), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).31)) }, None), span: src/lib.rs:131:25: 131:30 (#0) } }, Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).46), span: src/lib.rs:132:17: 138:18 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).45), kind: Struct(Resolved(None, Path { span: src/lib.rs:132:17: 132:21 (#0), res: Def(Variant, DefId(2:37173 ~ core[7d5a]::option::Option::Some)), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).42), res: Def(Variant, DefId(2:37173 ~ core[7d5a]::option::Option::Some)), args: None, infer_args: true }] }), [PatField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).43), ident: 0#0, pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).44), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).44), i#0, None), span: src/lib.rs:132:27: 132:28 (#0), default_binding_modes: true }, is_shorthand: false, span: src/lib.rs:132:24: 132:28 (#0) }], false), span: src/lib.rs:132:17: 132:30 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).47), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).48), kind: Item(ItemId { owner_id: DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo) }), span: src/lib.rs:134:21: 136:22 (#0) }, Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).53), kind: Semi(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).49), kind: Call(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).50), kind: Path(Resolved(None, Path { span: src/lib.rs:137:21: 137:24 (#0), res: Def(Fn, DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)), segments: [PathSegment { ident: foo#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).51), res: Def(Fn, DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)), args: None, infer_args: true }] })), span: src/lib.rs:137:21: 137:24 (#0) }, [Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).52), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:137:25: 137:26 (#0) }), span: src/lib.rs:137:25: 137:26 (#0) }]), span: src/lib.rs:137:21: 137:27 (#0) }), span: src/lib.rs:137:21: 137:28 (#0) }], expr: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).54), rules: DefaultBlock, span: src/lib.rs:132:34: 138:18 (#0), targeted_by_break: false }, None), span: src/lib.rs:132:34: 138:18 (#0) } }], Normal), span: src/lib.rs:130:13: 139:14 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).55), rules: DefaultBlock, span: src/lib.rs:129:26: 140:10 (#0), targeted_by_break: false }, None, Loop, src/lib.rs:129:21: 129:25 (#0)), span: src/lib.rs:129:21: 140:10 (#0) } }], Normal), span: src/lib.rs:128:14: 141:6 (#0) }), els: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).56), span: src/lib.rs:128:5: 141:7 (#0), source: Normal }), span: src/lib.rs:128:5: 141:7 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).58), kind: Path(Resolved(None, Path { span: src/lib.rs:142:5: 142:7 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), segments: [PathSegment { ident: _t#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).59), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), args: None, infer_args: true }] })), span: src/lib.rs:142:5: 142:7 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).60), rules: DefaultBlock, span: src/lib.rs:127:1: 143:2 (#0), targeted_by_break: false }, None), span: src/lib.rs:127:1: 143:2 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).61), rules: DefaultBlock, span: src/lib.rs:122:27: 153:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).19), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57), _t#0, None), span: src/lib.rs:128:9: 128:11 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).20), kind: Match(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).21), kind: MethodCall(PathSegment { ident: into_iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).22), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).23), kind: Struct(Resolved(None, Path { span: src/lib.rs:128:21: 128:26 (#0), res: Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range)), segments: [PathSegment { ident: Range#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).24), res: Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).25), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).26), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: src/lib.rs:128:36: 128:37 (#0) }), span: src/lib.rs:128:36: 128:37 (#0) }, span: src/lib.rs:128:29: 128:37 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).27), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).28), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: src/lib.rs:128:44: 128:46 (#0) }), span: src/lib.rs:128:44: 128:46 (#0) }, span: src/lib.rs:128:39: 128:46 (#0), is_shorthand: false }], None), span: src/lib.rs:128:20: 128:49 (#0) }, [], src/lib.rs:128:50: 128:61 (#0)), span: src/lib.rs:128:20: 128:61 (#0) }, [Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).30), span: src/lib.rs:129:9: 140:10 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29), iter#0, None), span: src/lib.rs:129:9: 129:17 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).31), kind: Loop(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).32), kind: Match(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).33), kind: MethodCall(PathSegment { ident: next#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).35), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).36), kind: Path(Resolved(None, Path { span: src/lib.rs:130:25: 130:29 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).37), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).29)), args: None, infer_args: true }] })), span: src/lib.rs:130:25: 130:29 (#0) }), span: src/lib.rs:130:19: 130:30 (#0) }, [], src/lib.rs:130:31: 130:37 (#0)), span: src/lib.rs:130:19: 130:37 (#0) }, [Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).40), span: src/lib.rs:131:17: 131:30 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).39), kind: Path(Resolved(None, Path { span: src/lib.rs:131:17: 131:21 (#0), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), segments: [PathSegment { ident: None#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).38), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), args: None, infer_args: true }] })), span: src/lib.rs:131:17: 131:21 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).41), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).31)) }, None), span: src/lib.rs:131:25: 131:30 (#0) } }, Arm { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).46), span: src/lib.rs:132:17: 138:18 (#0), pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).45), kind: Struct(Resolved(None, Path { span: src/lib.rs:132:17: 132:21 (#0), res: Def(Variant, DefId(2:37173 ~ core[7d5a]::option::Option::Some)), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).42), res: Def(Variant, DefId(2:37173 ~ core[7d5a]::option::Option::Some)), args: None, infer_args: true }] }), [PatField { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).43), ident: 0#0, pat: Pat { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).44), kind: Binding(BindingMode(No, Not), HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).44), i#0, None), span: src/lib.rs:132:27: 132:28 (#0), default_binding_modes: true }, is_shorthand: false, span: src/lib.rs:132:24: 132:28 (#0) }], false), span: src/lib.rs:132:17: 132:30 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).47), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).48), kind: Item(ItemId { owner_id: DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo) }), span: src/lib.rs:134:21: 136:22 (#0) }, Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).53), kind: Semi(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).49), kind: Call(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).50), kind: Path(Resolved(None, Path { span: src/lib.rs:137:21: 137:24 (#0), res: Def(Fn, DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)), segments: [PathSegment { ident: foo#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).51), res: Def(Fn, DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)), args: None, infer_args: true }] })), span: src/lib.rs:137:21: 137:24 (#0) }, [Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).52), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:137:25: 137:26 (#0) }), span: src/lib.rs:137:25: 137:26 (#0) }]), span: src/lib.rs:137:21: 137:27 (#0) }), span: src/lib.rs:137:21: 137:28 (#0) }], expr: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).54), rules: DefaultBlock, span: src/lib.rs:132:34: 138:18 (#0), targeted_by_break: false }, None), span: src/lib.rs:132:34: 138:18 (#0) } }], Normal), span: src/lib.rs:130:13: 139:14 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).55), rules: DefaultBlock, span: src/lib.rs:129:26: 140:10 (#0), targeted_by_break: false }, None, Loop, src/lib.rs:129:21: 129:25 (#0)), span: src/lib.rs:129:21: 140:10 (#0) } }], Normal), span: src/lib.rs:128:14: 141:6 (#0) }), els: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).56), span: src/lib.rs:128:5: 141:7 (#0), source: Normal }), span: src/lib.rs:128:5: 141:7 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).58), kind: Path(Resolved(None, Path { span: src/lib.rs:142:5: 142:7 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), segments: [PathSegment { ident: _t#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).59), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), args: None, infer_args: true }] })), span: src/lib.rs:142:5: 142:7 (#0) }), hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).60), rules: DefaultBlock, span: src/lib.rs:127:1: 143:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/lib.rs:142:5: 142:7 (#0), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), segments: [PathSegment { ident: _t#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).59), res: Local(HirId(DefId(0:18 ~ a[c74b]::test_fn_args_in_loop).57)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:18 ~ a[c74b]::test_fn_args_in_loop)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).6), kind: Path(Resolved(None, Path { span: src/lib.rs:134:31: 134:34 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).7), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:134:31: 134:34 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).8), kind: Path(Resolved(None, Path { span: src/lib.rs:134:39: 134:42 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).9), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/lib.rs:134:39: 134:42 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/lib.rs:134:21: 134:42 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/lib.rs:134:42: 134:42 (#0), span: src/lib.rs:134:27: 134:27 (#0) }, BodyId { hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).5) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).3), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:135:25: 135:26 (#0) }), span: src/lib.rs:135:25: 135:26 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo).4), rules: DefaultBlock, span: src/lib.rs:134:43: 136:22 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/lib.rs:135:25: 135:26 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Trying to get type of function DefId(0:22 ~ a[c74b]::test_fn_args_in_loop::foo)
