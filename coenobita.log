[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Coenobita invoked for crate 'b'
=========
[DEBUG] Coenobita invoked for crate 'c'
=========
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:19: 2:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:3 ~ b[3f10]::value).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:19: 2:22 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:1: 2:22 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:22: 2:22 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:13: 2:13 (#0) }, BodyId { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).3) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:3 ~ c[3801]::value).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:19: 3:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:3 ~ c[3801]::value).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:19: 3:22 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:1: 3:22 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:22: 3:22 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:13: 3:13 (#0) }, BodyId { hir_id: HirId(DefId(0:3 ~ c[3801]::value).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:3 ~ c[3801]::value)
[DEBUG] Trying to get type of function DefId(0:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:3 ~ c[3801]::value).1), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:4:5: 4:6 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:4:5: 4:6 (#0) }), hir_id: HirId(DefId(0:3 ~ c[3801]::value).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:23: 5:2 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).1), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) }), hir_id: HirId(DefId(0:3 ~ b[3f10]::value).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:23: 4:2 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:4:5: 4:6 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:21: 8:25 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:21: 8:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:1: 8:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:25: 8:25 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:15: 8:15 (#0) }, BodyId { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).3) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:21: 7:25 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:21: 7:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:1: 7:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:25: 7:25 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:15: 7:15 (#0) }, BodyId { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:4 ~ c[3801]::boolean)
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).1), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:9:5: 9:9 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:9:5: 9:9 (#0) }), hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:26: 10:2 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).1), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) }), hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:26: 9:2 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:9:5: 9:9 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Done checking item fn body
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/mod.rs:23:1: 23:11 (#0), inject_use_span: src/integrity/mod.rs:23:1: 23:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:4 ~ a[c74b]::integrity::enums) }] })
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/enums.rs:1:1: 12:2 (#0), inject_use_span: src/integrity/enums.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:5 ~ a[c74b]::integrity::enums::Foo) }, ItemId { owner_id: DefId(0:20 ~ a[c74b]::integrity::enums::Something) }, ItemId { owner_id: DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple) }] })
[DEBUG] Checking item Enum(EnumDef { variants: [Variant { ident: Boo#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).1), def_id: DefId(0:6 ~ a[c74b]::integrity::enums::Foo::Boo), data: Tuple([FieldDef { span: src/integrity/enums.rs:2:9: 2:12 (#0), vis_span: src/integrity/enums.rs:2:9: 2:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).5), def_id: DefId(0:8 ~ a[c74b]::integrity::enums::Foo::Boo::0), ty: Ty { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).3), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:2:9: 2:12 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).4), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/enums.rs:2:9: 2:12 (#0) } }], HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).2), DefId(0:7 ~ a[c74b]::integrity::enums::Foo::Boo::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:2:5: 2:13 (#0) }, Variant { ident: Bar#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).6), def_id: DefId(0:9 ~ a[c74b]::integrity::enums::Foo::Bar), data: Tuple([FieldDef { span: src/integrity/enums.rs:3:9: 3:13 (#0), vis_span: src/integrity/enums.rs:3:9: 3:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).10), def_id: DefId(0:11 ~ a[c74b]::integrity::enums::Foo::Bar::0), ty: Ty { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).8), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:3:9: 3:13 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).9), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/enums.rs:3:9: 3:13 (#0) } }], HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).7), DefId(0:10 ~ a[c74b]::integrity::enums::Foo::Bar::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:3:5: 3:14 (#0) }, Variant { ident: Baz#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).11), def_id: DefId(0:12 ~ a[c74b]::integrity::enums::Foo::Baz), data: Tuple([FieldDef { span: src/integrity/enums.rs:4:9: 4:13 (#0), vis_span: src/integrity/enums.rs:4:9: 4:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).15), def_id: DefId(0:14 ~ a[c74b]::integrity::enums::Foo::Baz::0), ty: Ty { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).13), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:4:9: 4:13 (#0), res: PrimTy(Char), segments: [PathSegment { ident: char#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).14), res: PrimTy(Char), args: None, infer_args: false }] })), span: src/integrity/enums.rs:4:9: 4:13 (#0) } }], HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).12), DefId(0:13 ~ a[c74b]::integrity::enums::Foo::Baz::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:4:5: 4:14 (#0) }] }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:1:9: 1:9 (#0), span: src/integrity/enums.rs:1:9: 1:9 (#0) })
[DEBUG] Checking item Struct(Tuple([FieldDef { span: src/integrity/enums.rs:8:18: 8:21 (#0), vis_span: src/integrity/enums.rs:8:18: 8:18 (#0), ident: 0#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::enums::Something).4), def_id: DefId(0:22 ~ a[c74b]::integrity::enums::Something::0), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::enums::Something).2), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:8:18: 8:21 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::enums::Something).3), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/enums.rs:8:18: 8:21 (#0) } }], HirId(DefId(0:20 ~ a[c74b]::integrity::enums::Something).1), DefId(0:21 ~ a[c74b]::integrity::enums::Something::{constructor#0})), Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:8:22: 8:22 (#0), span: src/integrity/enums.rs:8:17: 8:17 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/enums.rs:10:23: 10:23 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/enums.rs:10:1: 10:23 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:10:23: 10:23 (#0), span: src/integrity/enums.rs:10:21: 10:21 (#0) }, BodyId { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).9) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).7), s#0, None), span: src/integrity/enums.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).2), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).3), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:11:13: 11:22 (#0), res: Def(Ctor(Struct, Fn), DefId(0:21 ~ a[c74b]::integrity::enums::Something::{constructor#0})), segments: [PathSegment { ident: Something#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).4), res: Def(Ctor(Struct, Fn), DefId(0:21 ~ a[c74b]::integrity::enums::Something::{constructor#0})), args: None, infer_args: true }] })), span: src/integrity/enums.rs:11:13: 11:22 (#0) }, [Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).5), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/enums.rs:11:23: 11:24 (#0) }), span: src/integrity/enums.rs:11:23: 11:24 (#0) }]), span: src/integrity/enums.rs:11:13: 11:25 (#0) }), els: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).6), span: src/integrity/enums.rs:11:5: 11:26 (#0), source: Normal }), span: src/integrity/enums.rs:11:5: 11:26 (#0) }], expr: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).8), rules: DefaultBlock, span: src/integrity/enums.rs:10:24: 12:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] Done checking item fn body
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/provenance.rs:1:1: 39:2 (#0), inject_use_span: src/provenance.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance) }, ItemId { owner_id: DefId(0:18 ~ a[c74b]::provenance::test_fn_id) }, ItemId { owner_id: DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd) }] })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:1:27: 1:27 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:1:1: 1:27 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:1:27: 1:27 (#0), span: src/provenance.rs:1:25: 1:25 (#0) }, BodyId { hir_id: HirId(DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance).4), kind: Binding(BindingMode(No, Not), HirId(DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance).4), x#0, None), span: src/provenance.rs:3:9: 3:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/provenance.rs:3:13: 3:14 (#0) }), span: src/provenance.rs:3:13: 3:14 (#0) }), els: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance).3), span: src/provenance.rs:3:5: 3:15 (#0), source: Normal }), span: src/provenance.rs:3:5: 3:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance).5), rules: DefaultBlock, span: src/provenance.rs:1:28: 8:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:10:16: 10:16 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:10:1: 10:16 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:10:16: 10:16 (#0), span: src/provenance.rs:10:14: 10:14 (#0) }, BodyId { hir_id: HirId(DefId(0:18 ~ a[c74b]::provenance::test_fn_id).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:18 ~ a[c74b]::provenance::test_fn_id)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::provenance::test_fn_id).1), kind: Item(ItemId { owner_id: DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo) }), span: src/provenance.rs:12:5: 14:6 (#0) }], expr: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::provenance::test_fn_id).2), rules: DefaultBlock, span: src/provenance.rs:10:17: 15:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:17:18: 17:18 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:17:1: 17:18 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:17:18: 17:18 (#0), span: src/provenance.rs:17:16: 17:16 (#0) }, BodyId { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).11) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).1), kind: Item(ItemId { owner_id: DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id) }), span: src/provenance.rs:19:5: 33:6 (#0) }, Stmt { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).9), kind: Semi(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).2), kind: Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }]), span: src/provenance.rs:38:5: 38:19 (#0) }), span: src/provenance.rs:38:5: 38:20 (#0) }], expr: None, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).10), rules: DefaultBlock, span: src/provenance.rs:17:19: 39:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:14: 19:17 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:14: 19:17 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:22: 19:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:22: 19:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:19:5: 19:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:19:25: 19:25 (#0), span: src/provenance.rs:19:10: 19:10 (#0) }, BodyId { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).3), kind: Item(ItemId { owner_id: DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd) }), span: src/provenance.rs:22:9: 30:10 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).4), kind: Call(Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }]), span: src/provenance.rs:32:9: 32:15 (#0) }), hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).9), rules: DefaultBlock, span: src/provenance.rs:19:26: 33:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ c[3801]::value)
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ c[3801]::value)
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:14: 19:17 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:14: 19:17 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:22: 19:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:22: 19:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:19:5: 19:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:19:25: 19:25 (#0), span: src/provenance.rs:19:10: 19:10 (#0) }, BodyId { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).3), kind: Item(ItemId { owner_id: DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd) }), span: src/provenance.rs:22:9: 30:10 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).4), kind: Call(Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }]), span: src/provenance.rs:32:9: 32:15 (#0) }), hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).9), rules: DefaultBlock, span: src/provenance.rs:19:26: 33:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/mod.rs:6:1: 6:11 (#0), inject_use_span: src/integrity/mod.rs:6:1: 6:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:4 ~ a[c74b]::integrity::enums) }] })
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/enums.rs:1:1: 12:2 (#0), inject_use_span: src/integrity/enums.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:5 ~ a[c74b]::integrity::enums::Foo) }, ItemId { owner_id: DefId(0:20 ~ a[c74b]::integrity::enums::Something) }, ItemId { owner_id: DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple) }] })
[DEBUG] Checking item Enum(EnumDef { variants: [Variant { ident: Boo#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).1), def_id: DefId(0:6 ~ a[c74b]::integrity::enums::Foo::Boo), data: Tuple([FieldDef { span: src/integrity/enums.rs:2:9: 2:12 (#0), vis_span: src/integrity/enums.rs:2:9: 2:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).5), def_id: DefId(0:8 ~ a[c74b]::integrity::enums::Foo::Boo::0), ty: Ty { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).3), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:2:9: 2:12 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).4), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/enums.rs:2:9: 2:12 (#0) } }], HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).2), DefId(0:7 ~ a[c74b]::integrity::enums::Foo::Boo::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:2:5: 2:13 (#0) }, Variant { ident: Bar#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).6), def_id: DefId(0:9 ~ a[c74b]::integrity::enums::Foo::Bar), data: Tuple([FieldDef { span: src/integrity/enums.rs:3:9: 3:13 (#0), vis_span: src/integrity/enums.rs:3:9: 3:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).10), def_id: DefId(0:11 ~ a[c74b]::integrity::enums::Foo::Bar::0), ty: Ty { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).8), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:3:9: 3:13 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).9), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/enums.rs:3:9: 3:13 (#0) } }], HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).7), DefId(0:10 ~ a[c74b]::integrity::enums::Foo::Bar::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:3:5: 3:14 (#0) }, Variant { ident: Baz#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).11), def_id: DefId(0:12 ~ a[c74b]::integrity::enums::Foo::Baz), data: Tuple([FieldDef { span: src/integrity/enums.rs:4:9: 4:13 (#0), vis_span: src/integrity/enums.rs:4:9: 4:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).15), def_id: DefId(0:14 ~ a[c74b]::integrity::enums::Foo::Baz::0), ty: Ty { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).13), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:4:9: 4:13 (#0), res: PrimTy(Char), segments: [PathSegment { ident: char#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).14), res: PrimTy(Char), args: None, infer_args: false }] })), span: src/integrity/enums.rs:4:9: 4:13 (#0) } }], HirId(DefId(0:5 ~ a[c74b]::integrity::enums::Foo).12), DefId(0:13 ~ a[c74b]::integrity::enums::Foo::Baz::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:4:5: 4:14 (#0) }] }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:1:9: 1:9 (#0), span: src/integrity/enums.rs:1:9: 1:9 (#0) })
[DEBUG] Checking item Struct(Tuple([FieldDef { span: src/integrity/enums.rs:8:18: 8:21 (#0), vis_span: src/integrity/enums.rs:8:18: 8:18 (#0), ident: 0#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::enums::Something).4), def_id: DefId(0:22 ~ a[c74b]::integrity::enums::Something::0), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::enums::Something).2), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:8:18: 8:21 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::enums::Something).3), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/enums.rs:8:18: 8:21 (#0) } }], HirId(DefId(0:20 ~ a[c74b]::integrity::enums::Something).1), DefId(0:21 ~ a[c74b]::integrity::enums::Something::{constructor#0})), Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:8:22: 8:22 (#0), span: src/integrity/enums.rs:8:17: 8:17 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/enums.rs:10:23: 10:23 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/enums.rs:10:1: 10:23 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:10:23: 10:23 (#0), span: src/integrity/enums.rs:10:21: 10:21 (#0) }, BodyId { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).9) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).7), s#0, None), span: src/integrity/enums.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).2), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).3), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:11:13: 11:22 (#0), res: Def(Ctor(Struct, Fn), DefId(0:21 ~ a[c74b]::integrity::enums::Something::{constructor#0})), segments: [PathSegment { ident: Something#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).4), res: Def(Ctor(Struct, Fn), DefId(0:21 ~ a[c74b]::integrity::enums::Something::{constructor#0})), args: None, infer_args: true }] })), span: src/integrity/enums.rs:11:13: 11:22 (#0) }, [Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).5), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/enums.rs:11:23: 11:24 (#0) }), span: src/integrity/enums.rs:11:23: 11:24 (#0) }]), span: src/integrity/enums.rs:11:13: 11:25 (#0) }), els: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).6), span: src/integrity/enums.rs:11:5: 11:26 (#0), source: Normal }), span: src/integrity/enums.rs:11:5: 11:26 (#0) }], expr: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::enums::test_struct_tuple).8), rules: DefaultBlock, span: src/integrity/enums.rs:10:24: 12:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] Done checking item fn body
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/provenance.rs:1:1: 39:2 (#0), inject_use_span: src/provenance.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance) }, ItemId { owner_id: DefId(0:18 ~ a[c74b]::provenance::test_fn_id) }, ItemId { owner_id: DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd) }] })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:1:27: 1:27 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:1:1: 1:27 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:1:27: 1:27 (#0), span: src/provenance.rs:1:25: 1:25 (#0) }, BodyId { hir_id: HirId(DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance).4), kind: Binding(BindingMode(No, Not), HirId(DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance).4), x#0, None), span: src/provenance.rs:3:9: 3:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/provenance.rs:3:13: 3:14 (#0) }), span: src/provenance.rs:3:13: 3:14 (#0) }), els: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance).3), span: src/provenance.rs:3:5: 3:15 (#0), source: Normal }), span: src/provenance.rs:3:5: 3:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::provenance::test_basic_provenance).5), rules: DefaultBlock, span: src/provenance.rs:1:28: 8:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:10:16: 10:16 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:10:1: 10:16 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:10:16: 10:16 (#0), span: src/provenance.rs:10:14: 10:14 (#0) }, BodyId { hir_id: HirId(DefId(0:18 ~ a[c74b]::provenance::test_fn_id).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:18 ~ a[c74b]::provenance::test_fn_id)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c74b]::provenance::test_fn_id).1), kind: Item(ItemId { owner_id: DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo) }), span: src/provenance.rs:12:5: 14:6 (#0) }], expr: None, hir_id: HirId(DefId(0:18 ~ a[c74b]::provenance::test_fn_id).2), rules: DefaultBlock, span: src/provenance.rs:10:17: 15:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:17:18: 17:18 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:17:1: 17:18 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:17:18: 17:18 (#0), span: src/provenance.rs:17:16: 17:16 (#0) }, BodyId { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).11) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).1), kind: Item(ItemId { owner_id: DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id) }), span: src/provenance.rs:19:5: 33:6 (#0) }, Stmt { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).9), kind: Semi(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).2), kind: Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }]), span: src/provenance.rs:38:5: 38:19 (#0) }), span: src/provenance.rs:38:5: 38:20 (#0) }], expr: None, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).10), rules: DefaultBlock, span: src/provenance.rs:17:19: 39:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:14: 19:17 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:14: 19:17 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:22: 19:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:22: 19:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:19:5: 19:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:19:25: 19:25 (#0), span: src/provenance.rs:19:10: 19:10 (#0) }, BodyId { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).3), kind: Item(ItemId { owner_id: DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd) }), span: src/provenance.rs:22:9: 30:10 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).4), kind: Call(Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }]), span: src/provenance.rs:32:9: 32:15 (#0) }), hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).9), rules: DefaultBlock, span: src/provenance.rs:19:26: 33:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ c[3801]::value)
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ c[3801]::value)
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:14: 19:17 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:14: 19:17 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:22: 19:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:22: 19:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:19:5: 19:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:19:25: 19:25 (#0), span: src/provenance.rs:19:10: 19:10 (#0) }, BodyId { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).3), kind: Item(ItemId { owner_id: DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd) }), span: src/provenance.rs:22:9: 30:10 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).4), kind: Call(Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }]), span: src/provenance.rs:32:9: 32:15 (#0) }), hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).9), rules: DefaultBlock, span: src/provenance.rs:19:26: 33:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ a[c396]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ a[c396]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ a[c396]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/mod.rs:6:1: 6:11 (#0), inject_use_span: src/integrity/mod.rs:6:1: 6:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:4 ~ a[c396]::integrity::enums) }] })
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/enums.rs:1:1: 12:2 (#0), inject_use_span: src/integrity/enums.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:5 ~ a[c396]::integrity::enums::Foo) }, ItemId { owner_id: DefId(0:20 ~ a[c396]::integrity::enums::Something) }, ItemId { owner_id: DefId(0:15 ~ a[c396]::integrity::enums::test_struct_tuple) }] })
[DEBUG] Checking item Enum(EnumDef { variants: [Variant { ident: Boo#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).1), def_id: DefId(0:6 ~ a[c396]::integrity::enums::Foo::Boo), data: Tuple([FieldDef { span: src/integrity/enums.rs:2:9: 2:12 (#0), vis_span: src/integrity/enums.rs:2:9: 2:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).5), def_id: DefId(0:8 ~ a[c396]::integrity::enums::Foo::Boo::0), ty: Ty { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).3), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:2:9: 2:12 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).4), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/enums.rs:2:9: 2:12 (#0) } }], HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).2), DefId(0:7 ~ a[c396]::integrity::enums::Foo::Boo::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:2:5: 2:13 (#0) }, Variant { ident: Bar#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).6), def_id: DefId(0:9 ~ a[c396]::integrity::enums::Foo::Bar), data: Tuple([FieldDef { span: src/integrity/enums.rs:3:9: 3:13 (#0), vis_span: src/integrity/enums.rs:3:9: 3:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).10), def_id: DefId(0:11 ~ a[c396]::integrity::enums::Foo::Bar::0), ty: Ty { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).8), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:3:9: 3:13 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).9), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/enums.rs:3:9: 3:13 (#0) } }], HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).7), DefId(0:10 ~ a[c396]::integrity::enums::Foo::Bar::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:3:5: 3:14 (#0) }, Variant { ident: Baz#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).11), def_id: DefId(0:12 ~ a[c396]::integrity::enums::Foo::Baz), data: Tuple([FieldDef { span: src/integrity/enums.rs:4:9: 4:13 (#0), vis_span: src/integrity/enums.rs:4:9: 4:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).15), def_id: DefId(0:14 ~ a[c396]::integrity::enums::Foo::Baz::0), ty: Ty { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).13), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:4:9: 4:13 (#0), res: PrimTy(Char), segments: [PathSegment { ident: char#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).14), res: PrimTy(Char), args: None, infer_args: false }] })), span: src/integrity/enums.rs:4:9: 4:13 (#0) } }], HirId(DefId(0:5 ~ a[c396]::integrity::enums::Foo).12), DefId(0:13 ~ a[c396]::integrity::enums::Foo::Baz::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:4:5: 4:14 (#0) }] }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:1:9: 1:9 (#0), span: src/integrity/enums.rs:1:9: 1:9 (#0) })
[DEBUG] Checking item Struct(Tuple([FieldDef { span: src/integrity/enums.rs:8:18: 8:21 (#0), vis_span: src/integrity/enums.rs:8:18: 8:18 (#0), ident: 0#0, hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::enums::Something).4), def_id: DefId(0:22 ~ a[c396]::integrity::enums::Something::0), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::enums::Something).2), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:8:18: 8:21 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::enums::Something).3), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/enums.rs:8:18: 8:21 (#0) } }], HirId(DefId(0:20 ~ a[c396]::integrity::enums::Something).1), DefId(0:21 ~ a[c396]::integrity::enums::Something::{constructor#0})), Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:8:22: 8:22 (#0), span: src/integrity/enums.rs:8:17: 8:17 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/enums.rs:10:23: 10:23 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/enums.rs:10:1: 10:23 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:10:23: 10:23 (#0), span: src/integrity/enums.rs:10:21: 10:21 (#0) }, BodyId { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::enums::test_struct_tuple).9) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:15 ~ a[c396]::integrity::enums::test_struct_tuple)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::enums::test_struct_tuple).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::enums::test_struct_tuple).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:15 ~ a[c396]::integrity::enums::test_struct_tuple).7), s#0, None), span: src/integrity/enums.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::enums::test_struct_tuple).2), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::enums::test_struct_tuple).3), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:11:13: 11:22 (#0), res: Def(Ctor(Struct, Fn), DefId(0:21 ~ a[c396]::integrity::enums::Something::{constructor#0})), segments: [PathSegment { ident: Something#0, hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::enums::test_struct_tuple).4), res: Def(Ctor(Struct, Fn), DefId(0:21 ~ a[c396]::integrity::enums::Something::{constructor#0})), args: None, infer_args: true }] })), span: src/integrity/enums.rs:11:13: 11:22 (#0) }, [Expr { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::enums::test_struct_tuple).5), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/enums.rs:11:23: 11:24 (#0) }), span: src/integrity/enums.rs:11:23: 11:24 (#0) }]), span: src/integrity/enums.rs:11:13: 11:25 (#0) }), els: None, hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::enums::test_struct_tuple).6), span: src/integrity/enums.rs:11:5: 11:26 (#0), source: Normal }), span: src/integrity/enums.rs:11:5: 11:26 (#0) }], expr: None, hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::enums::test_struct_tuple).8), rules: DefaultBlock, span: src/integrity/enums.rs:10:24: 12:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] Done checking item fn body
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/provenance.rs:1:1: 39:2 (#0), inject_use_span: src/provenance.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:17 ~ a[c396]::provenance::test_basic_provenance) }, ItemId { owner_id: DefId(0:18 ~ a[c396]::provenance::test_fn_id) }, ItemId { owner_id: DefId(0:19 ~ a[c396]::provenance::test_fn_iddd) }] })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:1:27: 1:27 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:1:1: 1:27 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:1:27: 1:27 (#0), span: src/provenance.rs:1:25: 1:25 (#0) }, BodyId { hir_id: HirId(DefId(0:17 ~ a[c396]::provenance::test_basic_provenance).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:17 ~ a[c396]::provenance::test_basic_provenance)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c396]::provenance::test_basic_provenance).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:17 ~ a[c396]::provenance::test_basic_provenance).4), kind: Binding(BindingMode(No, Not), HirId(DefId(0:17 ~ a[c396]::provenance::test_basic_provenance).4), x#0, None), span: src/provenance.rs:3:9: 3:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::provenance::test_basic_provenance).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/provenance.rs:3:13: 3:14 (#0) }), span: src/provenance.rs:3:13: 3:14 (#0) }), els: None, hir_id: HirId(DefId(0:17 ~ a[c396]::provenance::test_basic_provenance).3), span: src/provenance.rs:3:5: 3:15 (#0), source: Normal }), span: src/provenance.rs:3:5: 3:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c396]::provenance::test_basic_provenance).5), rules: DefaultBlock, span: src/provenance.rs:1:28: 8:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:10:16: 10:16 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:10:1: 10:16 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:10:16: 10:16 (#0), span: src/provenance.rs:10:14: 10:14 (#0) }, BodyId { hir_id: HirId(DefId(0:18 ~ a[c396]::provenance::test_fn_id).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:18 ~ a[c396]::provenance::test_fn_id)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:18 ~ a[c396]::provenance::test_fn_id).1), kind: Item(ItemId { owner_id: DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo) }), span: src/provenance.rs:12:5: 14:6 (#0) }], expr: None, hir_id: HirId(DefId(0:18 ~ a[c396]::provenance::test_fn_id).2), rules: DefaultBlock, span: src/provenance.rs:10:17: 15:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:23 ~ a[c396]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:17:18: 17:18 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:17:1: 17:18 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:17:18: 17:18 (#0), span: src/provenance.rs:17:16: 17:16 (#0) }, BodyId { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).11) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c396]::provenance::test_fn_iddd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).1), kind: Item(ItemId { owner_id: DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id) }), span: src/provenance.rs:19:5: 33:6 (#0) }, Stmt { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).9), kind: Semi(Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).2), kind: Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }]), span: src/provenance.rs:38:5: 38:19 (#0) }), span: src/provenance.rs:38:5: 38:20 (#0) }], expr: None, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).10), rules: DefaultBlock, span: src/provenance.rs:17:19: 39:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:14: 19:17 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:14: 19:17 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:22: 19:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:22: 19:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:19:5: 19:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:19:25: 19:25 (#0), span: src/provenance.rs:19:10: 19:10 (#0) }, BodyId { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).3), kind: Item(ItemId { owner_id: DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd) }), span: src/provenance.rs:22:9: 30:10 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).4), kind: Call(Expr { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }]), span: src/provenance.rs:32:9: 32:15 (#0) }), hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).9), rules: DefaultBlock, span: src/provenance.rs:19:26: 33:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(24:3 ~ c[3801]::value)
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:19 ~ a[c396]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(24:3 ~ c[3801]::value)
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:14: 19:17 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:14: 19:17 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:22: 19:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:22: 19:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:19:5: 19:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:19:25: 19:25 (#0), span: src/provenance.rs:19:10: 19:10 (#0) }, BodyId { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).3), kind: Item(ItemId { owner_id: DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd) }), span: src/provenance.rs:22:9: 30:10 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).4), kind: Call(Expr { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }]), span: src/provenance.rs:32:9: 32:15 (#0) }), hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).9), rules: DefaultBlock, span: src/provenance.rs:19:26: 33:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:24 ~ a[c396]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:25 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:26 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:27 ~ a[c396]::main).10), kind: Tup([]), span: no-location (#4) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: no-location (#4) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: no-location (#0), span: no-location (#0) }, BodyId { hir_id: HirId(DefId(0:27 ~ a[c396]::main).9) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:27 ~ a[c396]::main)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:27 ~ a[c396]::main).1), kind: Item(ItemId { owner_id: DefId(0:28 ~ a[c396]::main::test) }), span: no-location (#4) }], expr: Some(Expr { hir_id: HirId(DefId(0:27 ~ a[c396]::main).2), kind: Call(Expr { hir_id: HirId(DefId(0:27 ~ a[c396]::main).3), kind: Path(Resolved(None, Path { span: no-location (#4), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#4, hir_id: HirId(DefId(0:27 ~ a[c396]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#4, hir_id: HirId(DefId(0:27 ~ a[c396]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })), span: no-location (#4) }, [Expr { hir_id: HirId(DefId(0:27 ~ a[c396]::main).6), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:27 ~ a[c396]::main).7), kind: Array([]), span: no-location (#4) }), span: no-location (#4) }]), span: no-location (#4) }), hir_id: HirId(DefId(0:27 ~ a[c396]::main).8), rules: DefaultBlock, span: no-location (#4), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item ExternCrate(None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:27 ~ a[c396]::main).3), kind: Path(Resolved(None, Path { span: no-location (#4), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#4, hir_id: HirId(DefId(0:27 ~ a[c396]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#4, hir_id: HirId(DefId(0:27 ~ a[c396]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })), span: no-location (#4) }, [Expr { hir_id: HirId(DefId(0:27 ~ a[c396]::main).6), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:27 ~ a[c396]::main).7), kind: Array([]), span: no-location (#4) }), span: no-location (#4) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: no-location (#4), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#4, hir_id: HirId(DefId(0:27 ~ a[c396]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#4, hir_id: HirId(DefId(0:27 ~ a[c396]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:841 ~ test[522f]::test_main_static)
[DEBUG] > expr kind is AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:27 ~ a[c396]::main).7), kind: Array([]), span: no-location (#4) })
[DEBUG] > expr kind is Array([])
[DEBUG] Done checking item fn body
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ a[c396]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ a[c396]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ a[c396]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/mod.rs:1:1: 6:11 (#0), inject_use_span: src/integrity/mod.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:4 ~ a[c396]::integrity::if_else) }, ItemId { owner_id: DefId(0:8 ~ a[c396]::integrity::loops) }, ItemId { owner_id: DefId(0:11 ~ a[c396]::integrity::unorganized) }, ItemId { owner_id: DefId(0:25 ~ a[c396]::integrity::methods) }, ItemId { owner_id: DefId(0:30 ~ a[c396]::integrity::enums) }] })
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/mod.rs:1:1: 6:11 (#0), inject_use_span: src/integrity/mod.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:4 ~ a[c74b]::integrity::if_else) }, ItemId { owner_id: DefId(0:8 ~ a[c74b]::integrity::loops) }, ItemId { owner_id: DefId(0:11 ~ a[c74b]::integrity::unorganized) }, ItemId { owner_id: DefId(0:25 ~ a[c74b]::integrity::methods) }, ItemId { owner_id: DefId(0:30 ~ a[c74b]::integrity::enums) }] })
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/if_else.rs:1:1: 29:2 (#0), inject_use_span: src/integrity/if_else.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else) }, ItemId { owner_id: DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else) }, ItemId { owner_id: DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else) }] })
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/if_else.rs:1:1: 29:2 (#0), inject_use_span: src/integrity/if_else.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else) }, ItemId { owner_id: DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else) }, ItemId { owner_id: DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else) }] })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/if_else.rs:1:24: 1:24 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/if_else.rs:1:1: 1:24 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/if_else.rs:1:24: 1:24 (#0), span: src/integrity/if_else.rs:1:22: 1:22 (#0) }, BodyId { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).22) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/if_else.rs:1:24: 1:24 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/if_else.rs:1:1: 1:24 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/if_else.rs:1:24: 1:24 (#0), span: src/integrity/if_else.rs:1:22: 1:22 (#0) }, BodyId { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).22) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else)
[DEBUG] Trying to get type of function DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15), kind: Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15), y#0, None), span: src/integrity/if_else.rs:3:9: 3:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:3:16: 3:26 (#0) }, []), span: src/integrity/if_else.rs:3:16: 3:28 (#0) }), span: src/integrity/if_else.rs:3:16: 3:28 (#6) }, Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).10), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).9), rules: DefaultBlock, span: src/integrity/if_else.rs:3:29: 3:34 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:3:29: 3:34 (#0) }, Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).11), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).13), rules: DefaultBlock, span: src/integrity/if_else.rs:3:40: 3:45 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:3:40: 3:45 (#0) })), span: src/integrity/if_else.rs:3:13: 3:45 (#0) }), els: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).14), span: src/integrity/if_else.rs:3:5: 3:46 (#0), source: Normal }), span: src/integrity/if_else.rs:3:5: 3:46 (#0) }, Stmt { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).16), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).20), z#0, None), span: src/integrity/if_else.rs:6:9: 6:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).17), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:6:13: 6:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:6:13: 6:14 (#0) }), els: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).19), span: src/integrity/if_else.rs:6:5: 6:15 (#0), source: Normal }), span: src/integrity/if_else.rs:6:5: 6:15 (#0) }], expr: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).21), rules: DefaultBlock, span: src/integrity/if_else.rs:1:25: 7:2 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).15), kind: Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).15), y#0, None), span: src/integrity/if_else.rs:3:9: 3:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:3:16: 3:26 (#0) }, []), span: src/integrity/if_else.rs:3:16: 3:28 (#0) }), span: src/integrity/if_else.rs:3:16: 3:28 (#8) }, Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).10), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).9), rules: DefaultBlock, span: src/integrity/if_else.rs:3:29: 3:34 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:3:29: 3:34 (#0) }, Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).11), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).13), rules: DefaultBlock, span: src/integrity/if_else.rs:3:40: 3:45 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:3:40: 3:45 (#0) })), span: src/integrity/if_else.rs:3:13: 3:45 (#0) }), els: None, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).14), span: src/integrity/if_else.rs:3:5: 3:46 (#0), source: Normal }), span: src/integrity/if_else.rs:3:5: 3:46 (#0) }, Stmt { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).16), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).20), z#0, None), span: src/integrity/if_else.rs:6:9: 6:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).17), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:6:13: 6:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).15)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:6:13: 6:14 (#0) }), els: None, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).19), span: src/integrity/if_else.rs:6:5: 6:15 (#0), source: Normal }), span: src/integrity/if_else.rs:6:5: 6:15 (#0) }], expr: None, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).21), rules: DefaultBlock, span: src/integrity/if_else.rs:1:25: 7:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:3:16: 3:26 (#0) }, []), span: src/integrity/if_else.rs:3:16: 3:28 (#0) }), span: src/integrity/if_else.rs:3:16: 3:28 (#8) }, Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).10), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).9), rules: DefaultBlock, span: src/integrity/if_else.rs:3:29: 3:34 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:3:29: 3:34 (#0) }, Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).11), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).13), rules: DefaultBlock, span: src/integrity/if_else.rs:3:40: 3:45 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:3:40: 3:45 (#0) }))
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:3:16: 3:26 (#0) }, []), span: src/integrity/if_else.rs:3:16: 3:28 (#0) }), span: src/integrity/if_else.rs:3:16: 3:28 (#6) }, Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).10), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).9), rules: DefaultBlock, span: src/integrity/if_else.rs:3:29: 3:34 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:3:29: 3:34 (#0) }, Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).11), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).13), rules: DefaultBlock, span: src/integrity/if_else.rs:3:40: 3:45 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:3:40: 3:45 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:3:16: 3:26 (#0) }, []), span: src/integrity/if_else.rs:3:16: 3:28 (#0) })
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:3:16: 3:26 (#0) }, []), span: src/integrity/if_else.rs:3:16: 3:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:3:16: 3:26 (#0) }, [])
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:3:16: 3:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(24:4 ~ c[3801]::boolean)
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).9), rules: DefaultBlock, span: src/integrity/if_else.rs:3:29: 3:34 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).9), rules: DefaultBlock, span: src/integrity/if_else.rs:3:29: 3:34 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:3:31: 3:32 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:3:31: 3:32 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).13), rules: DefaultBlock, span: src/integrity/if_else.rs:3:40: 3:45 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).13), rules: DefaultBlock, span: src/integrity/if_else.rs:3:40: 3:45 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:3:42: 3:43 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:3:42: 3:43 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:6:13: 6:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).15)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:6:13: 6:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:6:13: 6:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c396]::integrity::if_else::test_basic_if_else).15)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:6:13: 6:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/if_else.rs:9:30: 9:30 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/if_else.rs:9:1: 9:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/if_else.rs:9:30: 9:30 (#0), span: src/integrity/if_else.rs:9:28: 9:28 (#0) }, BodyId { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).22) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/if_else.rs:9:30: 9:30 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/if_else.rs:9:1: 9:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/if_else.rs:9:30: 9:30 (#0), span: src/integrity/if_else.rs:9:28: 9:28 (#0) }, BodyId { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).22) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else)
[DEBUG] Trying to get type of function DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).20), y#0, None), span: src/integrity/if_else.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) }), span: src/integrity/if_else.rs:11:16: 11:28 (#9) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:29: 11:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:53: 11:58 (#0) })), span: src/integrity/if_else.rs:11:13: 11:58 (#0) }), els: None, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).19), span: src/integrity/if_else.rs:11:5: 11:59 (#0), source: Normal }), span: src/integrity/if_else.rs:11:5: 11:59 (#0) }], expr: None, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).21), rules: DefaultBlock, span: src/integrity/if_else.rs:9:31: 12:2 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).20), y#0, None), span: src/integrity/if_else.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) }), span: src/integrity/if_else.rs:11:16: 11:28 (#7) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:29: 11:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:53: 11:58 (#0) })), span: src/integrity/if_else.rs:11:13: 11:58 (#0) }), els: None, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).19), span: src/integrity/if_else.rs:11:5: 11:59 (#0), source: Normal }), span: src/integrity/if_else.rs:11:5: 11:59 (#0) }], expr: None, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).21), rules: DefaultBlock, span: src/integrity/if_else.rs:9:31: 12:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) }), span: src/integrity/if_else.rs:11:16: 11:28 (#9) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:29: 11:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:53: 11:58 (#0) }))
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) }), span: src/integrity/if_else.rs:11:16: 11:28 (#7) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:29: 11:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:53: 11:58 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) })
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, [])
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(24:4 ~ c[3801]::boolean)
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) })
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, [])
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(25:3 ~ b[3f10]::value)
[DEBUG] Trying to get type of function DefId(21:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) }), span: src/integrity/if_else.rs:11:16: 11:28 (#9) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:29: 11:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:53: 11:58 (#0) }))
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) }), span: src/integrity/if_else.rs:11:16: 11:28 (#7) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:29: 11:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:53: 11:58 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) })
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, [])
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(24:4 ~ c[3801]::boolean)
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) })
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, [])
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(25:3 ~ b[3f10]::value)
[DEBUG] Trying to get type of function DefId(21:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c396]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/if_else.rs:14:25: 14:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/if_else.rs:14:1: 14:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/if_else.rs:14:25: 14:25 (#0), span: src/integrity/if_else.rs:14:23: 14:23 (#0) }, BodyId { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).40) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/if_else.rs:14:25: 14:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/if_else.rs:14:1: 14:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/if_else.rs:14:25: 14:25 (#0), span: src/integrity/if_else.rs:14:23: 14:23 (#0) }, BodyId { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).40) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else)
[DEBUG] Trying to get type of function DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).38), kind: Binding(BindingMode(No, Not), HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).38), y#0, None), span: src/integrity/if_else.rs:16:9: 16:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) }), span: src/integrity/if_else.rs:16:16: 16:28 (#8) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#9) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:16:29: 22:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:22:12: 28:6 (#0) })), span: src/integrity/if_else.rs:16:13: 28:6 (#0) }), els: None, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).37), span: src/integrity/if_else.rs:16:5: 28:7 (#0), source: Normal }), span: src/integrity/if_else.rs:16:5: 28:7 (#0) }], expr: None, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).39), rules: DefaultBlock, span: src/integrity/if_else.rs:14:26: 29:2 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).38), kind: Binding(BindingMode(No, Not), HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).38), y#0, None), span: src/integrity/if_else.rs:16:9: 16:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) }), span: src/integrity/if_else.rs:16:16: 16:28 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#11) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:16:29: 22:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#12) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:22:12: 28:6 (#0) })), span: src/integrity/if_else.rs:16:13: 28:6 (#0) }), els: None, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).37), span: src/integrity/if_else.rs:16:5: 28:7 (#0), source: Normal }), span: src/integrity/if_else.rs:16:5: 28:7 (#0) }], expr: None, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).39), rules: DefaultBlock, span: src/integrity/if_else.rs:14:26: 29:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) }), span: src/integrity/if_else.rs:16:16: 16:28 (#8) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#9) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:16:29: 22:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:22:12: 28:6 (#0) }))
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) }), span: src/integrity/if_else.rs:16:16: 16:28 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#11) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:16:29: 22:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#12) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:22:12: 28:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) })
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, [])
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(25:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#9) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#11) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#9) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) }))
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#11) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) })
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, [])
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(24:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#12) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) }))
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#12) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) })
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) })
[DEBUG] > expr kind is Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) })
[DEBUG] > expr kind is Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, [])
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(24:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) }), span: src/integrity/if_else.rs:16:16: 16:28 (#8) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#9) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:16:29: 22:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:22:12: 28:6 (#0) }))
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) }), span: src/integrity/if_else.rs:16:16: 16:28 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#11) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:16:29: 22:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#12) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:22:12: 28:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) })
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, [])
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ b[3f10]::boolean)
[DEBUG] Trying to get type of function DefId(25:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#9) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#11) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#9) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) }))
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#11) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) })
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, [])
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] Trying to get type of function DefId(24:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#12) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) }))
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#12) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) })
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) })
[DEBUG] > expr kind is Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) })
[DEBUG] > expr kind is Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, [])
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(24:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c396]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Done checking item fn body
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/loops.rs:1:1: 25:2 (#0), inject_use_span: src/integrity/loops.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop) }, ItemId { owner_id: DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop) }] })
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/loops.rs:1:1: 25:2 (#0), inject_use_span: src/integrity/loops.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop) }, ItemId { owner_id: DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop) }] })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/loops.rs:1:25: 1:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/loops.rs:1:1: 1:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/loops.rs:1:25: 1:25 (#0), span: src/integrity/loops.rs:1:23: 1:23 (#0) }, BodyId { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).43) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/loops.rs:1:25: 1:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/loops.rs:1:1: 1:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/loops.rs:1:25: 1:25 (#0), span: src/integrity/loops.rs:1:23: 1:23 (#0) }, BodyId { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).43) })
[DEBUG] Trying to get type of function DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop)
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4), x#0, None), span: src/integrity/loops.rs:3:9: 3:14 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/loops.rs:3:17: 3:18 (#0) }), span: src/integrity/loops.rs:3:17: 3:18 (#0) }), els: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).3), span: src/integrity/loops.rs:3:5: 3:19 (#0), source: Normal }), span: src/integrity/loops.rs:3:5: 3:19 (#0) }, Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).5), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10), v#0, None), span: src/integrity/loops.rs:6:9: 6:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).6), kind: Array([Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).7), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: src/integrity/loops.rs:6:14: 6:15 (#0) }), span: src/integrity/loops.rs:6:14: 6:15 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).8), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: src/integrity/loops.rs:6:17: 6:18 (#0) }), span: src/integrity/loops.rs:6:17: 6:18 (#0) }]), span: src/integrity/loops.rs:6:13: 6:19 (#0) }), els: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).9), span: src/integrity/loops.rs:6:5: 6:20 (#0), source: Normal }), span: src/integrity/loops.rs:6:5: 6:20 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).41), kind: DropTemps(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).40), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).39), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).38), kind: Path(LangItem(IntoIterIntoIter, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#0) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).37), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28), iter#0, None), span: src/integrity/loops.rs:8:14: 8:15 (#12), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14), kind: Loop(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).35), kind: Expr(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).34), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:14: 8:15 (#12) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#11)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#11), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#13)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18), ident: 0#13, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#13) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:5: 10:6 (#11) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).36), rules: DefaultBlock, span: src/integrity/loops.rs:8:5: 10:6 (#11), targeted_by_break: false }, None, ForLoop, src/integrity/loops.rs:8:5: 8:15 (#11)), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:5: 10:6 (#11) }), span: src/integrity/loops.rs:8:5: 10:6 (#11) }), hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).42), rules: DefaultBlock, span: src/integrity/loops.rs:1:26: 11:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4), x#0, None), span: src/integrity/loops.rs:3:9: 3:14 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/loops.rs:3:17: 3:18 (#0) }), span: src/integrity/loops.rs:3:17: 3:18 (#0) }), els: None, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).3), span: src/integrity/loops.rs:3:5: 3:19 (#0), source: Normal }), span: src/integrity/loops.rs:3:5: 3:19 (#0) }, Stmt { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).5), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).10), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).10), v#0, None), span: src/integrity/loops.rs:6:9: 6:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).6), kind: Array([Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).7), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: src/integrity/loops.rs:6:14: 6:15 (#0) }), span: src/integrity/loops.rs:6:14: 6:15 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).8), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: src/integrity/loops.rs:6:17: 6:18 (#0) }), span: src/integrity/loops.rs:6:17: 6:18 (#0) }]), span: src/integrity/loops.rs:6:13: 6:19 (#0) }), els: None, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).9), span: src/integrity/loops.rs:6:5: 6:20 (#0), source: Normal }), span: src/integrity/loops.rs:6:5: 6:20 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).41), kind: DropTemps(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).40), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).39), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).38), kind: Path(LangItem(IntoIterIntoIter, src/integrity/loops.rs:8:14: 8:15 (#14))), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).10)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).12), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).10)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#0) }]), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).37), span: src/integrity/loops.rs:8:5: 10:6 (#13), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28), iter#0, None), span: src/integrity/loops.rs:8:14: 8:15 (#14), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).14), kind: Loop(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).35), kind: Expr(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).34), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#14))), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#14), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#14) }), span: src/integrity/loops.rs:8:14: 8:15 (#14) }]), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#13), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#13)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#13) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#15)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).18), ident: 0#15, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#15) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#15), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:14: 8:15 (#14) }), span: src/integrity/loops.rs:8:5: 10:6 (#13) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).36), rules: DefaultBlock, span: src/integrity/loops.rs:8:5: 10:6 (#13), targeted_by_break: false }, None, ForLoop, src/integrity/loops.rs:8:5: 8:15 (#13)), span: src/integrity/loops.rs:8:5: 10:6 (#13) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:5: 10:6 (#13) }), span: src/integrity/loops.rs:8:5: 10:6 (#13) }), hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).42), rules: DefaultBlock, span: src/integrity/loops.rs:1:26: 11:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/loops.rs:3:17: 3:18 (#0) })
[DEBUG] Checking a let stmt!
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/loops.rs:3:17: 3:18 (#0) })
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Array([Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).7), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: src/integrity/loops.rs:6:14: 6:15 (#0) }), span: src/integrity/loops.rs:6:14: 6:15 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).8), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: src/integrity/loops.rs:6:17: 6:18 (#0) }), span: src/integrity/loops.rs:6:17: 6:18 (#0) }])
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: src/integrity/loops.rs:6:14: 6:15 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: src/integrity/loops.rs:6:17: 6:18 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Array([Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).7), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: src/integrity/loops.rs:6:14: 6:15 (#0) }), span: src/integrity/loops.rs:6:14: 6:15 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).8), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: src/integrity/loops.rs:6:17: 6:18 (#0) }), span: src/integrity/loops.rs:6:17: 6:18 (#0) }])
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: src/integrity/loops.rs:6:14: 6:15 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: src/integrity/loops.rs:6:17: 6:18 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).40), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).39), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).38), kind: Path(LangItem(IntoIterIntoIter, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#0) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).37), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28), iter#0, None), span: src/integrity/loops.rs:8:14: 8:15 (#12), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14), kind: Loop(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).35), kind: Expr(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).34), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:14: 8:15 (#12) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#11)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#11), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#13)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18), ident: 0#13, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#13) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:5: 10:6 (#11) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).36), rules: DefaultBlock, span: src/integrity/loops.rs:8:5: 10:6 (#11), targeted_by_break: false }, None, ForLoop, src/integrity/loops.rs:8:5: 8:15 (#11)), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:5: 10:6 (#11) })
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).40), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).39), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).38), kind: Path(LangItem(IntoIterIntoIter, src/integrity/loops.rs:8:14: 8:15 (#14))), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).10)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).12), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).10)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#0) }]), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).37), span: src/integrity/loops.rs:8:5: 10:6 (#13), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28), iter#0, None), span: src/integrity/loops.rs:8:14: 8:15 (#14), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).14), kind: Loop(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).35), kind: Expr(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).34), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#14))), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#14), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#14) }), span: src/integrity/loops.rs:8:14: 8:15 (#14) }]), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#13), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#13)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#13) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#15)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).18), ident: 0#15, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#15) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#15), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:14: 8:15 (#14) }), span: src/integrity/loops.rs:8:5: 10:6 (#13) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).36), rules: DefaultBlock, span: src/integrity/loops.rs:8:5: 10:6 (#13), targeted_by_break: false }, None, ForLoop, src/integrity/loops.rs:8:5: 8:15 (#13)), span: src/integrity/loops.rs:8:5: 10:6 (#13) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:5: 10:6 (#13) })
[DEBUG] > expr kind is Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).39), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).38), kind: Path(LangItem(IntoIterIntoIter, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#0) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).37), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28), iter#0, None), span: src/integrity/loops.rs:8:14: 8:15 (#12), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14), kind: Loop(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).35), kind: Expr(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).34), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:14: 8:15 (#12) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#11)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#11), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#13)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18), ident: 0#13, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#13) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:5: 10:6 (#11) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).36), rules: DefaultBlock, span: src/integrity/loops.rs:8:5: 10:6 (#11), targeted_by_break: false }, None, ForLoop, src/integrity/loops.rs:8:5: 8:15 (#11)), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }], ForLoopDesugar)
[DEBUG] > expr kind is Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).39), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).38), kind: Path(LangItem(IntoIterIntoIter, src/integrity/loops.rs:8:14: 8:15 (#14))), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).10)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).12), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).10)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#0) }]), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).37), span: src/integrity/loops.rs:8:5: 10:6 (#13), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28), iter#0, None), span: src/integrity/loops.rs:8:14: 8:15 (#14), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).14), kind: Loop(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).35), kind: Expr(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).34), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#14))), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#14), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#14) }), span: src/integrity/loops.rs:8:14: 8:15 (#14) }]), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#13), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#13)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#13) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#15)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).18), ident: 0#15, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#15) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#15), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:14: 8:15 (#14) }), span: src/integrity/loops.rs:8:5: 10:6 (#13) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).36), rules: DefaultBlock, span: src/integrity/loops.rs:8:5: 10:6 (#13), targeted_by_break: false }, None, ForLoop, src/integrity/loops.rs:8:5: 8:15 (#13)), span: src/integrity/loops.rs:8:5: 10:6 (#13) } }], ForLoopDesugar)
[DEBUG] || Checking match expr: Expr {
    hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).39),
    kind: Call(
        Expr {
            hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).38),
            kind: Path(
                LangItem(
                    IntoIterIntoIter,
                    src/integrity/loops.rs:8:14: 8:15 (#12),
                ),
            ),
            span: src/integrity/loops.rs:8:14: 8:15 (#12),
        },
        [
            Expr {
                hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).11),
                kind: Path(
                    Resolved(
                        None,
                        Path {
                            span: src/integrity/loops.rs:8:14: 8:15 (#0),
                            res: Local(
                                HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10),
                            ),
                            segments: [
                                PathSegment {
                                    ident: v#0,
                                    hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).12),
                                    res: Local(
                                        HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10),
                                    ),
                                    args: None,
                                    infer_args: true,
                                },
                            ],
                        },
                    ),
                ),
                span: src/integrity/loops.rs:8:14: 8:15 (#0),
            },
        ],
    ),
    span: src/integrity/loops.rs:8:14: 8:15 (#12),
}
||match source: ForLoopDesugar
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), args: None, infer_args: true }] }))
[DEBUG] For loop ctx is Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Array(Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] Pat kind for match arm is Binding(
    BindingMode(
        No,
        Mut,
    ),
    HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28),
    iter#0,
    None,
)
[DEBUG] || Checking match expr: Expr {
    hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).39),
    kind: Call(
        Expr {
            hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).38),
            kind: Path(
                LangItem(
                    IntoIterIntoIter,
                    src/integrity/loops.rs:8:14: 8:15 (#14),
                ),
            ),
            span: src/integrity/loops.rs:8:14: 8:15 (#14),
        },
        [
            Expr {
                hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).11),
                kind: Path(
                    Resolved(
                        None,
                        Path {
                            span: src/integrity/loops.rs:8:14: 8:15 (#0),
                            res: Local(
                                HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).10),
                            ),
                            segments: [
                                PathSegment {
                                    ident: v#0,
                                    hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).12),
                                    res: Local(
                                        HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).10),
                                    ),
                                    args: None,
                                    infer_args: true,
                                },
                            ],
                        },
                    ),
                ),
                span: src/integrity/loops.rs:8:14: 8:15 (#0),
            },
        ],
    ),
    span: src/integrity/loops.rs:8:14: 8:15 (#14),
}
||match source: ForLoopDesugar
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).10)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).12), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).10)), args: None, infer_args: true }] }))
[DEBUG] For loop ctx is Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Array(Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] Pat kind for match arm is Binding(
    BindingMode(
        No,
        Mut,
    ),
    HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28),
    iter#0,
    None,
)
[DEBUG] > expr kind is Loop(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).35), kind: Expr(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).34), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:14: 8:15 (#12) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#11)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#11), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#13)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18), ident: 0#13, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#13) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:5: 10:6 (#11) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).36), rules: DefaultBlock, span: src/integrity/loops.rs:8:5: 10:6 (#11), targeted_by_break: false }, None, ForLoop, src/integrity/loops.rs:8:5: 8:15 (#11))
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Loop(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).35), kind: Expr(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).34), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#14))), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#14), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#14) }), span: src/integrity/loops.rs:8:14: 8:15 (#14) }]), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#13), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#13)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#13) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#15)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).18), ident: 0#15, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#15) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#15), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:14: 8:15 (#14) }), span: src/integrity/loops.rs:8:5: 10:6 (#13) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).36), rules: DefaultBlock, span: src/integrity/loops.rs:8:5: 10:6 (#13), targeted_by_break: false }, None, ForLoop, src/integrity/loops.rs:8:5: 8:15 (#13))
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:14: 8:15 (#12) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#11)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#11), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#13)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18), ident: 0#13, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#13) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar)
[DEBUG] > expr kind is Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#14))), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#14), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#14) }), span: src/integrity/loops.rs:8:14: 8:15 (#14) }]), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#13), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#13)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#13) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#15)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).18), ident: 0#15, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#15) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#15), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar)
[DEBUG] || Checking match expr: Expr {
    hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33),
    kind: Call(
        Expr {
            hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32),
            kind: Path(
                LangItem(
                    IteratorNext,
                    src/integrity/loops.rs:8:14: 8:15 (#12),
                ),
            ),
            span: src/integrity/loops.rs:8:14: 8:15 (#12),
        },
        [
            Expr {
                hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31),
                kind: AddrOf(
                    Ref,
                    Mut,
                    Expr {
                        hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30),
                        kind: Path(
                            Resolved(
                                None,
                                Path {
                                    span: src/integrity/loops.rs:8:14: 8:15 (#12),
                                    res: Local(
                                        HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28),
                                    ),
                                    segments: [
                                        PathSegment {
                                            ident: iter#0,
                                            hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29),
                                            res: Local(
                                                HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28),
                                            ),
                                            args: None,
                                            infer_args: true,
                                        },
                                    ],
                                },
                            ),
                        ),
                        span: src/integrity/loops.rs:8:14: 8:15 (#12),
                    },
                ),
                span: src/integrity/loops.rs:8:14: 8:15 (#12),
            },
        ],
    ),
    span: src/integrity/loops.rs:8:14: 8:15 (#12),
}
||match source: ForLoopDesugar
[DEBUG] > expr kind is AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] }))
[DEBUG] For loop ctx is Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Array(Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] Pat kind for match arm is Struct(
    LangItem(
        OptionNone,
        src/integrity/loops.rs:8:5: 10:6 (#11),
    ),
    [],
    false,
)
[DEBUG] Checking patkind struct...
[DEBUG] || Checking match expr: Expr {
    hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).33),
    kind: Call(
        Expr {
            hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).32),
            kind: Path(
                LangItem(
                    IteratorNext,
                    src/integrity/loops.rs:8:14: 8:15 (#14),
                ),
            ),
            span: src/integrity/loops.rs:8:14: 8:15 (#14),
        },
        [
            Expr {
                hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).31),
                kind: AddrOf(
                    Ref,
                    Mut,
                    Expr {
                        hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).30),
                        kind: Path(
                            Resolved(
                                None,
                                Path {
                                    span: src/integrity/loops.rs:8:14: 8:15 (#14),
                                    res: Local(
                                        HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28),
                                    ),
                                    segments: [
                                        PathSegment {
                                            ident: iter#0,
                                            hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).29),
                                            res: Local(
                                                HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28),
                                            ),
                                            args: None,
                                            infer_args: true,
                                        },
                                    ],
                                },
                            ),
                        ),
                        span: src/integrity/loops.rs:8:14: 8:15 (#14),
                    },
                ),
                span: src/integrity/loops.rs:8:14: 8:15 (#14),
            },
        ],
    ),
    span: src/integrity/loops.rs:8:14: 8:15 (#14),
}
||match source: ForLoopDesugar
[DEBUG] > expr kind is Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None)
[DEBUG] > expr kind is AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#14), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#14) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#14), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] }))
[DEBUG] Pat kind for match arm is Struct(
    LangItem(
        OptionSome,
        src/integrity/loops.rs:8:9: 8:10 (#13),
    ),
    [
        PatField {
            hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18),
            ident: 0#13,
            pat: Pat {
                hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13),
                kind: Binding(
                    BindingMode(
                        No,
                        Not,
                    ),
                    HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13),
                    i#0,
                    None,
                ),
                span: src/integrity/loops.rs:8:9: 8:10 (#0),
                default_binding_modes: true,
            },
            is_shorthand: false,
            span: src/integrity/loops.rs:8:9: 8:10 (#13),
        },
    ],
    false,
)
[DEBUG] For loop ctx is Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Array(Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] Checking patkind struct...
[DEBUG] Pat kind for match arm is Struct(
    LangItem(
        OptionNone,
        src/integrity/loops.rs:8:5: 10:6 (#13),
    ),
    [],
    false,
)
[DEBUG] Checking patkind struct...
[DEBUG] > expr kind is Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).14)) }, None)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Pat kind for match arm is Struct(
    LangItem(
        OptionSome,
        src/integrity/loops.rs:8:9: 8:10 (#15),
    ),
    [
        PatField {
            hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).18),
            ident: 0#15,
            pat: Pat {
                hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13),
                kind: Binding(
                    BindingMode(
                        No,
                        Not,
                    ),
                    HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13),
                    i#0,
                    None,
                ),
                span: src/integrity/loops.rs:8:9: 8:10 (#0),
                default_binding_modes: true,
            },
            is_shorthand: false,
            span: src/integrity/loops.rs:8:9: 8:10 (#15),
        },
    ],
    false,
)
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0))
[DEBUG] Checking patkind struct...
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0))
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:14: 8:15 (#12) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#11)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#11), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#13)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18), ident: 0#13, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#13) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar)
[DEBUG] > expr kind is Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#14))), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#14), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#14) }), span: src/integrity/loops.rs:8:14: 8:15 (#14) }]), span: src/integrity/loops.rs:8:14: 8:15 (#14) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#13), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#13)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#13) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#15)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).18), ident: 0#15, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#15) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#15), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar)
[DEBUG] || Checking match expr: Expr {
    hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33),
    kind: Call(
        Expr {
            hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32),
            kind: Path(
                LangItem(
                    IteratorNext,
                    src/integrity/loops.rs:8:14: 8:15 (#12),
                ),
            ),
            span: src/integrity/loops.rs:8:14: 8:15 (#12),
        },
        [
            Expr {
                hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31),
                kind: AddrOf(
                    Ref,
                    Mut,
                    Expr {
                        hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30),
                        kind: Path(
                            Resolved(
                                None,
                                Path {
                                    span: src/integrity/loops.rs:8:14: 8:15 (#12),
                                    res: Local(
                                        HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28),
                                    ),
                                    segments: [
                                        PathSegment {
                                            ident: iter#0,
                                            hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29),
                                            res: Local(
                                                HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28),
                                            ),
                                            args: None,
                                            infer_args: true,
                                        },
                                    ],
                                },
                            ),
                        ),
                        span: src/integrity/loops.rs:8:14: 8:15 (#12),
                    },
                ),
                span: src/integrity/loops.rs:8:14: 8:15 (#12),
            },
        ],
    ),
    span: src/integrity/loops.rs:8:14: 8:15 (#12),
}
||match source: ForLoopDesugar
[DEBUG] > expr kind is AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] }))
[DEBUG] For loop ctx is Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Array(Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] Pat kind for match arm is Struct(
    LangItem(
        OptionNone,
        src/integrity/loops.rs:8:5: 10:6 (#11),
    ),
    [],
    false,
)
[DEBUG] || Checking match expr: Expr {
    hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).33),
    kind: Call(
        Expr {
            hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).32),
            kind: Path(
                LangItem(
                    IteratorNext,
                    src/integrity/loops.rs:8:14: 8:15 (#14),
                ),
            ),
            span: src/integrity/loops.rs:8:14: 8:15 (#14),
        },
        [
            Expr {
                hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).31),
                kind: AddrOf(
                    Ref,
                    Mut,
                    Expr {
                        hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).30),
                        kind: Path(
                            Resolved(
                                None,
                                Path {
                                    span: src/integrity/loops.rs:8:14: 8:15 (#14),
                                    res: Local(
                                        HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28),
                                    ),
                                    segments: [
                                        PathSegment {
                                            ident: iter#0,
                                            hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).29),
                                            res: Local(
                                                HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28),
                                            ),
                                            args: None,
                                            infer_args: true,
                                        },
                                    ],
                                },
                            ),
                        ),
                        span: src/integrity/loops.rs:8:14: 8:15 (#14),
                    },
                ),
                span: src/integrity/loops.rs:8:14: 8:15 (#14),
            },
        ],
    ),
    span: src/integrity/loops.rs:8:14: 8:15 (#14),
}
||match source: ForLoopDesugar
[DEBUG] Checking patkind struct...
[DEBUG] > expr kind is Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None)
[DEBUG] > expr kind is AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#14), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#14) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#14), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] }))
[DEBUG] Pat kind for match arm is Struct(
    LangItem(
        OptionSome,
        src/integrity/loops.rs:8:9: 8:10 (#13),
    ),
    [
        PatField {
            hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18),
            ident: 0#13,
            pat: Pat {
                hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13),
                kind: Binding(
                    BindingMode(
                        No,
                        Not,
                    ),
                    HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13),
                    i#0,
                    None,
                ),
                span: src/integrity/loops.rs:8:9: 8:10 (#0),
                default_binding_modes: true,
            },
            is_shorthand: false,
            span: src/integrity/loops.rs:8:9: 8:10 (#13),
        },
    ],
    false,
)
[DEBUG] For loop ctx is Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Array(Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] Checking patkind struct...
[DEBUG] Pat kind for match arm is Struct(
    LangItem(
        OptionNone,
        src/integrity/loops.rs:8:5: 10:6 (#13),
    ),
    [],
    false,
)
[DEBUG] Checking patkind struct...
[DEBUG] > expr kind is Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).14)) }, None)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Pat kind for match arm is Struct(
    LangItem(
        OptionSome,
        src/integrity/loops.rs:8:9: 8:10 (#15),
    ),
    [
        PatField {
            hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).18),
            ident: 0#15,
            pat: Pat {
                hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13),
                kind: Binding(
                    BindingMode(
                        No,
                        Not,
                    ),
                    HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).13),
                    i#0,
                    None,
                ),
                span: src/integrity/loops.rs:8:9: 8:10 (#0),
                default_binding_modes: true,
            },
            is_shorthand: false,
            span: src/integrity/loops.rs:8:9: 8:10 (#15),
        },
    ],
    false,
)
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0))
[DEBUG] Checking patkind struct...
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/loops.rs:13:27: 13:27 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/loops.rs:13:1: 13:27 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/loops.rs:13:27: 13:27 (#0), span: src/integrity/loops.rs:13:25: 13:25 (#0) }, BodyId { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).24) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0))
[DEBUG] Trying to get type of function DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c396]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/loops.rs:13:27: 13:27 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/loops.rs:13:1: 13:27 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/loops.rs:13:27: 13:27 (#0), span: src/integrity/loops.rs:13:25: 13:25 (#0) }, BodyId { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).24) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4), x#0, None), span: src/integrity/loops.rs:15:9: 15:14 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/loops.rs:15:17: 15:18 (#0) }), span: src/integrity/loops.rs:15:17: 15:18 (#0) }), els: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).3), span: src/integrity/loops.rs:15:5: 15:19 (#0), source: Normal }), span: src/integrity/loops.rs:15:5: 15:19 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).5), kind: Loop(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).21), kind: If(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).9), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).6), kind: Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#15) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).16), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).14), kind: Semi(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).10), kind: Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0)), span: src/integrity/loops.rs:18:9: 18:14 (#0) }), span: src/integrity/loops.rs:18:9: 18:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).15), rules: DefaultBlock, span: src/integrity/loops.rs:17:25: 19:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:25: 19:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).20), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).18), kind: Expr(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).17), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).5)) }, None), span: src/integrity/loops.rs:17:5: 19:6 (#14) }), span: src/integrity/loops.rs:17:5: 19:6 (#14) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).19), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#14), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:5: 19:6 (#14) })), span: src/integrity/loops.rs:17:5: 19:6 (#14) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).22), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#14), targeted_by_break: false }, None, While, src/integrity/loops.rs:17:5: 17:24 (#14)), span: src/integrity/loops.rs:17:5: 19:6 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).23), rules: DefaultBlock, span: src/integrity/loops.rs:13:28: 25:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/loops.rs:15:17: 15:18 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4), x#0, None), span: src/integrity/loops.rs:15:9: 15:14 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/loops.rs:15:17: 15:18 (#0) }), span: src/integrity/loops.rs:15:17: 15:18 (#0) }), els: None, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).3), span: src/integrity/loops.rs:15:5: 15:19 (#0), source: Normal }), span: src/integrity/loops.rs:15:5: 15:19 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).5), kind: Loop(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).21), kind: If(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).9), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).6), kind: Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#17) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).16), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).14), kind: Semi(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).10), kind: Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0)), span: src/integrity/loops.rs:18:9: 18:14 (#0) }), span: src/integrity/loops.rs:18:9: 18:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).15), rules: DefaultBlock, span: src/integrity/loops.rs:17:25: 19:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:25: 19:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).20), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).18), kind: Expr(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).17), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).5)) }, None), span: src/integrity/loops.rs:17:5: 19:6 (#16) }), span: src/integrity/loops.rs:17:5: 19:6 (#16) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).19), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#16), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:5: 19:6 (#16) })), span: src/integrity/loops.rs:17:5: 19:6 (#16) }), hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).22), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#16), targeted_by_break: false }, None, While, src/integrity/loops.rs:17:5: 17:24 (#16)), span: src/integrity/loops.rs:17:5: 19:6 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).23), rules: DefaultBlock, span: src/integrity/loops.rs:13:28: 25:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Loop(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).21), kind: If(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).9), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).6), kind: Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#15) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).16), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).14), kind: Semi(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).10), kind: Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0)), span: src/integrity/loops.rs:18:9: 18:14 (#0) }), span: src/integrity/loops.rs:18:9: 18:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).15), rules: DefaultBlock, span: src/integrity/loops.rs:17:25: 19:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:25: 19:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).20), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).18), kind: Expr(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).17), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).5)) }, None), span: src/integrity/loops.rs:17:5: 19:6 (#14) }), span: src/integrity/loops.rs:17:5: 19:6 (#14) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).19), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#14), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:5: 19:6 (#14) })), span: src/integrity/loops.rs:17:5: 19:6 (#14) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).22), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#14), targeted_by_break: false }, None, While, src/integrity/loops.rs:17:5: 17:24 (#14))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/loops.rs:15:17: 15:18 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).9), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).6), kind: Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#15) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).16), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).14), kind: Semi(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).10), kind: Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0)), span: src/integrity/loops.rs:18:9: 18:14 (#0) }), span: src/integrity/loops.rs:18:9: 18:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).15), rules: DefaultBlock, span: src/integrity/loops.rs:17:25: 19:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:25: 19:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).20), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).18), kind: Expr(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).17), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).5)) }, None), span: src/integrity/loops.rs:17:5: 19:6 (#14) }), span: src/integrity/loops.rs:17:5: 19:6 (#14) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).19), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#14), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:5: 19:6 (#14) }))
[DEBUG] > expr kind is Loop(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).21), kind: If(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).9), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).6), kind: Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#17) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).16), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).14), kind: Semi(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).10), kind: Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0)), span: src/integrity/loops.rs:18:9: 18:14 (#0) }), span: src/integrity/loops.rs:18:9: 18:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).15), rules: DefaultBlock, span: src/integrity/loops.rs:17:25: 19:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:25: 19:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).20), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).18), kind: Expr(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).17), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).5)) }, None), span: src/integrity/loops.rs:17:5: 19:6 (#16) }), span: src/integrity/loops.rs:17:5: 19:6 (#16) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).19), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#16), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:5: 19:6 (#16) })), span: src/integrity/loops.rs:17:5: 19:6 (#16) }), hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).22), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#16), targeted_by_break: false }, None, While, src/integrity/loops.rs:17:5: 17:24 (#16))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).6), kind: Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) })
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).9), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).6), kind: Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#17) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).16), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).14), kind: Semi(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).10), kind: Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0)), span: src/integrity/loops.rs:18:9: 18:14 (#0) }), span: src/integrity/loops.rs:18:9: 18:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).15), rules: DefaultBlock, span: src/integrity/loops.rs:17:25: 19:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:25: 19:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).20), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).18), kind: Expr(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).17), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).5)) }, None), span: src/integrity/loops.rs:17:5: 19:6 (#16) }), span: src/integrity/loops.rs:17:5: 19:6 (#16) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).19), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#16), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:5: 19:6 (#16) }))
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).14), kind: Semi(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).10), kind: Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0)), span: src/integrity/loops.rs:18:9: 18:14 (#0) }), span: src/integrity/loops.rs:18:9: 18:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).15), rules: DefaultBlock, span: src/integrity/loops.rs:17:25: 19:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).6), kind: Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#0) })
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0))
[DEBUG] > expr kind is Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).14), kind: Semi(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).10), kind: Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0)), span: src/integrity/loops.rs:18:9: 18:14 (#0) }), span: src/integrity/loops.rs:18:9: 18:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).15), rules: DefaultBlock, span: src/integrity/loops.rs:17:25: 19:6 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) })
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).18), kind: Expr(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).17), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).5)) }, None), span: src/integrity/loops.rs:17:5: 19:6 (#14) }), span: src/integrity/loops.rs:17:5: 19:6 (#14) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).19), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#14), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0))
[DEBUG] > expr kind is Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).5)) }, None)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) })
[DEBUG] > expr kind is Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).5)) }, None)
[DEBUG] The last stmt is NOT an expr
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0))
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/unorganized.rs:1:1: 78:2 (#0), inject_use_span: src/integrity/unorganized.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:12 ~ a[c74b]::integrity::unorganized::{use#0}) }, ItemId { owner_id: DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation) }, ItemId { owner_id: DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition) }, ItemId { owner_id: DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn) }, ItemId { owner_id: DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr) }, ItemId { owner_id: DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut) }, ItemId { owner_id: DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct) }, ItemId { owner_id: DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct) }] })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) })
[DEBUG] Checking item Use(Path { span: src/integrity/unorganized.rs:1:5: 1:23 (#0), res: [Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range))], segments: [PathSegment { ident: core#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::integrity::unorganized::{use#0}).1), res: Def(Mod, DefId(2:0 ~ core[7d5a])), args: None, infer_args: false }, PathSegment { ident: range#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::integrity::unorganized::{use#0}).2), res: Def(Mod, DefId(2:10174 ~ core[7d5a]::range)), args: None, infer_args: false }, PathSegment { ident: Range#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::integrity::unorganized::{use#0}).3), res: Err, args: None, infer_args: false }] }, Single)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).18), kind: Expr(Expr { hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).17), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).5)) }, None), span: src/integrity/loops.rs:17:5: 19:6 (#16) }), span: src/integrity/loops.rs:17:5: 19:6 (#16) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).19), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#16), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:4:25: 4:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:4:1: 4:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:4:25: 4:25 (#0), span: src/integrity/unorganized.rs:4:23: 4:23 (#0) }, BodyId { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).16) })
[DEBUG] > expr kind is Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).5)) }, None)
[DEBUG] Preapring to check item fn body...
[DEBUG] The last stmt is NOT an expr
[DEBUG] Trying to get type of function DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation)
[DEBUG] > expr kind is Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c396]::integrity::loops::test_basic_while_loop).5)) }, None)
[DEBUG] Done checking item fn body
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/unorganized.rs:1:1: 78:2 (#0), inject_use_span: src/integrity/unorganized.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:12 ~ a[c396]::integrity::unorganized::{use#0}) }, ItemId { owner_id: DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation) }, ItemId { owner_id: DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition) }, ItemId { owner_id: DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn) }, ItemId { owner_id: DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr) }, ItemId { owner_id: DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut) }, ItemId { owner_id: DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct) }, ItemId { owner_id: DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct) }] })
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).7), x#0, None), span: src/integrity/unorganized.rs:6:9: 6:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).2), kind: Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).3), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:6:13: 6:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).4), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).5), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:6:13: 6:21 (#0) }, []), span: src/integrity/unorganized.rs:6:13: 6:23 (#0) }), els: None, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).6), span: src/integrity/unorganized.rs:6:5: 6:24 (#0), source: Normal }), span: src/integrity/unorganized.rs:6:5: 6:24 (#0) }, Stmt { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).8), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).14), kind: Binding(BindingMode(No, Not), HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).14), x#0, None), span: src/integrity/unorganized.rs:9:9: 9:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).9), kind: Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:9:13: 9:21 (#0) }, []), span: src/integrity/unorganized.rs:9:13: 9:23 (#0) }), els: None, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).13), span: src/integrity/unorganized.rs:9:5: 9:24 (#0), source: Normal }), span: src/integrity/unorganized.rs:9:5: 9:24 (#0) }], expr: None, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:4:26: 10:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] Checking item Use(Path { span: src/integrity/unorganized.rs:1:5: 1:23 (#0), res: [Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range))], segments: [PathSegment { ident: core#0, hir_id: HirId(DefId(0:12 ~ a[c396]::integrity::unorganized::{use#0}).1), res: Def(Mod, DefId(2:0 ~ core[7d5a])), args: None, infer_args: false }, PathSegment { ident: range#0, hir_id: HirId(DefId(0:12 ~ a[c396]::integrity::unorganized::{use#0}).2), res: Def(Mod, DefId(2:10174 ~ core[7d5a]::range)), args: None, infer_args: false }, PathSegment { ident: Range#0, hir_id: HirId(DefId(0:12 ~ a[c396]::integrity::unorganized::{use#0}).3), res: Err, args: None, infer_args: false }] }, Single)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:4:25: 4:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:4:1: 4:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:4:25: 4:25 (#0), span: src/integrity/unorganized.rs:4:23: 4:23 (#0) }, BodyId { hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).16) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).3), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:6:13: 6:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).4), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).5), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:6:13: 6:21 (#0) }, [])
[DEBUG] Trying to get type of function DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:6:13: 6:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).4), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).5), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:3 ~ b[3f10]::value)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).7), x#0, None), span: src/integrity/unorganized.rs:6:9: 6:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).2), kind: Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).3), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:6:13: 6:21 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).4), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).5), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:6:13: 6:21 (#0) }, []), span: src/integrity/unorganized.rs:6:13: 6:23 (#0) }), els: None, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).6), span: src/integrity/unorganized.rs:6:5: 6:24 (#0), source: Normal }), span: src/integrity/unorganized.rs:6:5: 6:24 (#0) }, Stmt { hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).8), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).14), kind: Binding(BindingMode(No, Not), HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).14), x#0, None), span: src/integrity/unorganized.rs:9:9: 9:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).9), kind: Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:9:13: 9:21 (#0) }, []), span: src/integrity/unorganized.rs:9:13: 9:23 (#0) }), els: None, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).13), span: src/integrity/unorganized.rs:9:5: 9:24 (#0), source: Normal }), span: src/integrity/unorganized.rs:9:5: 9:24 (#0) }], expr: None, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:4:26: 10:2 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:9:13: 9:21 (#0) }, [])
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:3 ~ b[3f10]::value)
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).3), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:6:13: 6:21 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).4), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).5), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:6:13: 6:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:6:13: 6:21 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).4), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).5), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:9:13: 9:21 (#0) }, [])
[DEBUG] Trying to get type of function DefId(25:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Checking a statement...
[DEBUG] Trying to get type of function DefId(21:3 ~ b[3f10]::value)
[DEBUG] Checking a let stmt!
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:12:19: 12:19 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:12:1: 12:19 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:12:19: 12:19 (#0), span: src/integrity/unorganized.rs:12:17: 12:17 (#0) }, BodyId { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).21) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:9:13: 9:21 (#0) }, [])
[DEBUG] Trying to get type of function DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(25:3 ~ b[3f10]::value)
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:9:13: 9:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c396]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12), kind: Binding(BindingMode(No, Not), HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12), x#0, None), span: src/integrity/unorganized.rs:14:9: 14:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).2), kind: Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:14:24: 14:25 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).3), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:13: 14:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).6), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:13: 14:21 (#0) }, []), span: src/integrity/unorganized.rs:14:13: 14:23 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).7), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).8), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:26: 14:34 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).9), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).10), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:26: 14:34 (#0) }, []), span: src/integrity/unorganized.rs:14:26: 14:36 (#0) }), span: src/integrity/unorganized.rs:14:13: 14:36 (#0) }), els: None, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).11), span: src/integrity/unorganized.rs:14:5: 14:37 (#0), source: Normal }), span: src/integrity/unorganized.rs:14:5: 14:37 (#0) }, Stmt { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).13), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).19), kind: Binding(BindingMode(No, Not), HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).19), y#0, None), span: src/integrity/unorganized.rs:17:9: 17:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).14), kind: Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:17:15: 17:16 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).16), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:17:17: 17:18 (#0) }), span: src/integrity/unorganized.rs:17:13: 17:18 (#0) }), els: None, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).18), span: src/integrity/unorganized.rs:17:5: 17:19 (#0), source: Normal }), span: src/integrity/unorganized.rs:17:5: 17:19 (#0) }], expr: None, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).20), rules: DefaultBlock, span: src/integrity/unorganized.rs:12:20: 18:2 (#0), targeted_by_break: false }, None)
[DEBUG] Trying to get type of function DefId(25:3 ~ b[3f10]::value)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:12:19: 12:19 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:12:1: 12:19 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:12:19: 12:19 (#0), span: src/integrity/unorganized.rs:12:17: 12:17 (#0) }, BodyId { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).21) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition)
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:14:24: 14:25 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).3), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:13: 14:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).6), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:13: 14:21 (#0) }, []), span: src/integrity/unorganized.rs:14:13: 14:23 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).7), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).8), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:26: 14:34 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).9), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).10), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:26: 14:34 (#0) }, []), span: src/integrity/unorganized.rs:14:26: 14:36 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:13: 14:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).6), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:13: 14:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:13: 14:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).6), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).8), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:26: 14:34 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).9), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).10), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:26: 14:34 (#0) }, [])
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).12), kind: Binding(BindingMode(No, Not), HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).12), x#0, None), span: src/integrity/unorganized.rs:14:9: 14:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).2), kind: Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:14:24: 14:25 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).3), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:13: 14:21 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).5), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).6), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:13: 14:21 (#0) }, []), span: src/integrity/unorganized.rs:14:13: 14:23 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).7), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).8), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:26: 14:34 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).9), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).10), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:26: 14:34 (#0) }, []), span: src/integrity/unorganized.rs:14:26: 14:36 (#0) }), span: src/integrity/unorganized.rs:14:13: 14:36 (#0) }), els: None, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).11), span: src/integrity/unorganized.rs:14:5: 14:37 (#0), source: Normal }), span: src/integrity/unorganized.rs:14:5: 14:37 (#0) }, Stmt { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).13), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).19), kind: Binding(BindingMode(No, Not), HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).19), y#0, None), span: src/integrity/unorganized.rs:17:9: 17:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).14), kind: Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:17:15: 17:16 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).16), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:17:17: 17:18 (#0) }), span: src/integrity/unorganized.rs:17:13: 17:18 (#0) }), els: None, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).18), span: src/integrity/unorganized.rs:17:5: 17:19 (#0), source: Normal }), span: src/integrity/unorganized.rs:17:5: 17:19 (#0) }], expr: None, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).20), rules: DefaultBlock, span: src/integrity/unorganized.rs:12:20: 18:2 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:26: 14:34 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).9), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).10), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Checking a statement...
[DEBUG] Trying to get type of function DefId(20:3 ~ c[3801]::value)
[DEBUG] Checking a let stmt!
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:14:24: 14:25 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).3), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:13: 14:21 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).5), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).6), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:13: 14:21 (#0) }, []), span: src/integrity/unorganized.rs:14:13: 14:23 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).7), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).8), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:26: 14:34 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).9), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).10), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:26: 14:34 (#0) }, []), span: src/integrity/unorganized.rs:14:26: 14:36 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:13: 14:21 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).5), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).6), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:13: 14:21 (#0) }, [])
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:17:15: 17:16 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).16), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:17:17: 17:18 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:13: 14:21 (#0), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).5), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).6), res: Def(Fn, DefId(25:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(25:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).8), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:26: 14:34 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).9), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).10), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:26: 14:34 (#0) }, [])
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:26: 14:34 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).9), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).10), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(24:3 ~ c[3801]::value)
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:17:15: 17:16 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).16), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:17:17: 17:18 (#0) })
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) })
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:17:15: 17:16 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).16), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:17:17: 17:18 (#0) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:20:25: 20:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:20:1: 20:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:20:25: 20:25 (#0), span: src/integrity/unorganized.rs:20:23: 20:23 (#0) }, BodyId { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).15) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).1), kind: Item(ItemId { owner_id: DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo) }), span: src/integrity/unorganized.rs:22:5: 24:6 (#0) }, Stmt { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).7), x#0, None), span: src/integrity/unorganized.rs:27:9: 27:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).3), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:27:13: 27:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).5), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:27:13: 27:16 (#0) }, []), span: src/integrity/unorganized.rs:27:13: 27:18 (#0) }), els: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).6), span: src/integrity/unorganized.rs:27:5: 27:19 (#0), source: Normal }), span: src/integrity/unorganized.rs:27:5: 27:19 (#0) }, Stmt { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).8), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).13), y#0, None), span: src/integrity/unorganized.rs:30:9: 30:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).9), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:30:13: 30:16 (#0) }, []), span: src/integrity/unorganized.rs:30:13: 30:18 (#0) }), els: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).12), span: src/integrity/unorganized.rs:30:5: 30:19 (#0), source: Normal }), span: src/integrity/unorganized.rs:30:5: 30:19 (#0) }], expr: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).14), rules: DefaultBlock, span: src/integrity/unorganized.rs:20:26: 31:2 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:17:15: 17:16 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).16), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:17:17: 17:18 (#0) })
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c396]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] }))
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:22:17: 22:20 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:22:17: 22:20 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:22:5: 22:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:22:20: 22:20 (#0), span: src/integrity/unorganized.rs:22:11: 22:11 (#0) }, BodyId { hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).3) })
[DEBUG] Done checking item fn body
[DEBUG] Preapring to check item fn body...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:20:25: 20:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:20:1: 20:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:20:25: 20:25 (#0), span: src/integrity/unorganized.rs:20:23: 20:23 (#0) }, BodyId { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).15) })
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).1), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) }), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) }), hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).2), rules: DefaultBlock, span: src/integrity/unorganized.rs:22:21: 24:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).1), kind: Item(ItemId { owner_id: DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo) }), span: src/integrity/unorganized.rs:22:5: 24:6 (#0) }, Stmt { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).7), x#0, None), span: src/integrity/unorganized.rs:27:9: 27:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).3), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:27:13: 27:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).5), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:27:13: 27:16 (#0) }, []), span: src/integrity/unorganized.rs:27:13: 27:18 (#0) }), els: None, hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).6), span: src/integrity/unorganized.rs:27:5: 27:19 (#0), source: Normal }), span: src/integrity/unorganized.rs:27:5: 27:19 (#0) }, Stmt { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).8), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).13), y#0, None), span: src/integrity/unorganized.rs:30:9: 30:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).9), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:30:13: 30:16 (#0) }, []), span: src/integrity/unorganized.rs:30:13: 30:18 (#0) }), els: None, hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).12), span: src/integrity/unorganized.rs:30:5: 30:19 (#0), source: Normal }), span: src/integrity/unorganized.rs:30:5: 30:19 (#0) }], expr: None, hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).14), rules: DefaultBlock, span: src/integrity/unorganized.rs:20:26: 31:2 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:27:13: 27:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).5), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:27:13: 27:16 (#0) }, [])
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:27:13: 27:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).5), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:22:17: 22:20 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:22:17: 22:20 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:22:5: 22:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:22:20: 22:20 (#0), span: src/integrity/unorganized.rs:22:11: 22:11 (#0) }, BodyId { hir_id: HirId(DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo).3) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:30:13: 30:16 (#0) }, [])
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo).1), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) }), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) }), hir_id: HirId(DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo).2), rules: DefaultBlock, span: src/integrity/unorganized.rs:22:21: 24:6 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is an expr
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Done checking item fn body
[DEBUG] Checking a let stmt!
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:30:13: 30:16 (#0) }, [])
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:27:13: 27:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).5), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:27:13: 27:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:27:13: 27:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).5), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] Done checking item fn body
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:22:17: 22:20 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:22:17: 22:20 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:22:5: 22:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:22:20: 22:20 (#0), span: src/integrity/unorganized.rs:22:11: 22:11 (#0) }, BodyId { hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).3) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:30:13: 30:16 (#0) }, [])
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).1), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) }), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) }), hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).2), rules: DefaultBlock, span: src/integrity/unorganized.rs:22:21: 24:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:30:13: 30:16 (#0) }, [])
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:33:29: 33:29 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:33:1: 33:29 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:33:29: 33:29 (#0), span: src/integrity/unorganized.rs:33:27: 33:27 (#0) }, BodyId { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).27) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c396]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] Trying to get type of function DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr)
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:22:17: 22:20 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:22:17: 22:20 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:22:5: 22:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:22:20: 22:20 (#0), span: src/integrity/unorganized.rs:22:11: 22:11 (#0) }, BodyId { hir_id: HirId(DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo).1), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) }), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) }), hir_id: HirId(DefId(0:46 ~ a[c396]::integrity::unorganized::test_nested_item_fn::boo).2), rules: DefaultBlock, span: src/integrity/unorganized.rs:22:21: 24:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20), y#0, None), span: src/integrity/unorganized.rs:35:9: 35:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).2), kind: If(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).12), kind: DropTemps(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/integrity/unorganized.rs:35:29: 35:31 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, []), span: src/integrity/unorganized.rs:35:16: 35:28 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, []), span: src/integrity/unorganized.rs:35:32: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#16) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:45: 35:50 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:35:45: 35:50 (#0) }, Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:56: 35:61 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:35:56: 35:61 (#0) })), span: src/integrity/unorganized.rs:35:13: 35:61 (#0) }), els: None, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).19), span: src/integrity/unorganized.rs:35:5: 35:62 (#0), source: Normal }), span: src/integrity/unorganized.rs:35:5: 35:62 (#0) }, Stmt { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).21), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).25), kind: Binding(BindingMode(No, Not), HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).25), z#0, None), span: src/integrity/unorganized.rs:38:9: 38:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).22), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:38:13: 38:14 (#0), res: Local(HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:38:13: 38:14 (#0) }), els: None, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).24), span: src/integrity/unorganized.rs:38:5: 38:15 (#0), source: Normal }), span: src/integrity/unorganized.rs:38:5: 38:15 (#0) }], expr: None, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).26), rules: DefaultBlock, span: src/integrity/unorganized.rs:33:30: 39:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:33:29: 33:29 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:33:1: 33:29 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:33:29: 33:29 (#0), span: src/integrity/unorganized.rs:33:27: 33:27 (#0) }, BodyId { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).27) })
[DEBUG] Checking a statement...
[DEBUG] Preapring to check item fn body...
[DEBUG] Checking a let stmt!
[DEBUG] Trying to get type of function DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr)
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).12), kind: DropTemps(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/integrity/unorganized.rs:35:29: 35:31 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, []), span: src/integrity/unorganized.rs:35:16: 35:28 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, []), span: src/integrity/unorganized.rs:35:32: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#16) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:45: 35:50 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:35:45: 35:50 (#0) }, Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:56: 35:61 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:35:56: 35:61 (#0) }))
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).20), y#0, None), span: src/integrity/unorganized.rs:35:9: 35:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).2), kind: If(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).12), kind: DropTemps(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/integrity/unorganized.rs:35:29: 35:31 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, []), span: src/integrity/unorganized.rs:35:16: 35:28 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, []), span: src/integrity/unorganized.rs:35:32: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#18) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:45: 35:50 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:35:45: 35:50 (#0) }, Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:56: 35:61 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:35:56: 35:61 (#0) })), span: src/integrity/unorganized.rs:35:13: 35:61 (#0) }), els: None, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).19), span: src/integrity/unorganized.rs:35:5: 35:62 (#0), source: Normal }), span: src/integrity/unorganized.rs:35:5: 35:62 (#0) }, Stmt { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).21), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).25), kind: Binding(BindingMode(No, Not), HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).25), z#0, None), span: src/integrity/unorganized.rs:38:9: 38:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).22), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:38:13: 38:14 (#0), res: Local(HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).20)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:38:13: 38:14 (#0) }), els: None, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).24), span: src/integrity/unorganized.rs:38:5: 38:15 (#0), source: Normal }), span: src/integrity/unorganized.rs:38:5: 38:15 (#0) }], expr: None, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).26), rules: DefaultBlock, span: src/integrity/unorganized.rs:33:30: 39:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/integrity/unorganized.rs:35:29: 35:31 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, []), span: src/integrity/unorganized.rs:35:16: 35:28 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, []), span: src/integrity/unorganized.rs:35:32: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#0) })
[DEBUG] > expr kind is Binary(Spanned { node: And, span: src/integrity/unorganized.rs:35:29: 35:31 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, []), span: src/integrity/unorganized.rs:35:16: 35:28 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, []), span: src/integrity/unorganized.rs:35:32: 35:44 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).12), kind: DropTemps(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/integrity/unorganized.rs:35:29: 35:31 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, []), span: src/integrity/unorganized.rs:35:16: 35:28 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, []), span: src/integrity/unorganized.rs:35:32: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#18) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:45: 35:50 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:35:45: 35:50 (#0) }, Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:56: 35:61 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:35:56: 35:61 (#0) }))
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/integrity/unorganized.rs:35:29: 35:31 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, []), span: src/integrity/unorganized.rs:35:16: 35:28 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, []), span: src/integrity/unorganized.rs:35:32: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:45: 35:50 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) })
[DEBUG] > expr kind is Binary(Spanned { node: And, span: src/integrity/unorganized.rs:35:29: 35:31 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, []), span: src/integrity/unorganized.rs:35:16: 35:28 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, []), span: src/integrity/unorganized.rs:35:32: 35:44 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:56: 35:61 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, [])
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Checking a statement...
[DEBUG] Trying to get type of function DefId(24:4 ~ c[3801]::boolean)
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:38:13: 38:14 (#0), res: Local(HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Trying to get type of function DefId(25:4 ~ b[3f10]::boolean)
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:45: 35:50 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:38:13: 38:14 (#0), res: Local(HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:56: 35:61 (#0), targeted_by_break: false }, None)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:41:21: 41:21 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:41:1: 41:21 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:41:21: 41:21 (#0), span: src/integrity/unorganized.rs:41:19: 41:19 (#0) }, BodyId { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).32) })
[DEBUG] The last stmt is an expr
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) })
[DEBUG] Trying to get type of function DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:38:13: 38:14 (#0), res: Local(HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).20)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:38:13: 38:14 (#0), res: Local(HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:16 ~ a[c396]::integrity::unorganized::test_if_else_guard_expr).20)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:41:21: 41:21 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:41:1: 41:21 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:41:21: 41:21 (#0), span: src/integrity/unorganized.rs:41:19: 41:19 (#0) }, BodyId { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).32) })
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).1), kind: Item(ItemId { owner_id: DefId(0:18 ~ a[c74b]::integrity::unorganized::test_assign_mut::{use#0}) }), span: src/integrity/unorganized.rs:42:5: 42:33 (#0) }, Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5), x#0, None), span: src/integrity/unorganized.rs:45:9: 45:14 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).3), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:45:17: 45:18 (#0) }), span: src/integrity/unorganized.rs:45:17: 45:18 (#0) }), els: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).4), span: src/integrity/unorganized.rs:45:5: 45:19 (#0), source: Normal }), span: src/integrity/unorganized.rs:45:5: 45:19 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).6), kind: If(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).16), kind: DropTemps(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).7), kind: Binary(Spanned { node: Or, span: src/integrity/unorganized.rs:47:21: 47:23 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).8), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, []), span: src/integrity/unorganized.rs:47:8: 47:20 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).12), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, []), span: src/integrity/unorganized.rs:47:24: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#17) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).23), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).21), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).17), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0)), span: src/integrity/unorganized.rs:48:9: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:9: 48:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).22), rules: DefaultBlock, span: src/integrity/unorganized.rs:47:37: 49:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:47:37: 49:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).24), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).29), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).25), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0)), span: src/integrity/unorganized.rs:50:9: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:9: 50:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).30), rules: DefaultBlock, span: src/integrity/unorganized.rs:49:12: 51:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:49:12: 51:6 (#0) })), span: src/integrity/unorganized.rs:47:5: 51:6 (#0) }), hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).31), rules: DefaultBlock, span: src/integrity/unorganized.rs:41:22: 52:2 (#0), targeted_by_break: false }, None)
[DEBUG] Preapring to check item fn body...
[DEBUG] Checking a statement...
[DEBUG] Trying to get type of function DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut)
[DEBUG] Checking item Use(Path { span: src/integrity/unorganized.rs:42:9: 42:32 (#0), res: [Def(Trait, DefId(2:8706 ~ core[7d5a]::iter::traits::collect::IntoIterator))], segments: [PathSegment { ident: std#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::integrity::unorganized::test_assign_mut::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::integrity::unorganized::test_assign_mut::{use#0}).2), res: Def(Mod, DefId(2:5658 ~ core[7d5a]::iter)), args: None, infer_args: false }, PathSegment { ident: IntoIterator#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::integrity::unorganized::test_assign_mut::{use#0}).3), res: Err, args: None, infer_args: false }] }, Single)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:45:17: 45:18 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).1), kind: Item(ItemId { owner_id: DefId(0:18 ~ a[c396]::integrity::unorganized::test_assign_mut::{use#0}) }), span: src/integrity/unorganized.rs:42:5: 42:33 (#0) }, Stmt { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5), x#0, None), span: src/integrity/unorganized.rs:45:9: 45:14 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).3), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:45:17: 45:18 (#0) }), span: src/integrity/unorganized.rs:45:17: 45:18 (#0) }), els: None, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).4), span: src/integrity/unorganized.rs:45:5: 45:19 (#0), source: Normal }), span: src/integrity/unorganized.rs:45:5: 45:19 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).6), kind: If(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).16), kind: DropTemps(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).7), kind: Binary(Spanned { node: Or, span: src/integrity/unorganized.rs:47:21: 47:23 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).8), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, []), span: src/integrity/unorganized.rs:47:8: 47:20 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).12), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, []), span: src/integrity/unorganized.rs:47:24: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#19) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).23), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).21), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).17), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0)), span: src/integrity/unorganized.rs:48:9: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:9: 48:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).22), rules: DefaultBlock, span: src/integrity/unorganized.rs:47:37: 49:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:47:37: 49:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).24), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).29), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).25), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0)), span: src/integrity/unorganized.rs:50:9: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:9: 50:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).30), rules: DefaultBlock, span: src/integrity/unorganized.rs:49:12: 51:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:49:12: 51:6 (#0) })), span: src/integrity/unorganized.rs:47:5: 51:6 (#0) }), hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).31), rules: DefaultBlock, span: src/integrity/unorganized.rs:41:22: 52:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).16), kind: DropTemps(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).7), kind: Binary(Spanned { node: Or, span: src/integrity/unorganized.rs:47:21: 47:23 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).8), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, []), span: src/integrity/unorganized.rs:47:8: 47:20 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).12), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, []), span: src/integrity/unorganized.rs:47:24: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#17) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).23), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).21), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).17), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0)), span: src/integrity/unorganized.rs:48:9: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:9: 48:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).22), rules: DefaultBlock, span: src/integrity/unorganized.rs:47:37: 49:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:47:37: 49:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).24), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).29), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).25), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0)), span: src/integrity/unorganized.rs:50:9: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:9: 50:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).30), rules: DefaultBlock, span: src/integrity/unorganized.rs:49:12: 51:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:49:12: 51:6 (#0) }))
[DEBUG] Checking item Use(Path { span: src/integrity/unorganized.rs:42:9: 42:32 (#0), res: [Def(Trait, DefId(2:8706 ~ core[7d5a]::iter::traits::collect::IntoIterator))], segments: [PathSegment { ident: std#0, hir_id: HirId(DefId(0:18 ~ a[c396]::integrity::unorganized::test_assign_mut::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: iter#0, hir_id: HirId(DefId(0:18 ~ a[c396]::integrity::unorganized::test_assign_mut::{use#0}).2), res: Def(Mod, DefId(2:5658 ~ core[7d5a]::iter)), args: None, infer_args: false }, PathSegment { ident: IntoIterator#0, hir_id: HirId(DefId(0:18 ~ a[c396]::integrity::unorganized::test_assign_mut::{use#0}).3), res: Err, args: None, infer_args: false }] }, Single)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).7), kind: Binary(Spanned { node: Or, span: src/integrity/unorganized.rs:47:21: 47:23 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).8), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, []), span: src/integrity/unorganized.rs:47:8: 47:20 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).12), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, []), span: src/integrity/unorganized.rs:47:24: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:45:17: 45:18 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Binary(Spanned { node: Or, span: src/integrity/unorganized.rs:47:21: 47:23 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).8), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, []), span: src/integrity/unorganized.rs:47:8: 47:20 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).12), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, []), span: src/integrity/unorganized.rs:47:24: 47:36 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).16), kind: DropTemps(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).7), kind: Binary(Spanned { node: Or, span: src/integrity/unorganized.rs:47:21: 47:23 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).8), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, []), span: src/integrity/unorganized.rs:47:8: 47:20 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).12), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, []), span: src/integrity/unorganized.rs:47:24: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#19) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).23), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).21), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).17), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0)), span: src/integrity/unorganized.rs:48:9: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:9: 48:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).22), rules: DefaultBlock, span: src/integrity/unorganized.rs:47:37: 49:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:47:37: 49:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).24), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).29), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).25), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0)), span: src/integrity/unorganized.rs:50:9: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:9: 50:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).30), rules: DefaultBlock, span: src/integrity/unorganized.rs:49:12: 51:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:49:12: 51:6 (#0) }))
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).21), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).17), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0)), span: src/integrity/unorganized.rs:48:9: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:9: 48:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).22), rules: DefaultBlock, span: src/integrity/unorganized.rs:47:37: 49:6 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).7), kind: Binary(Spanned { node: Or, span: src/integrity/unorganized.rs:47:21: 47:23 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).8), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, []), span: src/integrity/unorganized.rs:47:8: 47:20 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).12), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, []), span: src/integrity/unorganized.rs:47:24: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#0) })
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0))
[DEBUG] > expr kind is Binary(Spanned { node: Or, span: src/integrity/unorganized.rs:47:21: 47:23 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).8), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, []), span: src/integrity/unorganized.rs:47:8: 47:20 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).12), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, []), span: src/integrity/unorganized.rs:47:24: 47:36 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, [])
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(24:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0))
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(25:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(25:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(25:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).29), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).25), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0)), span: src/integrity/unorganized.rs:50:9: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:9: 50:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).30), rules: DefaultBlock, span: src/integrity/unorganized.rs:49:12: 51:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).21), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).17), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0)), span: src/integrity/unorganized.rs:48:9: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:9: 48:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).22), rules: DefaultBlock, span: src/integrity/unorganized.rs:47:37: 49:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0))
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking item Use(Path { span: src/integrity/unorganized.rs:42:9: 42:32 (#0), res: [Def(Trait, DefId(2:8706 ~ core[7d5a]::iter::traits::collect::IntoIterator))], segments: [PathSegment { ident: std#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::integrity::unorganized::test_assign_mut::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::integrity::unorganized::test_assign_mut::{use#0}).2), res: Def(Mod, DefId(2:5658 ~ core[7d5a]::iter)), args: None, infer_args: false }, PathSegment { ident: IntoIterator#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::integrity::unorganized::test_assign_mut::{use#0}).3), res: Err, args: None, infer_args: false }] }, Single)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).29), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).25), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0)), span: src/integrity/unorganized.rs:50:9: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:9: 50:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).30), rules: DefaultBlock, span: src/integrity/unorganized.rs:49:12: 51:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:54:17: 54:17 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:54:1: 54:17 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:54:17: 54:17 (#0), span: src/integrity/unorganized.rs:54:15: 54:15 (#0) }, BodyId { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).12) })
[DEBUG] Checking a statement...
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct)
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).1), kind: Item(ItemId { owner_id: DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo) }), span: src/integrity/unorganized.rs:55:5: 59:6 (#0) }, Stmt { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).10), kind: Binding(BindingMode(No, Not), HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).10), boo#0, None), span: src/integrity/unorganized.rs:62:9: 62:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).3), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:62:15: 62:18 (#0), res: Def(Struct, DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).4), res: Def(Struct, DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }, span: src/integrity/unorganized.rs:62:21: 62:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }, span: src/integrity/unorganized.rs:62:27: 62:34 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:62:15: 62:36 (#0) }), els: None, hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).9), span: src/integrity/unorganized.rs:62:5: 62:37 (#0), source: Normal }), span: src/integrity/unorganized.rs:62:5: 62:37 (#0) }], expr: None, hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).11), rules: DefaultBlock, span: src/integrity/unorganized.rs:54:18: 63:2 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0))
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c396]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/unorganized.rs:57:9: 57:15 (#0), vis_span: src/integrity/unorganized.rs:57:9: 57:9 (#0), ident: x#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).3), def_id: DefId(0:47 ~ a[c74b]::integrity::unorganized::test_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:57:12: 57:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:57:12: 57:15 (#0) } }, FieldDef { span: src/integrity/unorganized.rs:58:9: 58:16 (#0), vis_span: src/integrity/unorganized.rs:58:9: 58:9 (#0), ident: y#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).6), def_id: DefId(0:21 ~ a[c74b]::integrity::unorganized::test_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:58:12: 58:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:58:12: 58:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:55:15: 55:15 (#0), span: src/integrity/unorganized.rs:55:15: 55:15 (#0) })
[DEBUG] Checking item Use(Path { span: src/integrity/unorganized.rs:42:9: 42:32 (#0), res: [Def(Trait, DefId(2:8706 ~ core[7d5a]::iter::traits::collect::IntoIterator))], segments: [PathSegment { ident: std#0, hir_id: HirId(DefId(0:18 ~ a[c396]::integrity::unorganized::test_assign_mut::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: iter#0, hir_id: HirId(DefId(0:18 ~ a[c396]::integrity::unorganized::test_assign_mut::{use#0}).2), res: Def(Mod, DefId(2:5658 ~ core[7d5a]::iter)), args: None, infer_args: false }, PathSegment { ident: IntoIterator#0, hir_id: HirId(DefId(0:18 ~ a[c396]::integrity::unorganized::test_assign_mut::{use#0}).3), res: Err, args: None, infer_args: false }] }, Single)
[DEBUG] checking struct ...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:54:17: 54:17 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:54:1: 54:17 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:54:17: 54:17 (#0), span: src/integrity/unorganized.rs:54:15: 54:15 (#0) }, BodyId { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).12) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).1), kind: Item(ItemId { owner_id: DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo) }), span: src/integrity/unorganized.rs:55:5: 59:6 (#0) }, Stmt { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).10), kind: Binding(BindingMode(No, Not), HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).10), boo#0, None), span: src/integrity/unorganized.rs:62:9: 62:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).3), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:62:15: 62:18 (#0), res: Def(Struct, DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).4), res: Def(Struct, DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }, span: src/integrity/unorganized.rs:62:21: 62:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }, span: src/integrity/unorganized.rs:62:27: 62:34 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:62:15: 62:36 (#0) }), els: None, hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).9), span: src/integrity/unorganized.rs:62:5: 62:37 (#0), source: Normal }), span: src/integrity/unorganized.rs:62:5: 62:37 (#0) }], expr: None, hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).11), rules: DefaultBlock, span: src/integrity/unorganized.rs:54:18: 63:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/unorganized.rs:57:9: 57:15 (#0), vis_span: src/integrity/unorganized.rs:57:9: 57:9 (#0), ident: x#0, hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo).3), def_id: DefId(0:47 ~ a[c396]::integrity::unorganized::test_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:57:12: 57:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:57:12: 57:15 (#0) } }, FieldDef { span: src/integrity/unorganized.rs:58:9: 58:16 (#0), vis_span: src/integrity/unorganized.rs:58:9: 58:9 (#0), ident: y#0, hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo).6), def_id: DefId(0:21 ~ a[c396]::integrity::unorganized::test_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:58:12: 58:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:58:12: 58:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:55:15: 55:15 (#0), span: src/integrity/unorganized.rs:55:15: 55:15 (#0) })
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:62:15: 62:18 (#0), res: Def(Struct, DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).4), res: Def(Struct, DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }, span: src/integrity/unorganized.rs:62:21: 62:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }, span: src/integrity/unorganized.rs:62:27: 62:34 (#0), is_shorthand: false }], None)
[DEBUG] checking struct ...
[DEBUG] Trying to get type of adt (struct) DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:62:15: 62:18 (#0), res: Def(Struct, DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).4), res: Def(Struct, DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }, span: src/integrity/unorganized.rs:62:21: 62:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }, span: src/integrity/unorganized.rs:62:27: 62:34 (#0), is_shorthand: false }], None)
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:62:15: 62:18 (#0), res: Def(Struct, DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).4), res: Def(Struct, DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }, span: src/integrity/unorganized.rs:62:21: 62:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }, span: src/integrity/unorganized.rs:62:27: 62:34 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo)
[DEBUG] Trying to get type of adt (struct) DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Done checking item fn body
[DEBUG] Checking a let stmt!
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/unorganized.rs:57:9: 57:15 (#0), vis_span: src/integrity/unorganized.rs:57:9: 57:9 (#0), ident: x#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).3), def_id: DefId(0:47 ~ a[c74b]::integrity::unorganized::test_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:57:12: 57:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:57:12: 57:15 (#0) } }, FieldDef { span: src/integrity/unorganized.rs:58:9: 58:16 (#0), vis_span: src/integrity/unorganized.rs:58:9: 58:9 (#0), ident: y#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).6), def_id: DefId(0:21 ~ a[c74b]::integrity::unorganized::test_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:58:12: 58:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:58:12: 58:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:55:15: 55:15 (#0), span: src/integrity/unorganized.rs:55:15: 55:15 (#0) })
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:62:15: 62:18 (#0), res: Def(Struct, DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).4), res: Def(Struct, DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }, span: src/integrity/unorganized.rs:62:21: 62:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c396]::integrity::unorganized::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }, span: src/integrity/unorganized.rs:62:27: 62:34 (#0), is_shorthand: false }], None)
[DEBUG] checking struct ...
[DEBUG] Trying to get type of adt (struct) DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:65:20: 65:20 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:65:1: 65:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:65:20: 65:20 (#0), span: src/integrity/unorganized.rs:65:18: 65:18 (#0) }, BodyId { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).28) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct)
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/unorganized.rs:57:9: 57:15 (#0), vis_span: src/integrity/unorganized.rs:57:9: 57:9 (#0), ident: x#0, hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo).3), def_id: DefId(0:47 ~ a[c396]::integrity::unorganized::test_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:57:12: 57:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:57:12: 57:15 (#0) } }, FieldDef { span: src/integrity/unorganized.rs:58:9: 58:16 (#0), vis_span: src/integrity/unorganized.rs:58:9: 58:9 (#0), ident: y#0, hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo).6), def_id: DefId(0:21 ~ a[c396]::integrity::unorganized::test_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:58:12: 58:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:20 ~ a[c396]::integrity::unorganized::test_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:58:12: 58:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:55:15: 55:15 (#0), span: src/integrity/unorganized.rs:55:15: 55:15 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:65:20: 65:20 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:65:1: 65:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:65:20: 65:20 (#0), span: src/integrity/unorganized.rs:65:18: 65:18 (#0) }, BodyId { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).28) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).1), kind: Item(ItemId { owner_id: DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo) }), span: src/integrity/unorganized.rs:66:5: 70:6 (#0) }, Stmt { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).26), kind: Binding(BindingMode(No, Not), HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).26), boo#0, None), span: src/integrity/unorganized.rs:73:9: 73:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).3), kind: If(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) }), span: src/integrity/unorganized.rs:73:18: 73:30 (#18) }, Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:73:31: 75:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:75:12: 77:6 (#0) })), span: src/integrity/unorganized.rs:73:15: 77:6 (#0) }), els: None, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).25), span: src/integrity/unorganized.rs:73:5: 77:7 (#0), source: Normal }), span: src/integrity/unorganized.rs:73:5: 77:7 (#0) }], expr: None, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).27), rules: DefaultBlock, span: src/integrity/unorganized.rs:65:21: 78:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/unorganized.rs:68:9: 68:15 (#0), vis_span: src/integrity/unorganized.rs:68:9: 68:9 (#0), ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).3), def_id: DefId(0:48 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:68:12: 68:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:68:12: 68:15 (#0) } }, FieldDef { span: src/integrity/unorganized.rs:69:9: 69:16 (#0), vis_span: src/integrity/unorganized.rs:69:9: 69:9 (#0), ident: y#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).6), def_id: DefId(0:24 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:69:12: 69:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:69:12: 69:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:66:15: 66:15 (#0), span: src/integrity/unorganized.rs:66:15: 66:15 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).1), kind: Item(ItemId { owner_id: DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo) }), span: src/integrity/unorganized.rs:66:5: 70:6 (#0) }, Stmt { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).26), kind: Binding(BindingMode(No, Not), HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).26), boo#0, None), span: src/integrity/unorganized.rs:73:9: 73:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).3), kind: If(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) }), span: src/integrity/unorganized.rs:73:18: 73:30 (#20) }, Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:73:31: 75:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:75:12: 77:6 (#0) })), span: src/integrity/unorganized.rs:73:15: 77:6 (#0) }), els: None, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).25), span: src/integrity/unorganized.rs:73:5: 77:7 (#0), source: Normal }), span: src/integrity/unorganized.rs:73:5: 77:7 (#0) }], expr: None, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).27), rules: DefaultBlock, span: src/integrity/unorganized.rs:65:21: 78:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a let stmt!
[DEBUG] Checking a statement...
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/unorganized.rs:68:9: 68:15 (#0), vis_span: src/integrity/unorganized.rs:68:9: 68:9 (#0), ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo).3), def_id: DefId(0:48 ~ a[c396]::integrity::unorganized::test_if_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:68:12: 68:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:68:12: 68:15 (#0) } }, FieldDef { span: src/integrity/unorganized.rs:69:9: 69:16 (#0), vis_span: src/integrity/unorganized.rs:69:9: 69:9 (#0), ident: y#0, hir_id: HirId(DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo).6), def_id: DefId(0:24 ~ a[c396]::integrity::unorganized::test_if_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:69:12: 69:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:69:12: 69:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:66:15: 66:15 (#0), span: src/integrity/unorganized.rs:66:15: 66:15 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) }), span: src/integrity/unorganized.rs:73:18: 73:30 (#18) }, Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:73:31: 75:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:75:12: 77:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) }), span: src/integrity/unorganized.rs:73:18: 73:30 (#20) }, Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:73:31: 75:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:75:12: 77:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of function DefId(24:4 ~ c[3801]::boolean)
[DEBUG] Trying to get type of adt (struct) DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) })
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None)
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) })
[DEBUG] Trying to get type of adt (struct) DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) }), span: src/integrity/unorganized.rs:73:18: 73:30 (#18) }, Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:73:31: 75:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:75:12: 77:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, [])
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) }), span: src/integrity/unorganized.rs:73:18: 73:30 (#20) }, Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:73:31: 75:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:75:12: 77:6 (#0) }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, [])
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(24:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(24:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None)
[DEBUG] Trying to get type of adt (struct) DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) })
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c396]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) })
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/unorganized.rs:68:9: 68:15 (#0), vis_span: src/integrity/unorganized.rs:68:9: 68:9 (#0), ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).3), def_id: DefId(0:48 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:68:12: 68:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:68:12: 68:15 (#0) } }, FieldDef { span: src/integrity/unorganized.rs:69:9: 69:16 (#0), vis_span: src/integrity/unorganized.rs:69:9: 69:9 (#0), ident: y#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).6), def_id: DefId(0:24 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:69:12: 69:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:69:12: 69:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:66:15: 66:15 (#0), span: src/integrity/unorganized.rs:66:15: 66:15 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) })
[DEBUG] checking struct ...
[DEBUG] Done checking item fn body
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/methods.rs:1:1: 17:2 (#0), inject_use_span: src/integrity/methods.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:26 ~ a[c74b]::integrity::methods::Foo) }, ItemId { owner_id: DefId(0:28 ~ a[c74b]::integrity::methods::{impl#0}) }, ItemId { owner_id: DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method) }] })
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/unorganized.rs:68:9: 68:15 (#0), vis_span: src/integrity/unorganized.rs:68:9: 68:9 (#0), ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo).3), def_id: DefId(0:48 ~ a[c396]::integrity::unorganized::test_if_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:68:12: 68:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:68:12: 68:15 (#0) } }, FieldDef { span: src/integrity/unorganized.rs:69:9: 69:16 (#0), vis_span: src/integrity/unorganized.rs:69:9: 69:9 (#0), ident: y#0, hir_id: HirId(DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo).6), def_id: DefId(0:24 ~ a[c396]::integrity::unorganized::test_if_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:69:12: 69:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:23 ~ a[c396]::integrity::unorganized::test_if_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:69:12: 69:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:66:15: 66:15 (#0), span: src/integrity/unorganized.rs:66:15: 66:15 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/methods.rs:1:13: 1:19 (#0), vis_span: src/integrity/methods.rs:1:13: 1:13 (#0), ident: y#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::integrity::methods::Foo).3), def_id: DefId(0:27 ~ a[c74b]::integrity::methods::Foo::y), ty: Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::integrity::methods::Foo).1), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:1:16: 1:19 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::integrity::methods::Foo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/methods.rs:1:16: 1:19 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/methods.rs:1:11: 1:11 (#0), span: src/integrity/methods.rs:1:11: 1:11 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/methods.rs:1:1: 17:2 (#0), inject_use_span: src/integrity/methods.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:26 ~ a[c396]::integrity::methods::Foo) }, ItemId { owner_id: DefId(0:28 ~ a[c396]::integrity::methods::{impl#0}) }, ItemId { owner_id: DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method) }] })
[DEBUG] Checking item Impl(Impl { constness: NotConst, safety: Safe, polarity: "positive", defaultness: Final, defaultness_span: None, generics: Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/methods.rs:3:9: 3:9 (#0), span: src/integrity/methods.rs:3:5: 3:5 (#0) }, of_trait: None, self_ty: Ty { hir_id: HirId(DefId(0:28 ~ a[c74b]::integrity::methods::{impl#0}).1), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:3:6: 3:9 (#0), res: Def(Struct, DefId(0:26 ~ a[c74b]::integrity::methods::Foo)), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:28 ~ a[c74b]::integrity::methods::{impl#0}).2), res: Def(Struct, DefId(0:26 ~ a[c74b]::integrity::methods::Foo)), args: None, infer_args: false }] })), span: src/integrity/methods.rs:3:6: 3:9 (#0) }, items: [ImplItemRef { id: ImplItemId { owner_id: DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar) }, ident: bar#0, kind: Fn { has_self: true }, span: src/integrity/methods.rs:5:5: 7:6 (#0), trait_item_def_id: None }] })
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/methods.rs:1:13: 1:19 (#0), vis_span: src/integrity/methods.rs:1:13: 1:13 (#0), ident: y#0, hir_id: HirId(DefId(0:26 ~ a[c396]::integrity::methods::Foo).3), def_id: DefId(0:27 ~ a[c396]::integrity::methods::Foo::y), ty: Ty { hir_id: HirId(DefId(0:26 ~ a[c396]::integrity::methods::Foo).1), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:1:16: 1:19 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c396]::integrity::methods::Foo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/methods.rs:1:16: 1:19 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/methods.rs:1:11: 1:11 (#0), span: src/integrity/methods.rs:1:11: 1:11 (#0) })
[DEBUG] checking struct ...
[DEBUG] Preapring to check item fn body...
[DEBUG] Checking item Impl(Impl { constness: NotConst, safety: Safe, polarity: "positive", defaultness: Final, defaultness_span: None, generics: Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/methods.rs:3:9: 3:9 (#0), span: src/integrity/methods.rs:3:5: 3:5 (#0) }, of_trait: None, self_ty: Ty { hir_id: HirId(DefId(0:28 ~ a[c396]::integrity::methods::{impl#0}).1), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:3:6: 3:9 (#0), res: Def(Struct, DefId(0:26 ~ a[c396]::integrity::methods::Foo)), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:28 ~ a[c396]::integrity::methods::{impl#0}).2), res: Def(Struct, DefId(0:26 ~ a[c396]::integrity::methods::Foo)), args: None, infer_args: false }] })), span: src/integrity/methods.rs:3:6: 3:9 (#0) }, items: [ImplItemRef { id: ImplItemId { owner_id: DefId(0:49 ~ a[c396]::integrity::methods::{impl#0}::bar) }, ident: bar#0, kind: Fn { has_self: true }, span: src/integrity/methods.rs:5:5: 7:6 (#0), trait_item_def_id: None }] })
[DEBUG] Trying to get type of function DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).5), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:6:9: 6:10 (#0), res: Local(HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).6), res: Local(HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).4)), args: None, infer_args: true }] })), span: src/integrity/methods.rs:6:9: 6:10 (#0) }), hir_id: HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).7), rules: DefaultBlock, span: src/integrity/methods.rs:5:34: 7:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/methods.rs:6:9: 6:10 (#0), res: Local(HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).6), res: Local(HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).4)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:49 ~ a[c396]::integrity::methods::{impl#0}::bar)
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:49 ~ a[c396]::integrity::methods::{impl#0}::bar).5), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:6:9: 6:10 (#0), res: Local(HirId(DefId(0:49 ~ a[c396]::integrity::methods::{impl#0}::bar).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:49 ~ a[c396]::integrity::methods::{impl#0}::bar).6), res: Local(HirId(DefId(0:49 ~ a[c396]::integrity::methods::{impl#0}::bar).4)), args: None, infer_args: true }] })), span: src/integrity/methods.rs:6:9: 6:10 (#0) }), hir_id: HirId(DefId(0:49 ~ a[c396]::integrity::methods::{impl#0}::bar).7), rules: DefaultBlock, span: src/integrity/methods.rs:5:34: 7:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/methods.rs:10:23: 10:23 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/methods.rs:10:1: 10:23 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/methods.rs:10:23: 10:23 (#0), span: src/integrity/methods.rs:10:21: 10:21 (#0) }, BodyId { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).15) })
[DEBUG] The last stmt is an expr
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/methods.rs:6:9: 6:10 (#0), res: Local(HirId(DefId(0:49 ~ a[c396]::integrity::methods::{impl#0}::bar).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:49 ~ a[c396]::integrity::methods::{impl#0}::bar).6), res: Local(HirId(DefId(0:49 ~ a[c396]::integrity::methods::{impl#0}::bar).4)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/methods.rs:10:23: 10:23 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/methods.rs:10:1: 10:23 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/methods.rs:10:23: 10:23 (#0), span: src/integrity/methods.rs:10:21: 10:21 (#0) }, BodyId { hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).15) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7), f#0, None), span: src/integrity/methods.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).2), kind: Struct(Resolved(None, Path { span: src/integrity/methods.rs:11:13: 11:16 (#0), res: Def(Struct, DefId(0:26 ~ a[c74b]::integrity::methods::Foo)), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).3), res: Def(Struct, DefId(0:26 ~ a[c74b]::integrity::methods::Foo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).4), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).5), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/methods.rs:11:22: 11:23 (#0) }), span: src/integrity/methods.rs:11:22: 11:23 (#0) }, span: src/integrity/methods.rs:11:19: 11:23 (#0), is_shorthand: false }], None), span: src/integrity/methods.rs:11:13: 11:25 (#0) }), els: None, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).6), span: src/integrity/methods.rs:11:5: 11:26 (#0), source: Normal }), span: src/integrity/methods.rs:11:5: 11:26 (#0) }, Stmt { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).13), kind: Semi(Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).8), kind: MethodCall(PathSegment { ident: bar#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).10), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] })), span: src/integrity/methods.rs:13:5: 13:6 (#0) }, [Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) }), span: src/integrity/methods.rs:13:11: 13:12 (#0) }], src/integrity/methods.rs:13:7: 13:13 (#0)), span: src/integrity/methods.rs:13:5: 13:13 (#0) }), span: src/integrity/methods.rs:13:5: 13:14 (#0) }], expr: None, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).14), rules: DefaultBlock, span: src/integrity/methods.rs:10:24: 17:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] Checking a statement...
[DEBUG] > expr kind is MethodCall(PathSegment { ident: bar#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).10), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] })), span: src/integrity/methods.rs:13:5: 13:6 (#0) }, [Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) }), span: src/integrity/methods.rs:13:11: 13:12 (#0) }], src/integrity/methods.rs:13:7: 13:13 (#0))
[DEBUG] Getting the ty of an assoc fn
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).7), f#0, None), span: src/integrity/methods.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).2), kind: Struct(Resolved(None, Path { span: src/integrity/methods.rs:11:13: 11:16 (#0), res: Def(Struct, DefId(0:26 ~ a[c396]::integrity::methods::Foo)), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).3), res: Def(Struct, DefId(0:26 ~ a[c396]::integrity::methods::Foo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).4), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).5), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/methods.rs:11:22: 11:23 (#0) }), span: src/integrity/methods.rs:11:22: 11:23 (#0) }, span: src/integrity/methods.rs:11:19: 11:23 (#0), is_shorthand: false }], None), span: src/integrity/methods.rs:11:13: 11:25 (#0) }), els: None, hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).6), span: src/integrity/methods.rs:11:5: 11:26 (#0), source: Normal }), span: src/integrity/methods.rs:11:5: 11:26 (#0) }, Stmt { hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).13), kind: Semi(Expr { hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).8), kind: MethodCall(PathSegment { ident: bar#0, hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).10), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] })), span: src/integrity/methods.rs:13:5: 13:6 (#0) }, [Expr { hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) }), span: src/integrity/methods.rs:13:11: 13:12 (#0) }], src/integrity/methods.rs:13:7: 13:13 (#0)), span: src/integrity/methods.rs:13:5: 13:13 (#0) }), span: src/integrity/methods.rs:13:5: 13:14 (#0) }], expr: None, hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).14), rules: DefaultBlock, span: src/integrity/methods.rs:10:24: 17:2 (#0), targeted_by_break: false }, None)
[DEBUG] Trying to get type of function DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] It is Ty { property: FlowPair(Universal, Specific({"a"})), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Opaque }, Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }], Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) })
[DEBUG] > expr kind is MethodCall(PathSegment { ident: bar#0, hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).10), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] })), span: src/integrity/methods.rs:13:5: 13:6 (#0) }, [Expr { hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) }), span: src/integrity/methods.rs:13:11: 13:12 (#0) }], src/integrity/methods.rs:13:7: 13:13 (#0))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Getting the ty of an assoc fn
[DEBUG] Trying to get type of function DefId(0:49 ~ a[c396]::integrity::methods::{impl#0}::bar)
[DEBUG] > expr kind is MethodCall(PathSegment { ident: bar#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).10), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] })), span: src/integrity/methods.rs:13:5: 13:6 (#0) }, [Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) }), span: src/integrity/methods.rs:13:11: 13:12 (#0) }], src/integrity/methods.rs:13:7: 13:13 (#0))
[DEBUG] It is Ty { property: FlowPair(Universal, Specific({"a"})), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Opaque }, Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }], Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] Getting the ty of an assoc fn
[DEBUG] Trying to get type of function DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] }))
[DEBUG] It is Ty { property: FlowPair(Universal, Specific({"a"})), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Opaque }, Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }], Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is MethodCall(PathSegment { ident: bar#0, hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).10), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] })), span: src/integrity/methods.rs:13:5: 13:6 (#0) }, [Expr { hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) }), span: src/integrity/methods.rs:13:11: 13:12 (#0) }], src/integrity/methods.rs:13:7: 13:13 (#0))
[DEBUG] Getting the ty of an assoc fn
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/enums.rs:1:1: 12:2 (#0), inject_use_span: src/integrity/enums.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:31 ~ a[c74b]::integrity::enums::Foo) }, ItemId { owner_id: DefId(0:50 ~ a[c74b]::integrity::enums::Something) }, ItemId { owner_id: DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple) }] })
[DEBUG] Trying to get type of function DefId(0:49 ~ a[c396]::integrity::methods::{impl#0}::bar)
[DEBUG] It is Ty { property: FlowPair(Universal, Specific({"a"})), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Opaque }, Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }], Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c396]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/enums.rs:1:1: 12:2 (#0), inject_use_span: src/integrity/enums.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:31 ~ a[c396]::integrity::enums::Foo) }, ItemId { owner_id: DefId(0:50 ~ a[c396]::integrity::enums::Something) }, ItemId { owner_id: DefId(0:41 ~ a[c396]::integrity::enums::test_struct_tuple) }] })
[DEBUG] Checking item Enum(EnumDef { variants: [Variant { ident: Boo#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).1), def_id: DefId(0:32 ~ a[c74b]::integrity::enums::Foo::Boo), data: Tuple([FieldDef { span: src/integrity/enums.rs:2:9: 2:12 (#0), vis_span: src/integrity/enums.rs:2:9: 2:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).5), def_id: DefId(0:34 ~ a[c74b]::integrity::enums::Foo::Boo::0), ty: Ty { hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).3), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:2:9: 2:12 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).4), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/enums.rs:2:9: 2:12 (#0) } }], HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).2), DefId(0:33 ~ a[c74b]::integrity::enums::Foo::Boo::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:2:5: 2:13 (#0) }, Variant { ident: Bar#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).6), def_id: DefId(0:35 ~ a[c74b]::integrity::enums::Foo::Bar), data: Tuple([FieldDef { span: src/integrity/enums.rs:3:9: 3:13 (#0), vis_span: src/integrity/enums.rs:3:9: 3:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).10), def_id: DefId(0:37 ~ a[c74b]::integrity::enums::Foo::Bar::0), ty: Ty { hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).8), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:3:9: 3:13 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).9), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/enums.rs:3:9: 3:13 (#0) } }], HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).7), DefId(0:36 ~ a[c74b]::integrity::enums::Foo::Bar::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:3:5: 3:14 (#0) }, Variant { ident: Baz#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).11), def_id: DefId(0:38 ~ a[c74b]::integrity::enums::Foo::Baz), data: Tuple([FieldDef { span: src/integrity/enums.rs:4:9: 4:13 (#0), vis_span: src/integrity/enums.rs:4:9: 4:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).15), def_id: DefId(0:40 ~ a[c74b]::integrity::enums::Foo::Baz::0), ty: Ty { hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).13), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:4:9: 4:13 (#0), res: PrimTy(Char), segments: [PathSegment { ident: char#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).14), res: PrimTy(Char), args: None, infer_args: false }] })), span: src/integrity/enums.rs:4:9: 4:13 (#0) } }], HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).12), DefId(0:39 ~ a[c74b]::integrity::enums::Foo::Baz::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:4:5: 4:14 (#0) }] }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:1:9: 1:9 (#0), span: src/integrity/enums.rs:1:9: 1:9 (#0) })
[DEBUG] Checking item Struct(Tuple([FieldDef { span: src/integrity/enums.rs:8:18: 8:21 (#0), vis_span: src/integrity/enums.rs:8:18: 8:18 (#0), ident: 0#0, hir_id: HirId(DefId(0:50 ~ a[c74b]::integrity::enums::Something).4), def_id: DefId(0:52 ~ a[c74b]::integrity::enums::Something::0), ty: Ty { hir_id: HirId(DefId(0:50 ~ a[c74b]::integrity::enums::Something).2), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:8:18: 8:21 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:50 ~ a[c74b]::integrity::enums::Something).3), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/enums.rs:8:18: 8:21 (#0) } }], HirId(DefId(0:50 ~ a[c74b]::integrity::enums::Something).1), DefId(0:51 ~ a[c74b]::integrity::enums::Something::{constructor#0})), Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:8:22: 8:22 (#0), span: src/integrity/enums.rs:8:17: 8:17 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/enums.rs:10:23: 10:23 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/enums.rs:10:1: 10:23 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:10:23: 10:23 (#0), span: src/integrity/enums.rs:10:21: 10:21 (#0) }, BodyId { hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).9) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Checking item Enum(EnumDef { variants: [Variant { ident: Boo#0, hir_id: HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).1), def_id: DefId(0:32 ~ a[c396]::integrity::enums::Foo::Boo), data: Tuple([FieldDef { span: src/integrity/enums.rs:2:9: 2:12 (#0), vis_span: src/integrity/enums.rs:2:9: 2:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).5), def_id: DefId(0:34 ~ a[c396]::integrity::enums::Foo::Boo::0), ty: Ty { hir_id: HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).3), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:2:9: 2:12 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).4), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/enums.rs:2:9: 2:12 (#0) } }], HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).2), DefId(0:33 ~ a[c396]::integrity::enums::Foo::Boo::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:2:5: 2:13 (#0) }, Variant { ident: Bar#0, hir_id: HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).6), def_id: DefId(0:35 ~ a[c396]::integrity::enums::Foo::Bar), data: Tuple([FieldDef { span: src/integrity/enums.rs:3:9: 3:13 (#0), vis_span: src/integrity/enums.rs:3:9: 3:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).10), def_id: DefId(0:37 ~ a[c396]::integrity::enums::Foo::Bar::0), ty: Ty { hir_id: HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).8), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:3:9: 3:13 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).9), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/enums.rs:3:9: 3:13 (#0) } }], HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).7), DefId(0:36 ~ a[c396]::integrity::enums::Foo::Bar::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:3:5: 3:14 (#0) }, Variant { ident: Baz#0, hir_id: HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).11), def_id: DefId(0:38 ~ a[c396]::integrity::enums::Foo::Baz), data: Tuple([FieldDef { span: src/integrity/enums.rs:4:9: 4:13 (#0), vis_span: src/integrity/enums.rs:4:9: 4:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).15), def_id: DefId(0:40 ~ a[c396]::integrity::enums::Foo::Baz::0), ty: Ty { hir_id: HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).13), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:4:9: 4:13 (#0), res: PrimTy(Char), segments: [PathSegment { ident: char#0, hir_id: HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).14), res: PrimTy(Char), args: None, infer_args: false }] })), span: src/integrity/enums.rs:4:9: 4:13 (#0) } }], HirId(DefId(0:31 ~ a[c396]::integrity::enums::Foo).12), DefId(0:39 ~ a[c396]::integrity::enums::Foo::Baz::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:4:5: 4:14 (#0) }] }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:1:9: 1:9 (#0), span: src/integrity/enums.rs:1:9: 1:9 (#0) })
[DEBUG] Trying to get type of function DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple)
[DEBUG] Checking item Struct(Tuple([FieldDef { span: src/integrity/enums.rs:8:18: 8:21 (#0), vis_span: src/integrity/enums.rs:8:18: 8:18 (#0), ident: 0#0, hir_id: HirId(DefId(0:50 ~ a[c396]::integrity::enums::Something).4), def_id: DefId(0:52 ~ a[c396]::integrity::enums::Something::0), ty: Ty { hir_id: HirId(DefId(0:50 ~ a[c396]::integrity::enums::Something).2), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:8:18: 8:21 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:50 ~ a[c396]::integrity::enums::Something).3), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/enums.rs:8:18: 8:21 (#0) } }], HirId(DefId(0:50 ~ a[c396]::integrity::enums::Something).1), DefId(0:51 ~ a[c396]::integrity::enums::Something::{constructor#0})), Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:8:22: 8:22 (#0), span: src/integrity/enums.rs:8:17: 8:17 (#0) })
[DEBUG] checking struct ...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).7), s#0, None), span: src/integrity/enums.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).2), kind: Call(Expr { hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).3), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:11:13: 11:22 (#0), res: Def(Ctor(Struct, Fn), DefId(0:51 ~ a[c74b]::integrity::enums::Something::{constructor#0})), segments: [PathSegment { ident: Something#0, hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).4), res: Def(Ctor(Struct, Fn), DefId(0:51 ~ a[c74b]::integrity::enums::Something::{constructor#0})), args: None, infer_args: true }] })), span: src/integrity/enums.rs:11:13: 11:22 (#0) }, [Expr { hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).5), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/enums.rs:11:23: 11:24 (#0) }), span: src/integrity/enums.rs:11:23: 11:24 (#0) }]), span: src/integrity/enums.rs:11:13: 11:25 (#0) }), els: None, hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).6), span: src/integrity/enums.rs:11:5: 11:26 (#0), source: Normal }), span: src/integrity/enums.rs:11:5: 11:26 (#0) }], expr: None, hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).8), rules: DefaultBlock, span: src/integrity/enums.rs:10:24: 12:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/enums.rs:10:23: 10:23 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/enums.rs:10:1: 10:23 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:10:23: 10:23 (#0), span: src/integrity/enums.rs:10:21: 10:21 (#0) }, BodyId { hir_id: HirId(DefId(0:41 ~ a[c396]::integrity::enums::test_struct_tuple).9) })
[DEBUG] Checking a let stmt!
[DEBUG] Preapring to check item fn body...
[DEBUG] The last stmt is NOT an expr
[DEBUG] Trying to get type of function DefId(0:41 ~ a[c396]::integrity::enums::test_struct_tuple)
[DEBUG] Checking a let stmt!
[DEBUG] Done checking item fn body
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/provenance.rs:1:1: 39:2 (#0), inject_use_span: src/provenance.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance) }, ItemId { owner_id: DefId(0:44 ~ a[c74b]::provenance::test_fn_id) }, ItemId { owner_id: DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd) }] })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:1:27: 1:27 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:1:1: 1:27 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:1:27: 1:27 (#0), span: src/provenance.rs:1:25: 1:25 (#0) }, BodyId { hir_id: HirId(DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance).6) })
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:41 ~ a[c396]::integrity::enums::test_struct_tuple).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:41 ~ a[c396]::integrity::enums::test_struct_tuple).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:41 ~ a[c396]::integrity::enums::test_struct_tuple).7), s#0, None), span: src/integrity/enums.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:41 ~ a[c396]::integrity::enums::test_struct_tuple).2), kind: Call(Expr { hir_id: HirId(DefId(0:41 ~ a[c396]::integrity::enums::test_struct_tuple).3), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:11:13: 11:22 (#0), res: Def(Ctor(Struct, Fn), DefId(0:51 ~ a[c396]::integrity::enums::Something::{constructor#0})), segments: [PathSegment { ident: Something#0, hir_id: HirId(DefId(0:41 ~ a[c396]::integrity::enums::test_struct_tuple).4), res: Def(Ctor(Struct, Fn), DefId(0:51 ~ a[c396]::integrity::enums::Something::{constructor#0})), args: None, infer_args: true }] })), span: src/integrity/enums.rs:11:13: 11:22 (#0) }, [Expr { hir_id: HirId(DefId(0:41 ~ a[c396]::integrity::enums::test_struct_tuple).5), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/enums.rs:11:23: 11:24 (#0) }), span: src/integrity/enums.rs:11:23: 11:24 (#0) }]), span: src/integrity/enums.rs:11:13: 11:25 (#0) }), els: None, hir_id: HirId(DefId(0:41 ~ a[c396]::integrity::enums::test_struct_tuple).6), span: src/integrity/enums.rs:11:5: 11:26 (#0), source: Normal }), span: src/integrity/enums.rs:11:5: 11:26 (#0) }], expr: None, hir_id: HirId(DefId(0:41 ~ a[c396]::integrity::enums::test_struct_tuple).8), rules: DefaultBlock, span: src/integrity/enums.rs:10:24: 12:2 (#0), targeted_by_break: false }, None)
[DEBUG] Preapring to check item fn body...
[DEBUG] Checking a statement...
[DEBUG] Trying to get type of function DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance)
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance).4), kind: Binding(BindingMode(No, Not), HirId(DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance).4), x#0, None), span: src/provenance.rs:3:9: 3:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/provenance.rs:3:13: 3:14 (#0) }), span: src/provenance.rs:3:13: 3:14 (#0) }), els: None, hir_id: HirId(DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance).3), span: src/provenance.rs:3:5: 3:15 (#0), source: Normal }), span: src/provenance.rs:3:5: 3:15 (#0) }], expr: None, hir_id: HirId(DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance).5), rules: DefaultBlock, span: src/provenance.rs:1:28: 8:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/provenance.rs:1:1: 39:2 (#0), inject_use_span: src/provenance.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:43 ~ a[c396]::provenance::test_basic_provenance) }, ItemId { owner_id: DefId(0:44 ~ a[c396]::provenance::test_fn_id) }, ItemId { owner_id: DefId(0:45 ~ a[c396]::provenance::test_fn_iddd) }] })
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:1:27: 1:27 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:1:1: 1:27 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:1:27: 1:27 (#0), span: src/provenance.rs:1:25: 1:25 (#0) }, BodyId { hir_id: HirId(DefId(0:43 ~ a[c396]::provenance::test_basic_provenance).6) })
[DEBUG] Done checking item fn body
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:43 ~ a[c396]::provenance::test_basic_provenance)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:10:16: 10:16 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:10:1: 10:16 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:10:16: 10:16 (#0), span: src/provenance.rs:10:14: 10:14 (#0) }, BodyId { hir_id: HirId(DefId(0:44 ~ a[c74b]::provenance::test_fn_id).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:44 ~ a[c74b]::provenance::test_fn_id)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:43 ~ a[c396]::provenance::test_basic_provenance).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:43 ~ a[c396]::provenance::test_basic_provenance).4), kind: Binding(BindingMode(No, Not), HirId(DefId(0:43 ~ a[c396]::provenance::test_basic_provenance).4), x#0, None), span: src/provenance.rs:3:9: 3:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:43 ~ a[c396]::provenance::test_basic_provenance).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/provenance.rs:3:13: 3:14 (#0) }), span: src/provenance.rs:3:13: 3:14 (#0) }), els: None, hir_id: HirId(DefId(0:43 ~ a[c396]::provenance::test_basic_provenance).3), span: src/provenance.rs:3:5: 3:15 (#0), source: Normal }), span: src/provenance.rs:3:5: 3:15 (#0) }], expr: None, hir_id: HirId(DefId(0:43 ~ a[c396]::provenance::test_basic_provenance).5), rules: DefaultBlock, span: src/provenance.rs:1:28: 8:2 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:44 ~ a[c74b]::provenance::test_fn_id).1), kind: Item(ItemId { owner_id: DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo) }), span: src/provenance.rs:12:5: 14:6 (#0) }], expr: None, hir_id: HirId(DefId(0:44 ~ a[c74b]::provenance::test_fn_id).2), rules: DefaultBlock, span: src/provenance.rs:10:17: 15:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:10:16: 10:16 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:10:1: 10:16 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:10:16: 10:16 (#0), span: src/provenance.rs:10:14: 10:14 (#0) }, BodyId { hir_id: HirId(DefId(0:44 ~ a[c396]::provenance::test_fn_id).3) })
[DEBUG] Trying to get type of function DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo)
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:44 ~ a[c396]::provenance::test_fn_id)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:44 ~ a[c396]::provenance::test_fn_id).1), kind: Item(ItemId { owner_id: DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo) }), span: src/provenance.rs:12:5: 14:6 (#0) }], expr: None, hir_id: HirId(DefId(0:44 ~ a[c396]::provenance::test_fn_id).2), rules: DefaultBlock, span: src/provenance.rs:10:17: 15:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).6) })
[DEBUG] Trying to get type of function DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo)
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Done checking item fn body
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).6) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo)
[DEBUG] Trying to get type of function DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Done checking item fn body
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:17:18: 17:18 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:17:1: 17:18 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:17:18: 17:18 (#0), span: src/provenance.rs:17:16: 17:16 (#0) }, BodyId { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).11) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).1), kind: Item(ItemId { owner_id: DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id) }), span: src/provenance.rs:19:5: 33:6 (#0) }, Stmt { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).9), kind: Semi(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).2), kind: Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }]), span: src/provenance.rs:38:5: 38:19 (#0) }), span: src/provenance.rs:38:5: 38:20 (#0) }], expr: None, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).10), rules: DefaultBlock, span: src/provenance.rs:17:19: 39:2 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c396]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:14: 19:17 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:14: 19:17 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:22: 19:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:22: 19:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:19:5: 19:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:19:25: 19:25 (#0), span: src/provenance.rs:19:10: 19:10 (#0) }, BodyId { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).10) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:17:18: 17:18 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:17:1: 17:18 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:17:18: 17:18 (#0), span: src/provenance.rs:17:16: 17:16 (#0) }, BodyId { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).11) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] Trying to get type of function DefId(0:45 ~ a[c396]::provenance::test_fn_iddd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).3), kind: Item(ItemId { owner_id: DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd) }), span: src/provenance.rs:22:9: 30:10 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).4), kind: Call(Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }]), span: src/provenance.rs:32:9: 32:15 (#0) }), hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).9), rules: DefaultBlock, span: src/provenance.rs:19:26: 33:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).1), kind: Item(ItemId { owner_id: DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id) }), span: src/provenance.rs:19:5: 33:6 (#0) }, Stmt { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).9), kind: Semi(Expr { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).2), kind: Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }]), span: src/provenance.rs:38:5: 38:19 (#0) }), span: src/provenance.rs:38:5: 38:20 (#0) }], expr: None, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).10), rules: DefaultBlock, span: src/provenance.rs:17:19: 39:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:14: 19:17 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:14: 19:17 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:22: 19:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:22: 19:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:19:5: 19:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:19:25: 19:25 (#0), span: src/provenance.rs:19:10: 19:10 (#0) }, BodyId { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).10) })
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).3), kind: Item(ItemId { owner_id: DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd) }), span: src/provenance.rs:22:9: 30:10 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).4), kind: Call(Expr { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }]), span: src/provenance.rs:32:9: 32:15 (#0) }), hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).9), rules: DefaultBlock, span: src/provenance.rs:19:26: 33:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }])
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }])
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }])
[DEBUG] Trying to get type of function DefId(20:3 ~ c[3801]::value)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }])
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, [])
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ c[3801]::value)
[DEBUG] Trying to get type of function DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id)
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, [])
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:14: 19:17 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:14: 19:17 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:22: 19:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:22: 19:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:19:5: 19:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:19:25: 19:25 (#0), span: src/provenance.rs:19:10: 19:10 (#0) }, BodyId { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).10) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(24:3 ~ c[3801]::value)
[DEBUG] Trying to get type of function DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).3), kind: Item(ItemId { owner_id: DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd) }), span: src/provenance.rs:22:9: 30:10 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).4), kind: Call(Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }]), span: src/provenance.rs:32:9: 32:15 (#0) }), hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).9), rules: DefaultBlock, span: src/provenance.rs:19:26: 33:6 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }])
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, [])
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(24:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c396]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(24:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(24:3 ~ c[3801]::value)
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:14: 19:17 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:14: 19:17 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:22: 19:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:22: 19:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:19:5: 19:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:19:25: 19:25 (#0), span: src/provenance.rs:19:10: 19:10 (#0) }, BodyId { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).3), kind: Item(ItemId { owner_id: DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd) }), span: src/provenance.rs:22:9: 30:10 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).4), kind: Call(Expr { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }]), span: src/provenance.rs:32:9: 32:15 (#0) }), hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).9), rules: DefaultBlock, span: src/provenance.rs:19:26: 33:6 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Done checking item fn body
[DEBUG] Checking a statement...
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }])
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Checking a statement...
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }])
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c396]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is an expr
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is an expr
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c396]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c396]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:57 ~ a[c396]::main).10), kind: Tup([]), span: no-location (#4) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: no-location (#4) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: no-location (#0), span: no-location (#0) }, BodyId { hir_id: HirId(DefId(0:57 ~ a[c396]::main).9) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:57 ~ a[c396]::main)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:57 ~ a[c396]::main).1), kind: Item(ItemId { owner_id: DefId(0:58 ~ a[c396]::main::test) }), span: no-location (#4) }], expr: Some(Expr { hir_id: HirId(DefId(0:57 ~ a[c396]::main).2), kind: Call(Expr { hir_id: HirId(DefId(0:57 ~ a[c396]::main).3), kind: Path(Resolved(None, Path { span: no-location (#4), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#4, hir_id: HirId(DefId(0:57 ~ a[c396]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#4, hir_id: HirId(DefId(0:57 ~ a[c396]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })), span: no-location (#4) }, [Expr { hir_id: HirId(DefId(0:57 ~ a[c396]::main).6), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:57 ~ a[c396]::main).7), kind: Array([]), span: no-location (#4) }), span: no-location (#4) }]), span: no-location (#4) }), hir_id: HirId(DefId(0:57 ~ a[c396]::main).8), rules: DefaultBlock, span: no-location (#4), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item ExternCrate(None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:57 ~ a[c396]::main).3), kind: Path(Resolved(None, Path { span: no-location (#4), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#4, hir_id: HirId(DefId(0:57 ~ a[c396]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#4, hir_id: HirId(DefId(0:57 ~ a[c396]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] })), span: no-location (#4) }, [Expr { hir_id: HirId(DefId(0:57 ~ a[c396]::main).6), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:57 ~ a[c396]::main).7), kind: Array([]), span: no-location (#4) }), span: no-location (#4) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: no-location (#4), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), segments: [PathSegment { ident: test#4, hir_id: HirId(DefId(0:57 ~ a[c396]::main).4), res: Def(Mod, DefId(20:0 ~ test[522f])), args: None, infer_args: true }, PathSegment { ident: test_main_static#4, hir_id: HirId(DefId(0:57 ~ a[c396]::main).5), res: Def(Fn, DefId(20:841 ~ test[522f]::test_main_static)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:841 ~ test[522f]::test_main_static)
[DEBUG] > expr kind is AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:57 ~ a[c396]::main).7), kind: Array([]), span: no-location (#4) })
[DEBUG] > expr kind is Array([])
[DEBUG] Done checking item fn body
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Coenobita invoked for crate '___'
=========
[DEBUG] Coenobita invoked for crate 'b'
=========
[DEBUG] Coenobita invoked for crate 'c'
=========
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ c[3801]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ b[3f10]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:3 ~ c[3801]::value).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:19: 3:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:3 ~ c[3801]::value).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:19: 3:22 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:1: 3:22 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:22: 3:22 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:13: 3:13 (#0) }, BodyId { hir_id: HirId(DefId(0:3 ~ c[3801]::value).3) })
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:19: 2:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:3 ~ b[3f10]::value).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:19: 2:22 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:1: 2:22 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:22: 2:22 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:13: 2:13 (#0) }, BodyId { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:3 ~ c[3801]::value)
[DEBUG] Preapring to check item fn body...
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:3 ~ c[3801]::value).1), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:4:5: 4:6 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:4:5: 4:6 (#0) }), hir_id: HirId(DefId(0:3 ~ c[3801]::value).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:3:23: 5:2 (#0), targeted_by_break: false }, None)
[DEBUG] Trying to get type of function DefId(0:3 ~ b[3f10]::value)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:4:5: 4:6 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:3 ~ b[3f10]::value).1), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) }), hir_id: HirId(DefId(0:3 ~ b[3f10]::value).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:2:23: 4:2 (#0), targeted_by_break: false }, None)
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:3:5: 3:6 (#0) })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:21: 8:25 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:21: 8:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:1: 8:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:25: 8:25 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:15: 8:15 (#0) }, BodyId { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).3) })
[DEBUG] Done checking item fn body
[DEBUG] Preapring to check item fn body...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:21: 7:25 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:21: 7:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:1: 7:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:25: 7:25 (#0), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:15: 7:15 (#0) }, BodyId { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).3) })
[DEBUG] Trying to get type of function DefId(0:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).1), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:9:5: 9:9 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:9:5: 9:9 (#0) }), hir_id: HirId(DefId(0:4 ~ c[3801]::boolean).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:8:26: 10:2 (#0), targeted_by_break: false }, None)
[DEBUG] Preapring to check item fn body...
[DEBUG] The last stmt is an expr
[DEBUG] Trying to get type of function DefId(0:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/c/src/lib.rs:9:5: 9:9 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).1), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) }), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) }), hir_id: HirId(DefId(0:4 ~ b[3f10]::boolean).2), rules: DefaultBlock, span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:7:26: 9:2 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/Desktop/UCD/Research/PLDI25/coenobita/tests/b/src/lib.rs:8:5: 8:9 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Coenobita invoked for crate 'a'
=========
[DEBUG] Checking item Use(Path { span: no-location (#1), res: [Err], segments: [PathSegment { ident: std#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: prelude#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).2), res: Def(Mod, DefId(1:44 ~ std[e3cd]::prelude)), args: None, infer_args: false }, PathSegment { ident: rust_2021#1, hir_id: HirId(DefId(0:1 ~ a[c74b]::{use#0}).3), res: Def(Mod, DefId(1:139 ~ std[e3cd]::prelude::rust_2021)), args: None, infer_args: false }] }, Glob)
[DEBUG] Checking item ExternCrate(None)
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/mod.rs:1:1: 6:11 (#0), inject_use_span: src/integrity/mod.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:4 ~ a[c74b]::integrity::if_else) }, ItemId { owner_id: DefId(0:8 ~ a[c74b]::integrity::loops) }, ItemId { owner_id: DefId(0:11 ~ a[c74b]::integrity::unorganized) }, ItemId { owner_id: DefId(0:25 ~ a[c74b]::integrity::methods) }, ItemId { owner_id: DefId(0:30 ~ a[c74b]::integrity::enums) }] })
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/if_else.rs:1:1: 29:2 (#0), inject_use_span: src/integrity/if_else.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else) }, ItemId { owner_id: DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else) }, ItemId { owner_id: DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else) }] })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/if_else.rs:1:24: 1:24 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/if_else.rs:1:1: 1:24 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/if_else.rs:1:24: 1:24 (#0), span: src/integrity/if_else.rs:1:22: 1:22 (#0) }, BodyId { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).22) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15), kind: Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15), y#0, None), span: src/integrity/if_else.rs:3:9: 3:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:3:16: 3:26 (#0) }, []), span: src/integrity/if_else.rs:3:16: 3:28 (#0) }), span: src/integrity/if_else.rs:3:16: 3:28 (#6) }, Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).10), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).9), rules: DefaultBlock, span: src/integrity/if_else.rs:3:29: 3:34 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:3:29: 3:34 (#0) }, Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).11), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).13), rules: DefaultBlock, span: src/integrity/if_else.rs:3:40: 3:45 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:3:40: 3:45 (#0) })), span: src/integrity/if_else.rs:3:13: 3:45 (#0) }), els: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).14), span: src/integrity/if_else.rs:3:5: 3:46 (#0), source: Normal }), span: src/integrity/if_else.rs:3:5: 3:46 (#0) }, Stmt { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).16), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).20), z#0, None), span: src/integrity/if_else.rs:6:9: 6:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).17), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:6:13: 6:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:6:13: 6:14 (#0) }), els: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).19), span: src/integrity/if_else.rs:6:5: 6:15 (#0), source: Normal }), span: src/integrity/if_else.rs:6:5: 6:15 (#0) }], expr: None, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).21), rules: DefaultBlock, span: src/integrity/if_else.rs:1:25: 7:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:3:16: 3:26 (#0) }, []), span: src/integrity/if_else.rs:3:16: 3:28 (#0) }), span: src/integrity/if_else.rs:3:16: 3:28 (#6) }, Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).10), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).9), rules: DefaultBlock, span: src/integrity/if_else.rs:3:29: 3:34 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:3:29: 3:34 (#0) }, Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).11), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).13), rules: DefaultBlock, span: src/integrity/if_else.rs:3:40: 3:45 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:3:40: 3:45 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:3:16: 3:26 (#0) }, []), span: src/integrity/if_else.rs:3:16: 3:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:3:16: 3:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:3:16: 3:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).8), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), span: src/integrity/if_else.rs:3:31: 3:32 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).9), rules: DefaultBlock, span: src/integrity/if_else.rs:3:29: 3:34 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:3:31: 3:32 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).12), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), span: src/integrity/if_else.rs:3:42: 3:43 (#0) }), hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).13), rules: DefaultBlock, span: src/integrity/if_else.rs:3:40: 3:45 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:3:42: 3:43 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:6:13: 6:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:6:13: 6:14 (#0), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).18), res: Local(HirId(DefId(0:5 ~ a[c74b]::integrity::if_else::test_basic_if_else).15)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/if_else.rs:9:30: 9:30 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/if_else.rs:9:1: 9:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/if_else.rs:9:30: 9:30 (#0), span: src/integrity/if_else.rs:9:28: 9:28 (#0) }, BodyId { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).22) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).20), y#0, None), span: src/integrity/if_else.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) }), span: src/integrity/if_else.rs:11:16: 11:28 (#7) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:29: 11:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:53: 11:58 (#0) })), span: src/integrity/if_else.rs:11:13: 11:58 (#0) }), els: None, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).19), span: src/integrity/if_else.rs:11:5: 11:59 (#0), source: Normal }), span: src/integrity/if_else.rs:11:5: 11:59 (#0) }], expr: None, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).21), rules: DefaultBlock, span: src/integrity/if_else.rs:9:31: 12:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) }), span: src/integrity/if_else.rs:11:16: 11:28 (#7) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:29: 11:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:53: 11:58 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) }), span: src/integrity/if_else.rs:11:16: 11:28 (#7) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:29: 11:47 (#0) }, Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:11:53: 11:58 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, []), span: src/integrity/if_else.rs:11:16: 11:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:16: 11:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:16: 11:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).5), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).6), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).8), kind: Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) }), span: src/integrity/if_else.rs:11:31: 11:45 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).14), rules: DefaultBlock, span: src/integrity/if_else.rs:11:29: 11:47 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/if_else.rs:11:33: 11:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).9), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }), span: src/integrity/if_else.rs:11:31: 11:32 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).10), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, []), span: src/integrity/if_else.rs:11:35: 11:45 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:11:31: 11:32 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).11), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:11:35: 11:43 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:11:35: 11:43 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).12), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).13), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), span: src/integrity/if_else.rs:11:55: 11:56 (#0) }), hir_id: HirId(DefId(0:6 ~ a[c74b]::integrity::if_else::test_addition_in_if_else).18), rules: DefaultBlock, span: src/integrity/if_else.rs:11:53: 11:58 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:11:55: 11:56 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/if_else.rs:14:25: 14:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/if_else.rs:14:1: 14:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/if_else.rs:14:25: 14:25 (#0), span: src/integrity/if_else.rs:14:23: 14:23 (#0) }, BodyId { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).40) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).38), kind: Binding(BindingMode(No, Not), HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).38), y#0, None), span: src/integrity/if_else.rs:16:9: 16:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).2), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) }), span: src/integrity/if_else.rs:16:16: 16:28 (#8) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#9) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:16:29: 22:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:22:12: 28:6 (#0) })), span: src/integrity/if_else.rs:16:13: 28:6 (#0) }), els: None, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).37), span: src/integrity/if_else.rs:16:5: 28:7 (#0), source: Normal }), span: src/integrity/if_else.rs:16:5: 28:7 (#0) }], expr: None, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).39), rules: DefaultBlock, span: src/integrity/if_else.rs:14:26: 29:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) }), span: src/integrity/if_else.rs:16:16: 16:28 (#8) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#9) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:16:29: 22:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:22:12: 28:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#9) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#9) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) })
[DEBUG] > expr kind is Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).7), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) }), span: src/integrity/if_else.rs:16:16: 16:28 (#8) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).21), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#9) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:16:29: 22:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).22), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:22:12: 28:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).3), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, []), span: src/integrity/if_else.rs:16:16: 16:28 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).4), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:16:16: 16:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:16:16: 16:26 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).6), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).8), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#9) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) })), span: src/integrity/if_else.rs:17:9: 21:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).20), rules: DefaultBlock, span: src/integrity/if_else.rs:16:29: 22:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).13), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) }), span: src/integrity/if_else.rs:17:12: 17:24 (#9) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:17:25: 19:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:19:16: 21:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).9), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, []), span: src/integrity/if_else.rs:17:12: 17:24 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).10), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:17:12: 17:22 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:17:12: 17:22 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).11), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).12), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).14), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), span: src/integrity/if_else.rs:18:13: 18:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).15), rules: DefaultBlock, span: src/integrity/if_else.rs:17:25: 19:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/if_else.rs:18:13: 18:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).18), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), span: src/integrity/if_else.rs:20:13: 20:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).19), rules: DefaultBlock, span: src/integrity/if_else.rs:19:16: 21:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/if_else.rs:20:13: 20:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).23), kind: If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) })), span: src/integrity/if_else.rs:23:9: 27:10 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).36), rules: DefaultBlock, span: src/integrity/if_else.rs:22:12: 28:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).29), kind: DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#10) }, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).32), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:23:26: 25:10 (#0) }, Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).33), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None), span: src/integrity/if_else.rs:25:16: 27:10 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).24), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) }), span: src/integrity/if_else.rs:23:12: 23:25 (#0) })
[DEBUG] > expr kind is Unary(Not, Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).25), kind: Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, []), span: src/integrity/if_else.rs:23:13: 23:25 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).26), kind: Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/if_else.rs:23:13: 23:23 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/if_else.rs:23:13: 23:23 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).27), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).28), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).30), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), span: src/integrity/if_else.rs:24:13: 24:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).31), rules: DefaultBlock, span: src/integrity/if_else.rs:23:26: 25:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/if_else.rs:24:13: 24:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), span: src/integrity/if_else.rs:26:13: 26:14 (#0) }), hir_id: HirId(DefId(0:7 ~ a[c74b]::integrity::if_else::test_nested_if_else).35), rules: DefaultBlock, span: src/integrity/if_else.rs:25:16: 27:10 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: src/integrity/if_else.rs:26:13: 26:14 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/loops.rs:1:1: 25:2 (#0), inject_use_span: src/integrity/loops.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop) }, ItemId { owner_id: DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop) }] })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/loops.rs:1:25: 1:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/loops.rs:1:1: 1:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/loops.rs:1:25: 1:25 (#0), span: src/integrity/loops.rs:1:23: 1:23 (#0) }, BodyId { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).43) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4), x#0, None), span: src/integrity/loops.rs:3:9: 3:14 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/loops.rs:3:17: 3:18 (#0) }), span: src/integrity/loops.rs:3:17: 3:18 (#0) }), els: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).3), span: src/integrity/loops.rs:3:5: 3:19 (#0), source: Normal }), span: src/integrity/loops.rs:3:5: 3:19 (#0) }, Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).5), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10), v#0, None), span: src/integrity/loops.rs:6:9: 6:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).6), kind: Array([Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).7), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: src/integrity/loops.rs:6:14: 6:15 (#0) }), span: src/integrity/loops.rs:6:14: 6:15 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).8), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: src/integrity/loops.rs:6:17: 6:18 (#0) }), span: src/integrity/loops.rs:6:17: 6:18 (#0) }]), span: src/integrity/loops.rs:6:13: 6:19 (#0) }), els: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).9), span: src/integrity/loops.rs:6:5: 6:20 (#0), source: Normal }), span: src/integrity/loops.rs:6:5: 6:20 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).41), kind: DropTemps(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).40), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).39), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).38), kind: Path(LangItem(IntoIterIntoIter, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#0) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).37), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28), iter#0, None), span: src/integrity/loops.rs:8:14: 8:15 (#12), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14), kind: Loop(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).35), kind: Expr(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).34), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:14: 8:15 (#12) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#11)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#11), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#13)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18), ident: 0#13, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#13) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:5: 10:6 (#11) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).36), rules: DefaultBlock, span: src/integrity/loops.rs:8:5: 10:6 (#11), targeted_by_break: false }, None, ForLoop, src/integrity/loops.rs:8:5: 8:15 (#11)), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:5: 10:6 (#11) }), span: src/integrity/loops.rs:8:5: 10:6 (#11) }), hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).42), rules: DefaultBlock, span: src/integrity/loops.rs:1:26: 11:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/loops.rs:3:17: 3:18 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Array([Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).7), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: src/integrity/loops.rs:6:14: 6:15 (#0) }), span: src/integrity/loops.rs:6:14: 6:15 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).8), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: src/integrity/loops.rs:6:17: 6:18 (#0) }), span: src/integrity/loops.rs:6:17: 6:18 (#0) }])
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: src/integrity/loops.rs:6:14: 6:15 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: src/integrity/loops.rs:6:17: 6:18 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).40), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).39), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).38), kind: Path(LangItem(IntoIterIntoIter, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#0) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).37), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28), iter#0, None), span: src/integrity/loops.rs:8:14: 8:15 (#12), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14), kind: Loop(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).35), kind: Expr(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).34), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:14: 8:15 (#12) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#11)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#11), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#13)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18), ident: 0#13, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#13) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:5: 10:6 (#11) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).36), rules: DefaultBlock, span: src/integrity/loops.rs:8:5: 10:6 (#11), targeted_by_break: false }, None, ForLoop, src/integrity/loops.rs:8:5: 8:15 (#11)), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:5: 10:6 (#11) })
[DEBUG] > expr kind is Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).39), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).38), kind: Path(LangItem(IntoIterIntoIter, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#0) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).37), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28), iter#0, None), span: src/integrity/loops.rs:8:14: 8:15 (#12), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14), kind: Loop(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).35), kind: Expr(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).34), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:14: 8:15 (#12) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#11)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#11), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#13)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18), ident: 0#13, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#13) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:5: 10:6 (#11) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).36), rules: DefaultBlock, span: src/integrity/loops.rs:8:5: 10:6 (#11), targeted_by_break: false }, None, ForLoop, src/integrity/loops.rs:8:5: 8:15 (#11)), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }], ForLoopDesugar)
[DEBUG] || Checking match expr: Expr {
    hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).39),
    kind: Call(
        Expr {
            hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).38),
            kind: Path(
                LangItem(
                    IntoIterIntoIter,
                    src/integrity/loops.rs:8:14: 8:15 (#12),
                ),
            ),
            span: src/integrity/loops.rs:8:14: 8:15 (#12),
        },
        [
            Expr {
                hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).11),
                kind: Path(
                    Resolved(
                        None,
                        Path {
                            span: src/integrity/loops.rs:8:14: 8:15 (#0),
                            res: Local(
                                HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10),
                            ),
                            segments: [
                                PathSegment {
                                    ident: v#0,
                                    hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).12),
                                    res: Local(
                                        HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10),
                                    ),
                                    args: None,
                                    infer_args: true,
                                },
                            ],
                        },
                    ),
                ),
                span: src/integrity/loops.rs:8:14: 8:15 (#0),
            },
        ],
    ),
    span: src/integrity/loops.rs:8:14: 8:15 (#12),
}
||match source: ForLoopDesugar
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).10)), args: None, infer_args: true }] }))
[DEBUG] For loop ctx is Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Array(Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] Pat kind for match arm is Binding(
    BindingMode(
        No,
        Mut,
    ),
    HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28),
    iter#0,
    None,
)
[DEBUG] > expr kind is Loop(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).35), kind: Expr(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).34), kind: Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:14: 8:15 (#12) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#11)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#11), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#13)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18), ident: 0#13, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#13) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:5: 10:6 (#11) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).36), rules: DefaultBlock, span: src/integrity/loops.rs:8:5: 10:6 (#11), targeted_by_break: false }, None, ForLoop, src/integrity/loops.rs:8:5: 8:15 (#11))
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:14: 8:15 (#12) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#11)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#11), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#13)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18), ident: 0#13, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#13) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar)
[DEBUG] || Checking match expr: Expr {
    hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33),
    kind: Call(
        Expr {
            hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32),
            kind: Path(
                LangItem(
                    IteratorNext,
                    src/integrity/loops.rs:8:14: 8:15 (#12),
                ),
            ),
            span: src/integrity/loops.rs:8:14: 8:15 (#12),
        },
        [
            Expr {
                hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31),
                kind: AddrOf(
                    Ref,
                    Mut,
                    Expr {
                        hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30),
                        kind: Path(
                            Resolved(
                                None,
                                Path {
                                    span: src/integrity/loops.rs:8:14: 8:15 (#12),
                                    res: Local(
                                        HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28),
                                    ),
                                    segments: [
                                        PathSegment {
                                            ident: iter#0,
                                            hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29),
                                            res: Local(
                                                HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28),
                                            ),
                                            args: None,
                                            infer_args: true,
                                        },
                                    ],
                                },
                            ),
                        ),
                        span: src/integrity/loops.rs:8:14: 8:15 (#12),
                    },
                ),
                span: src/integrity/loops.rs:8:14: 8:15 (#12),
            },
        ],
    ),
    span: src/integrity/loops.rs:8:14: 8:15 (#12),
}
||match source: ForLoopDesugar
[DEBUG] > expr kind is AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] }))
[DEBUG] For loop ctx is Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Array(Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] Pat kind for match arm is Struct(
    LangItem(
        OptionNone,
        src/integrity/loops.rs:8:5: 10:6 (#11),
    ),
    [],
    false,
)
[DEBUG] Checking patkind struct...
[DEBUG] > expr kind is Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None)
[DEBUG] Pat kind for match arm is Struct(
    LangItem(
        OptionSome,
        src/integrity/loops.rs:8:9: 8:10 (#13),
    ),
    [
        PatField {
            hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18),
            ident: 0#13,
            pat: Pat {
                hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13),
                kind: Binding(
                    BindingMode(
                        No,
                        Not,
                    ),
                    HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13),
                    i#0,
                    None,
                ),
                span: src/integrity/loops.rs:8:9: 8:10 (#0),
                default_binding_modes: true,
            },
            is_shorthand: false,
            span: src/integrity/loops.rs:8:9: 8:10 (#13),
        },
    ],
    false,
)
[DEBUG] Checking patkind struct...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Match(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33), kind: Call(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32), kind: Path(LangItem(IteratorNext, src/integrity/loops.rs:8:14: 8:15 (#12))), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) }), span: src/integrity/loops.rs:8:14: 8:15 (#12) }]), span: src/integrity/loops.rs:8:14: 8:15 (#12) }, [Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).17), span: src/integrity/loops.rs:8:5: 10:6 (#11), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).16), kind: Struct(LangItem(OptionNone, src/integrity/loops.rs:8:5: 10:6 (#11)), [], false), span: src/integrity/loops.rs:8:5: 10:6 (#11), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).15), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None), span: src/integrity/loops.rs:8:5: 10:6 (#11) } }, Arm { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).27), span: src/integrity/loops.rs:8:16: 10:6 (#0), pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).19), kind: Struct(LangItem(OptionSome, src/integrity/loops.rs:8:9: 8:10 (#13)), [PatField { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18), ident: 0#13, pat: Pat { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13), i#0, None), span: src/integrity/loops.rs:8:9: 8:10 (#0), default_binding_modes: true }, is_shorthand: false, span: src/integrity/loops.rs:8:9: 8:10 (#13) }], false), span: src/integrity/loops.rs:8:9: 8:10 (#13), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).26), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:8:16: 10:6 (#0) } }], ForLoopDesugar)
[DEBUG] || Checking match expr: Expr {
    hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).33),
    kind: Call(
        Expr {
            hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).32),
            kind: Path(
                LangItem(
                    IteratorNext,
                    src/integrity/loops.rs:8:14: 8:15 (#12),
                ),
            ),
            span: src/integrity/loops.rs:8:14: 8:15 (#12),
        },
        [
            Expr {
                hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).31),
                kind: AddrOf(
                    Ref,
                    Mut,
                    Expr {
                        hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30),
                        kind: Path(
                            Resolved(
                                None,
                                Path {
                                    span: src/integrity/loops.rs:8:14: 8:15 (#12),
                                    res: Local(
                                        HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28),
                                    ),
                                    segments: [
                                        PathSegment {
                                            ident: iter#0,
                                            hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29),
                                            res: Local(
                                                HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28),
                                            ),
                                            args: None,
                                            infer_args: true,
                                        },
                                    ],
                                },
                            ),
                        ),
                        span: src/integrity/loops.rs:8:14: 8:15 (#12),
                    },
                ),
                span: src/integrity/loops.rs:8:14: 8:15 (#12),
            },
        ],
    ),
    span: src/integrity/loops.rs:8:14: 8:15 (#12),
}
||match source: ForLoopDesugar
[DEBUG] > expr kind is AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).30), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:8:14: 8:15 (#12) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:8:14: 8:15 (#12), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).29), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).28)), args: None, infer_args: true }] }))
[DEBUG] For loop ctx is Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Array(Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] Pat kind for match arm is Struct(
    LangItem(
        OptionNone,
        src/integrity/loops.rs:8:5: 10:6 (#11),
    ),
    [],
    false,
)
[DEBUG] Checking patkind struct...
[DEBUG] > expr kind is Break(Destination { label: None, target_id: Ok(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).14)) }, None)
[DEBUG] Pat kind for match arm is Struct(
    LangItem(
        OptionSome,
        src/integrity/loops.rs:8:9: 8:10 (#13),
    ),
    [
        PatField {
            hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).18),
            ident: 0#13,
            pat: Pat {
                hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13),
                kind: Binding(
                    BindingMode(
                        No,
                        Not,
                    ),
                    HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).13),
                    i#0,
                    None,
                ),
                span: src/integrity/loops.rs:8:9: 8:10 (#0),
                default_binding_modes: true,
            },
            is_shorthand: false,
            span: src/integrity/loops.rs:8:9: 8:10 (#13),
        },
    ],
    false,
)
[DEBUG] Checking patkind struct...
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).24), kind: Semi(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).20), kind: Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0)), span: src/integrity/loops.rs:9:9: 9:14 (#0) }), span: src/integrity/loops.rs:9:9: 9:15 (#0) }], expr: None, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).25), rules: DefaultBlock, span: src/integrity/loops.rs:8:16: 10:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).21), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:9:9: 9:10 (#0) }, Expr { hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).23), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) }), span: src/integrity/loops.rs:9:13: 9:14 (#0) }, src/integrity/loops.rs:9:11: 9:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:9:9: 9:10 (#0), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).22), res: Local(HirId(DefId(0:9 ~ a[c74b]::integrity::loops::test_basic_for_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:9:13: 9:14 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/loops.rs:13:27: 13:27 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/loops.rs:13:1: 13:27 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/loops.rs:13:27: 13:27 (#0), span: src/integrity/loops.rs:13:25: 13:25 (#0) }, BodyId { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).24) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4), x#0, None), span: src/integrity/loops.rs:15:9: 15:14 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/loops.rs:15:17: 15:18 (#0) }), span: src/integrity/loops.rs:15:17: 15:18 (#0) }), els: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).3), span: src/integrity/loops.rs:15:5: 15:19 (#0), source: Normal }), span: src/integrity/loops.rs:15:5: 15:19 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).5), kind: Loop(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).21), kind: If(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).9), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).6), kind: Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#15) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).16), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).14), kind: Semi(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).10), kind: Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0)), span: src/integrity/loops.rs:18:9: 18:14 (#0) }), span: src/integrity/loops.rs:18:9: 18:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).15), rules: DefaultBlock, span: src/integrity/loops.rs:17:25: 19:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:25: 19:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).20), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).18), kind: Expr(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).17), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).5)) }, None), span: src/integrity/loops.rs:17:5: 19:6 (#14) }), span: src/integrity/loops.rs:17:5: 19:6 (#14) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).19), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#14), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:5: 19:6 (#14) })), span: src/integrity/loops.rs:17:5: 19:6 (#14) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).22), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#14), targeted_by_break: false }, None, While, src/integrity/loops.rs:17:5: 17:24 (#14)), span: src/integrity/loops.rs:17:5: 19:6 (#0) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).23), rules: DefaultBlock, span: src/integrity/loops.rs:13:28: 25:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/loops.rs:15:17: 15:18 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Loop(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).21), kind: If(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).9), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).6), kind: Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#15) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).16), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).14), kind: Semi(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).10), kind: Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0)), span: src/integrity/loops.rs:18:9: 18:14 (#0) }), span: src/integrity/loops.rs:18:9: 18:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).15), rules: DefaultBlock, span: src/integrity/loops.rs:17:25: 19:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:25: 19:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).20), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).18), kind: Expr(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).17), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).5)) }, None), span: src/integrity/loops.rs:17:5: 19:6 (#14) }), span: src/integrity/loops.rs:17:5: 19:6 (#14) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).19), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#14), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:5: 19:6 (#14) })), span: src/integrity/loops.rs:17:5: 19:6 (#14) }), hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).22), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#14), targeted_by_break: false }, None, While, src/integrity/loops.rs:17:5: 17:24 (#14))
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).9), kind: DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).6), kind: Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#15) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).16), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).14), kind: Semi(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).10), kind: Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0)), span: src/integrity/loops.rs:18:9: 18:14 (#0) }), span: src/integrity/loops.rs:18:9: 18:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).15), rules: DefaultBlock, span: src/integrity/loops.rs:17:25: 19:6 (#0), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:25: 19:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).20), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).18), kind: Expr(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).17), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).5)) }, None), span: src/integrity/loops.rs:17:5: 19:6 (#14) }), span: src/integrity/loops.rs:17:5: 19:6 (#14) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).19), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#14), targeted_by_break: false }, None), span: src/integrity/loops.rs:17:5: 19:6 (#14) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).6), kind: Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:11: 17:24 (#0) })
[DEBUG] > expr kind is Binary(Spanned { node: And, span: src/integrity/loops.rs:17:16: 17:18 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).7), kind: Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) }), span: src/integrity/loops.rs:17:11: 17:15 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).8), kind: Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) }), span: src/integrity/loops.rs:17:19: 17:24 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/loops.rs:17:11: 17:15 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(false), span: src/integrity/loops.rs:17:19: 17:24 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).14), kind: Semi(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).10), kind: Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0)), span: src/integrity/loops.rs:18:9: 18:14 (#0) }), span: src/integrity/loops.rs:18:9: 18:15 (#0) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).15), rules: DefaultBlock, span: src/integrity/loops.rs:17:25: 19:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).11), kind: Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] })), span: src/integrity/loops.rs:18:9: 18:10 (#0) }, Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) }), span: src/integrity/loops.rs:18:13: 18:14 (#0) }, src/integrity/loops.rs:18:11: 18:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/loops.rs:18:9: 18:10 (#0), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).12), res: Local(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).4)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/loops.rs:18:13: 18:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).18), kind: Expr(Expr { hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).17), kind: Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).5)) }, None), span: src/integrity/loops.rs:17:5: 19:6 (#14) }), span: src/integrity/loops.rs:17:5: 19:6 (#14) }], expr: None, hir_id: HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).19), rules: DefaultBlock, span: src/integrity/loops.rs:17:5: 19:6 (#14), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).5)) }, None)
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Break(Destination { label: None, target_id: Ok(HirId(DefId(0:10 ~ a[c74b]::integrity::loops::test_basic_while_loop).5)) }, None)
[DEBUG] Done checking item fn body
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/unorganized.rs:1:1: 78:2 (#0), inject_use_span: src/integrity/unorganized.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:12 ~ a[c74b]::integrity::unorganized::{use#0}) }, ItemId { owner_id: DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation) }, ItemId { owner_id: DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition) }, ItemId { owner_id: DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn) }, ItemId { owner_id: DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr) }, ItemId { owner_id: DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut) }, ItemId { owner_id: DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct) }, ItemId { owner_id: DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct) }] })
[DEBUG] Checking item Use(Path { span: src/integrity/unorganized.rs:1:5: 1:23 (#0), res: [Def(Struct, DefId(2:37372 ~ core[7d5a]::range::Range))], segments: [PathSegment { ident: core#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::integrity::unorganized::{use#0}).1), res: Def(Mod, DefId(2:0 ~ core[7d5a])), args: None, infer_args: false }, PathSegment { ident: range#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::integrity::unorganized::{use#0}).2), res: Def(Mod, DefId(2:10174 ~ core[7d5a]::range)), args: None, infer_args: false }, PathSegment { ident: Range#0, hir_id: HirId(DefId(0:12 ~ a[c74b]::integrity::unorganized::{use#0}).3), res: Err, args: None, infer_args: false }] }, Single)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:4:25: 4:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:4:1: 4:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:4:25: 4:25 (#0), span: src/integrity/unorganized.rs:4:23: 4:23 (#0) }, BodyId { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).16) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).7), x#0, None), span: src/integrity/unorganized.rs:6:9: 6:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).2), kind: Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).3), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:6:13: 6:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).4), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).5), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:6:13: 6:21 (#0) }, []), span: src/integrity/unorganized.rs:6:13: 6:23 (#0) }), els: None, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).6), span: src/integrity/unorganized.rs:6:5: 6:24 (#0), source: Normal }), span: src/integrity/unorganized.rs:6:5: 6:24 (#0) }, Stmt { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).8), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).14), kind: Binding(BindingMode(No, Not), HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).14), x#0, None), span: src/integrity/unorganized.rs:9:9: 9:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).9), kind: Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:9:13: 9:21 (#0) }, []), span: src/integrity/unorganized.rs:9:13: 9:23 (#0) }), els: None, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).13), span: src/integrity/unorganized.rs:9:5: 9:24 (#0), source: Normal }), span: src/integrity/unorganized.rs:9:5: 9:24 (#0) }], expr: None, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:4:26: 10:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).3), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:6:13: 6:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).4), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).5), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:6:13: 6:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:6:13: 6:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).4), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).5), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:3 ~ b[3f10]::value)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:9:13: 9:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:3 ~ b[3f10]::value)
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:9:13: 9:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:9:13: 9:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).11), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:13 ~ a[c74b]::integrity::unorganized::test_let_annotation).12), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:3 ~ b[3f10]::value)
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:12:19: 12:19 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:12:1: 12:19 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:12:19: 12:19 (#0), span: src/integrity/unorganized.rs:12:17: 12:17 (#0) }, BodyId { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).21) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12), kind: Binding(BindingMode(No, Not), HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12), x#0, None), span: src/integrity/unorganized.rs:14:9: 14:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).2), kind: Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:14:24: 14:25 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).3), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:13: 14:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).6), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:13: 14:21 (#0) }, []), span: src/integrity/unorganized.rs:14:13: 14:23 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).7), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).8), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:26: 14:34 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).9), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).10), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:26: 14:34 (#0) }, []), span: src/integrity/unorganized.rs:14:26: 14:36 (#0) }), span: src/integrity/unorganized.rs:14:13: 14:36 (#0) }), els: None, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).11), span: src/integrity/unorganized.rs:14:5: 14:37 (#0), source: Normal }), span: src/integrity/unorganized.rs:14:5: 14:37 (#0) }, Stmt { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).13), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).19), kind: Binding(BindingMode(No, Not), HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).19), y#0, None), span: src/integrity/unorganized.rs:17:9: 17:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).14), kind: Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:17:15: 17:16 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).16), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:17:17: 17:18 (#0) }), span: src/integrity/unorganized.rs:17:13: 17:18 (#0) }), els: None, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).18), span: src/integrity/unorganized.rs:17:5: 17:19 (#0), source: Normal }), span: src/integrity/unorganized.rs:17:5: 17:19 (#0) }], expr: None, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).20), rules: DefaultBlock, span: src/integrity/unorganized.rs:12:20: 18:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:14:24: 14:25 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).3), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:13: 14:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).6), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:13: 14:21 (#0) }, []), span: src/integrity/unorganized.rs:14:13: 14:23 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).7), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).8), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:26: 14:34 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).9), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).10), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:26: 14:34 (#0) }, []), span: src/integrity/unorganized.rs:14:26: 14:36 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:13: 14:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).6), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:13: 14:21 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:13: 14:21 (#0), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).5), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).6), res: Def(Fn, DefId(21:3 ~ b[3f10]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:3 ~ b[3f10]::value)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).8), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:26: 14:34 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).9), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).10), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:14:26: 14:34 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:14:26: 14:34 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).9), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).10), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ c[3801]::value)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:17:15: 17:16 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).16), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:17:17: 17:18 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Binary(Spanned { node: Add, span: src/integrity/unorganized.rs:17:15: 17:16 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).15), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).16), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:17:17: 17:18 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:17:13: 17:14 (#0) })
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).17), res: Local(HirId(DefId(0:14 ~ a[c74b]::integrity::unorganized::test_addition).12)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:20:25: 20:25 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:20:1: 20:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:20:25: 20:25 (#0), span: src/integrity/unorganized.rs:20:23: 20:23 (#0) }, BodyId { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).15) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).1), kind: Item(ItemId { owner_id: DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo) }), span: src/integrity/unorganized.rs:22:5: 24:6 (#0) }, Stmt { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).7), x#0, None), span: src/integrity/unorganized.rs:27:9: 27:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).3), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:27:13: 27:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).5), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:27:13: 27:16 (#0) }, []), span: src/integrity/unorganized.rs:27:13: 27:18 (#0) }), els: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).6), span: src/integrity/unorganized.rs:27:5: 27:19 (#0), source: Normal }), span: src/integrity/unorganized.rs:27:5: 27:19 (#0) }, Stmt { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).8), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).13), kind: Binding(BindingMode(No, Not), HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).13), y#0, None), span: src/integrity/unorganized.rs:30:9: 30:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).9), kind: Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:30:13: 30:16 (#0) }, []), span: src/integrity/unorganized.rs:30:13: 30:18 (#0) }), els: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).12), span: src/integrity/unorganized.rs:30:5: 30:19 (#0), source: Normal }), span: src/integrity/unorganized.rs:30:5: 30:19 (#0) }], expr: None, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).14), rules: DefaultBlock, span: src/integrity/unorganized.rs:20:26: 31:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:22:17: 22:20 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:22:17: 22:20 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:22:5: 22:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:22:20: 22:20 (#0), span: src/integrity/unorganized.rs:22:11: 22:11 (#0) }, BodyId { hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).1), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) }), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) }), hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).2), rules: DefaultBlock, span: src/integrity/unorganized.rs:22:21: 24:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:27:13: 27:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).5), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:27:13: 27:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:27:13: 27:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).5), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:30:13: 30:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).10), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:30:13: 30:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:30:13: 30:16 (#0), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), segments: [PathSegment { ident: boo#0, hir_id: HirId(DefId(0:15 ~ a[c74b]::integrity::unorganized::test_nested_item_fn).11), res: Def(Fn, DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: Return(Ty { hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:22:17: 22:20 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).5), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:22:17: 22:20 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:22:5: 22:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:22:20: 22:20 (#0), span: src/integrity/unorganized.rs:22:11: 22:11 (#0) }, BodyId { hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).1), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) }), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) }), hir_id: HirId(DefId(0:46 ~ a[c74b]::integrity::unorganized::test_nested_item_fn::boo).2), rules: DefaultBlock, span: src/integrity/unorganized.rs:22:21: 24:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:23:9: 23:10 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:33:29: 33:29 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:33:1: 33:29 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:33:29: 33:29 (#0), span: src/integrity/unorganized.rs:33:27: 33:27 (#0) }, BodyId { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).27) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20), kind: Binding(BindingMode(No, Not), HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20), y#0, None), span: src/integrity/unorganized.rs:35:9: 35:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).2), kind: If(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).12), kind: DropTemps(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/integrity/unorganized.rs:35:29: 35:31 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, []), span: src/integrity/unorganized.rs:35:16: 35:28 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, []), span: src/integrity/unorganized.rs:35:32: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#16) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:45: 35:50 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:35:45: 35:50 (#0) }, Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:56: 35:61 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:35:56: 35:61 (#0) })), span: src/integrity/unorganized.rs:35:13: 35:61 (#0) }), els: None, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).19), span: src/integrity/unorganized.rs:35:5: 35:62 (#0), source: Normal }), span: src/integrity/unorganized.rs:35:5: 35:62 (#0) }, Stmt { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).21), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).25), kind: Binding(BindingMode(No, Not), HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).25), z#0, None), span: src/integrity/unorganized.rs:38:9: 38:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).22), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:38:13: 38:14 (#0), res: Local(HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:38:13: 38:14 (#0) }), els: None, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).24), span: src/integrity/unorganized.rs:38:5: 38:15 (#0), source: Normal }), span: src/integrity/unorganized.rs:38:5: 38:15 (#0) }], expr: None, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).26), rules: DefaultBlock, span: src/integrity/unorganized.rs:33:30: 39:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).12), kind: DropTemps(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/integrity/unorganized.rs:35:29: 35:31 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, []), span: src/integrity/unorganized.rs:35:16: 35:28 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, []), span: src/integrity/unorganized.rs:35:32: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#16) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).15), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:45: 35:50 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:35:45: 35:50 (#0) }, Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:56: 35:61 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:35:56: 35:61 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).3), kind: Binary(Spanned { node: And, span: src/integrity/unorganized.rs:35:29: 35:31 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, []), span: src/integrity/unorganized.rs:35:16: 35:28 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, []), span: src/integrity/unorganized.rs:35:32: 35:44 (#0) }), span: src/integrity/unorganized.rs:35:16: 35:44 (#0) })
[DEBUG] > expr kind is Binary(Spanned { node: And, span: src/integrity/unorganized.rs:35:29: 35:31 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).4), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, []), span: src/integrity/unorganized.rs:35:16: 35:28 (#0) }, Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).8), kind: Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, []), span: src/integrity/unorganized.rs:35:32: 35:44 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:16: 35:26 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:16: 35:26 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:35:32: 35:42 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:35:32: 35:42 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).10), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).11), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).13), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).14), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:45: 35:50 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:35:47: 35:48 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).17), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) }), hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).18), rules: DefaultBlock, span: src/integrity/unorganized.rs:35:56: 35:61 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:35:58: 35:59 (#0) })
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:38:13: 38:14 (#0), res: Local(HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20)), args: None, infer_args: true }] }))
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:38:13: 38:14 (#0), res: Local(HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).23), res: Local(HirId(DefId(0:16 ~ a[c74b]::integrity::unorganized::test_if_else_guard_expr).20)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:41:21: 41:21 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:41:1: 41:21 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:41:21: 41:21 (#0), span: src/integrity/unorganized.rs:41:19: 41:19 (#0) }, BodyId { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).32) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).1), kind: Item(ItemId { owner_id: DefId(0:18 ~ a[c74b]::integrity::unorganized::test_assign_mut::{use#0}) }), span: src/integrity/unorganized.rs:42:5: 42:33 (#0) }, Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5), x#0, None), span: src/integrity/unorganized.rs:45:9: 45:14 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).3), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:45:17: 45:18 (#0) }), span: src/integrity/unorganized.rs:45:17: 45:18 (#0) }), els: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).4), span: src/integrity/unorganized.rs:45:5: 45:19 (#0), source: Normal }), span: src/integrity/unorganized.rs:45:5: 45:19 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).6), kind: If(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).16), kind: DropTemps(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).7), kind: Binary(Spanned { node: Or, span: src/integrity/unorganized.rs:47:21: 47:23 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).8), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, []), span: src/integrity/unorganized.rs:47:8: 47:20 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).12), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, []), span: src/integrity/unorganized.rs:47:24: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#17) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).23), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).21), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).17), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0)), span: src/integrity/unorganized.rs:48:9: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:9: 48:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).22), rules: DefaultBlock, span: src/integrity/unorganized.rs:47:37: 49:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:47:37: 49:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).24), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).29), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).25), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0)), span: src/integrity/unorganized.rs:50:9: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:9: 50:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).30), rules: DefaultBlock, span: src/integrity/unorganized.rs:49:12: 51:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:49:12: 51:6 (#0) })), span: src/integrity/unorganized.rs:47:5: 51:6 (#0) }), hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).31), rules: DefaultBlock, span: src/integrity/unorganized.rs:41:22: 52:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Use(Path { span: src/integrity/unorganized.rs:42:9: 42:32 (#0), res: [Def(Trait, DefId(2:8706 ~ core[7d5a]::iter::traits::collect::IntoIterator))], segments: [PathSegment { ident: std#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::integrity::unorganized::test_assign_mut::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::integrity::unorganized::test_assign_mut::{use#0}).2), res: Def(Mod, DefId(2:5658 ~ core[7d5a]::iter)), args: None, infer_args: false }, PathSegment { ident: IntoIterator#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::integrity::unorganized::test_assign_mut::{use#0}).3), res: Err, args: None, infer_args: false }] }, Single)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:45:17: 45:18 (#0) })
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).16), kind: DropTemps(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).7), kind: Binary(Spanned { node: Or, span: src/integrity/unorganized.rs:47:21: 47:23 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).8), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, []), span: src/integrity/unorganized.rs:47:8: 47:20 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).12), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, []), span: src/integrity/unorganized.rs:47:24: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#17) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).23), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).21), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).17), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0)), span: src/integrity/unorganized.rs:48:9: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:9: 48:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).22), rules: DefaultBlock, span: src/integrity/unorganized.rs:47:37: 49:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:47:37: 49:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).24), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).29), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).25), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0)), span: src/integrity/unorganized.rs:50:9: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:9: 50:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).30), rules: DefaultBlock, span: src/integrity/unorganized.rs:49:12: 51:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:49:12: 51:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).7), kind: Binary(Spanned { node: Or, span: src/integrity/unorganized.rs:47:21: 47:23 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).8), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, []), span: src/integrity/unorganized.rs:47:8: 47:20 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).12), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, []), span: src/integrity/unorganized.rs:47:24: 47:36 (#0) }), span: src/integrity/unorganized.rs:47:8: 47:36 (#0) })
[DEBUG] > expr kind is Binary(Spanned { node: Or, span: src/integrity/unorganized.rs:47:21: 47:23 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).8), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, []), span: src/integrity/unorganized.rs:47:8: 47:20 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).12), kind: Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, []), span: src/integrity/unorganized.rs:47:24: 47:36 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).9), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:8: 47:18 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:8: 47:18 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).10), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).11), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).13), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:47:24: 47:34 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:47:24: 47:34 (#0), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).14), res: Def(Mod, DefId(21:0 ~ b[3f10])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).15), res: Def(Fn, DefId(21:4 ~ b[3f10]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(21:4 ~ b[3f10]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).21), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).17), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0)), span: src/integrity/unorganized.rs:48:9: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:9: 48:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).22), rules: DefaultBlock, span: src/integrity/unorganized.rs:47:37: 49:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).18), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:48:9: 48:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).20), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) }, src/integrity/unorganized.rs:48:11: 48:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:48:9: 48:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).19), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:48:13: 48:14 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).29), kind: Semi(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).25), kind: Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0)), span: src/integrity/unorganized.rs:50:9: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:9: 50:15 (#0) }], expr: None, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).30), rules: DefaultBlock, span: src/integrity/unorganized.rs:49:12: 51:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Assign(Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).26), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:50:9: 50:10 (#0) }, Expr { hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).28), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) }, src/integrity/unorganized.rs:50:11: 50:12 (#0))
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:50:9: 50:10 (#0), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).27), res: Local(HirId(DefId(0:17 ~ a[c74b]::integrity::unorganized::test_assign_mut).5)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/unorganized.rs:50:13: 50:14 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking item Use(Path { span: src/integrity/unorganized.rs:42:9: 42:32 (#0), res: [Def(Trait, DefId(2:8706 ~ core[7d5a]::iter::traits::collect::IntoIterator))], segments: [PathSegment { ident: std#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::integrity::unorganized::test_assign_mut::{use#0}).1), res: Def(Mod, DefId(1:0 ~ std[e3cd])), args: None, infer_args: false }, PathSegment { ident: iter#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::integrity::unorganized::test_assign_mut::{use#0}).2), res: Def(Mod, DefId(2:5658 ~ core[7d5a]::iter)), args: None, infer_args: false }, PathSegment { ident: IntoIterator#0, hir_id: HirId(DefId(0:18 ~ a[c74b]::integrity::unorganized::test_assign_mut::{use#0}).3), res: Err, args: None, infer_args: false }] }, Single)
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:54:17: 54:17 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:54:1: 54:17 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:54:17: 54:17 (#0), span: src/integrity/unorganized.rs:54:15: 54:15 (#0) }, BodyId { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).12) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).1), kind: Item(ItemId { owner_id: DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo) }), span: src/integrity/unorganized.rs:55:5: 59:6 (#0) }, Stmt { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).10), kind: Binding(BindingMode(No, Not), HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).10), boo#0, None), span: src/integrity/unorganized.rs:62:9: 62:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).3), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:62:15: 62:18 (#0), res: Def(Struct, DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).4), res: Def(Struct, DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }, span: src/integrity/unorganized.rs:62:21: 62:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }, span: src/integrity/unorganized.rs:62:27: 62:34 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:62:15: 62:36 (#0) }), els: None, hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).9), span: src/integrity/unorganized.rs:62:5: 62:37 (#0), source: Normal }), span: src/integrity/unorganized.rs:62:5: 62:37 (#0) }], expr: None, hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).11), rules: DefaultBlock, span: src/integrity/unorganized.rs:54:18: 63:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/unorganized.rs:57:9: 57:15 (#0), vis_span: src/integrity/unorganized.rs:57:9: 57:9 (#0), ident: x#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).3), def_id: DefId(0:47 ~ a[c74b]::integrity::unorganized::test_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:57:12: 57:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:57:12: 57:15 (#0) } }, FieldDef { span: src/integrity/unorganized.rs:58:9: 58:16 (#0), vis_span: src/integrity/unorganized.rs:58:9: 58:9 (#0), ident: y#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).6), def_id: DefId(0:21 ~ a[c74b]::integrity::unorganized::test_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:58:12: 58:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:58:12: 58:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:55:15: 55:15 (#0), span: src/integrity/unorganized.rs:55:15: 55:15 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:62:15: 62:18 (#0), res: Def(Struct, DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).4), res: Def(Struct, DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }, span: src/integrity/unorganized.rs:62:21: 62:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }, span: src/integrity/unorganized.rs:62:27: 62:34 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:62:15: 62:18 (#0), res: Def(Struct, DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).4), res: Def(Struct, DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).5), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) }, span: src/integrity/unorganized.rs:62:21: 62:25 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).7), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:19 ~ a[c74b]::integrity::unorganized::test_struct).8), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) }, span: src/integrity/unorganized.rs:62:27: 62:34 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:62:24: 62:25 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:62:30: 62:34 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/unorganized.rs:57:9: 57:15 (#0), vis_span: src/integrity/unorganized.rs:57:9: 57:9 (#0), ident: x#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).3), def_id: DefId(0:47 ~ a[c74b]::integrity::unorganized::test_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:57:12: 57:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:57:12: 57:15 (#0) } }, FieldDef { span: src/integrity/unorganized.rs:58:9: 58:16 (#0), vis_span: src/integrity/unorganized.rs:58:9: 58:9 (#0), ident: y#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).6), def_id: DefId(0:21 ~ a[c74b]::integrity::unorganized::test_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:58:12: 58:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:20 ~ a[c74b]::integrity::unorganized::test_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:58:12: 58:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:55:15: 55:15 (#0), span: src/integrity/unorganized.rs:55:15: 55:15 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/unorganized.rs:65:20: 65:20 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/unorganized.rs:65:1: 65:20 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:65:20: 65:20 (#0), span: src/integrity/unorganized.rs:65:18: 65:18 (#0) }, BodyId { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).28) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).1), kind: Item(ItemId { owner_id: DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo) }), span: src/integrity/unorganized.rs:66:5: 70:6 (#0) }, Stmt { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).2), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).26), kind: Binding(BindingMode(No, Not), HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).26), boo#0, None), span: src/integrity/unorganized.rs:73:9: 73:12 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).3), kind: If(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) }), span: src/integrity/unorganized.rs:73:18: 73:30 (#18) }, Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:73:31: 75:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:75:12: 77:6 (#0) })), span: src/integrity/unorganized.rs:73:15: 77:6 (#0) }), els: None, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).25), span: src/integrity/unorganized.rs:73:5: 77:7 (#0), source: Normal }), span: src/integrity/unorganized.rs:73:5: 77:7 (#0) }], expr: None, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).27), rules: DefaultBlock, span: src/integrity/unorganized.rs:65:21: 78:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/unorganized.rs:68:9: 68:15 (#0), vis_span: src/integrity/unorganized.rs:68:9: 68:9 (#0), ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).3), def_id: DefId(0:48 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:68:12: 68:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:68:12: 68:15 (#0) } }, FieldDef { span: src/integrity/unorganized.rs:69:9: 69:16 (#0), vis_span: src/integrity/unorganized.rs:69:9: 69:9 (#0), ident: y#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).6), def_id: DefId(0:24 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:69:12: 69:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:69:12: 69:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:66:15: 66:15 (#0), span: src/integrity/unorganized.rs:66:15: 66:15 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) }), span: src/integrity/unorganized.rs:73:18: 73:30 (#18) }, Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:73:31: 75:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:75:12: 77:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] > expr kind is If(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).8), kind: DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) }), span: src/integrity/unorganized.rs:73:18: 73:30 (#18) }, Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).16), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:73:31: 75:6 (#0) }, Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).17), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None), span: src/integrity/unorganized.rs:75:12: 77:6 (#0) }))
[DEBUG] > expr kind is DropTemps(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).4), kind: Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, []), span: src/integrity/unorganized.rs:73:18: 73:30 (#0) })
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).5), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] })), span: src/integrity/unorganized.rs:73:18: 73:28 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/unorganized.rs:73:18: 73:28 (#0), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).6), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: boolean#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).7), res: Def(Fn, DefId(20:4 ~ c[3801]::boolean)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:4 ~ c[3801]::boolean)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).9), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:74:9: 74:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).15), rules: DefaultBlock, span: src/integrity/unorganized.rs:73:31: 75:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:74:9: 74:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).10), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).11), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) }, span: src/integrity/unorganized.rs:74:15: 74:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).13), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).14), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) }, span: src/integrity/unorganized.rs:74:21: 74:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/unorganized.rs:74:18: 74:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:74:24: 74:28 (#0) })
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).18), kind: Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None), span: src/integrity/unorganized.rs:76:9: 76:30 (#0) }), hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).24), rules: DefaultBlock, span: src/integrity/unorganized.rs:75:12: 77:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Struct(Resolved(None, Path { span: src/integrity/unorganized.rs:76:9: 76:12 (#0), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), segments: [PathSegment { ident: Boo#0, hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).19), res: Def(Struct, DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).20), ident: x#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).21), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) }, span: src/integrity/unorganized.rs:76:15: 76:19 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).22), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:22 ~ a[c74b]::integrity::unorganized::test_if_struct).23), kind: Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) }, span: src/integrity/unorganized.rs:76:21: 76:28 (#0), is_shorthand: false }], None)
[DEBUG] Trying to get type of adt (struct) DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo)
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: src/integrity/unorganized.rs:76:18: 76:19 (#0) })
[DEBUG] > expr kind is Lit(Spanned { node: Bool(true), span: src/integrity/unorganized.rs:76:24: 76:28 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/unorganized.rs:68:9: 68:15 (#0), vis_span: src/integrity/unorganized.rs:68:9: 68:9 (#0), ident: x#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).3), def_id: DefId(0:48 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo::x), ty: Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).1), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:68:12: 68:15 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:68:12: 68:15 (#0) } }, FieldDef { span: src/integrity/unorganized.rs:69:9: 69:16 (#0), vis_span: src/integrity/unorganized.rs:69:9: 69:9 (#0), ident: y#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).6), def_id: DefId(0:24 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo::y), ty: Ty { hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).4), kind: Path(Resolved(None, Path { span: src/integrity/unorganized.rs:69:12: 69:16 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:23 ~ a[c74b]::integrity::unorganized::test_if_struct::Boo).5), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/unorganized.rs:69:12: 69:16 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/unorganized.rs:66:15: 66:15 (#0), span: src/integrity/unorganized.rs:66:15: 66:15 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/methods.rs:1:1: 17:2 (#0), inject_use_span: src/integrity/methods.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:26 ~ a[c74b]::integrity::methods::Foo) }, ItemId { owner_id: DefId(0:28 ~ a[c74b]::integrity::methods::{impl#0}) }, ItemId { owner_id: DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method) }] })
[DEBUG] Checking item Struct(Struct { fields: [FieldDef { span: src/integrity/methods.rs:1:13: 1:19 (#0), vis_span: src/integrity/methods.rs:1:13: 1:13 (#0), ident: y#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::integrity::methods::Foo).3), def_id: DefId(0:27 ~ a[c74b]::integrity::methods::Foo::y), ty: Ty { hir_id: HirId(DefId(0:26 ~ a[c74b]::integrity::methods::Foo).1), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:1:16: 1:19 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:26 ~ a[c74b]::integrity::methods::Foo).2), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/methods.rs:1:16: 1:19 (#0) } }], recovered: No }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/methods.rs:1:11: 1:11 (#0), span: src/integrity/methods.rs:1:11: 1:11 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking item Impl(Impl { constness: NotConst, safety: Safe, polarity: "positive", defaultness: Final, defaultness_span: None, generics: Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/methods.rs:3:9: 3:9 (#0), span: src/integrity/methods.rs:3:5: 3:5 (#0) }, of_trait: None, self_ty: Ty { hir_id: HirId(DefId(0:28 ~ a[c74b]::integrity::methods::{impl#0}).1), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:3:6: 3:9 (#0), res: Def(Struct, DefId(0:26 ~ a[c74b]::integrity::methods::Foo)), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:28 ~ a[c74b]::integrity::methods::{impl#0}).2), res: Def(Struct, DefId(0:26 ~ a[c74b]::integrity::methods::Foo)), args: None, infer_args: false }] })), span: src/integrity/methods.rs:3:6: 3:9 (#0) }, items: [ImplItemRef { id: ImplItemId { owner_id: DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar) }, ident: bar#0, kind: Fn { has_self: true }, span: src/integrity/methods.rs:5:5: 7:6 (#0), trait_item_def_id: None }] })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).5), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:6:9: 6:10 (#0), res: Local(HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).6), res: Local(HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).4)), args: None, infer_args: true }] })), span: src/integrity/methods.rs:6:9: 6:10 (#0) }), hir_id: HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).7), rules: DefaultBlock, span: src/integrity/methods.rs:5:34: 7:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/methods.rs:6:9: 6:10 (#0), res: Local(HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).4)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).6), res: Local(HirId(DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar).4)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/methods.rs:10:23: 10:23 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/methods.rs:10:1: 10:23 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/methods.rs:10:23: 10:23 (#0), span: src/integrity/methods.rs:10:21: 10:21 (#0) }, BodyId { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).15) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7), f#0, None), span: src/integrity/methods.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).2), kind: Struct(Resolved(None, Path { span: src/integrity/methods.rs:11:13: 11:16 (#0), res: Def(Struct, DefId(0:26 ~ a[c74b]::integrity::methods::Foo)), segments: [PathSegment { ident: Foo#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).3), res: Def(Struct, DefId(0:26 ~ a[c74b]::integrity::methods::Foo)), args: None, infer_args: true }] }), [ExprField { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).4), ident: y#0, expr: Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).5), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: src/integrity/methods.rs:11:22: 11:23 (#0) }), span: src/integrity/methods.rs:11:22: 11:23 (#0) }, span: src/integrity/methods.rs:11:19: 11:23 (#0), is_shorthand: false }], None), span: src/integrity/methods.rs:11:13: 11:25 (#0) }), els: None, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).6), span: src/integrity/methods.rs:11:5: 11:26 (#0), source: Normal }), span: src/integrity/methods.rs:11:5: 11:26 (#0) }, Stmt { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).13), kind: Semi(Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).8), kind: MethodCall(PathSegment { ident: bar#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).10), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] })), span: src/integrity/methods.rs:13:5: 13:6 (#0) }, [Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) }), span: src/integrity/methods.rs:13:11: 13:12 (#0) }], src/integrity/methods.rs:13:7: 13:13 (#0)), span: src/integrity/methods.rs:13:5: 13:13 (#0) }), span: src/integrity/methods.rs:13:5: 13:14 (#0) }], expr: None, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).14), rules: DefaultBlock, span: src/integrity/methods.rs:10:24: 17:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] Checking a statement...
[DEBUG] > expr kind is MethodCall(PathSegment { ident: bar#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).10), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] })), span: src/integrity/methods.rs:13:5: 13:6 (#0) }, [Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) }), span: src/integrity/methods.rs:13:11: 13:12 (#0) }], src/integrity/methods.rs:13:7: 13:13 (#0))
[DEBUG] Getting the ty of an assoc fn
[DEBUG] Trying to get type of function DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar)
[DEBUG] It is Ty { property: FlowPair(Universal, Specific({"a"})), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Opaque }, Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }], Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) })
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is MethodCall(PathSegment { ident: bar#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).10), kind: Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] })), span: src/integrity/methods.rs:13:5: 13:6 (#0) }, [Expr { hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).12), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) }), span: src/integrity/methods.rs:13:11: 13:12 (#0) }], src/integrity/methods.rs:13:7: 13:13 (#0))
[DEBUG] Getting the ty of an assoc fn
[DEBUG] Trying to get type of function DefId(0:49 ~ a[c74b]::integrity::methods::{impl#0}::bar)
[DEBUG] It is Ty { property: FlowPair(Universal, Specific({"a"})), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Opaque }, Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }], Ty { property: FlowPair(Specific({"a"}), Specific({"a"})), kind: Opaque }) }
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/integrity/methods.rs:13:5: 13:6 (#0), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).11), res: Local(HirId(DefId(0:29 ~ a[c74b]::integrity::methods::test_basic_method).7)), args: None, infer_args: true }] }))
[DEBUG] > expr kind is Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/methods.rs:13:11: 13:12 (#0) })
[DEBUG] Done checking item fn body
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/integrity/enums.rs:1:1: 12:2 (#0), inject_use_span: src/integrity/enums.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:31 ~ a[c74b]::integrity::enums::Foo) }, ItemId { owner_id: DefId(0:50 ~ a[c74b]::integrity::enums::Something) }, ItemId { owner_id: DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple) }] })
[DEBUG] Checking item Enum(EnumDef { variants: [Variant { ident: Boo#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).1), def_id: DefId(0:32 ~ a[c74b]::integrity::enums::Foo::Boo), data: Tuple([FieldDef { span: src/integrity/enums.rs:2:9: 2:12 (#0), vis_span: src/integrity/enums.rs:2:9: 2:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).5), def_id: DefId(0:34 ~ a[c74b]::integrity::enums::Foo::Boo::0), ty: Ty { hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).3), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:2:9: 2:12 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).4), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/enums.rs:2:9: 2:12 (#0) } }], HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).2), DefId(0:33 ~ a[c74b]::integrity::enums::Foo::Boo::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:2:5: 2:13 (#0) }, Variant { ident: Bar#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).6), def_id: DefId(0:35 ~ a[c74b]::integrity::enums::Foo::Bar), data: Tuple([FieldDef { span: src/integrity/enums.rs:3:9: 3:13 (#0), vis_span: src/integrity/enums.rs:3:9: 3:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).10), def_id: DefId(0:37 ~ a[c74b]::integrity::enums::Foo::Bar::0), ty: Ty { hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).8), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:3:9: 3:13 (#0), res: PrimTy(Bool), segments: [PathSegment { ident: bool#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).9), res: PrimTy(Bool), args: None, infer_args: false }] })), span: src/integrity/enums.rs:3:9: 3:13 (#0) } }], HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).7), DefId(0:36 ~ a[c74b]::integrity::enums::Foo::Bar::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:3:5: 3:14 (#0) }, Variant { ident: Baz#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).11), def_id: DefId(0:38 ~ a[c74b]::integrity::enums::Foo::Baz), data: Tuple([FieldDef { span: src/integrity/enums.rs:4:9: 4:13 (#0), vis_span: src/integrity/enums.rs:4:9: 4:9 (#0), ident: 0#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).15), def_id: DefId(0:40 ~ a[c74b]::integrity::enums::Foo::Baz::0), ty: Ty { hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).13), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:4:9: 4:13 (#0), res: PrimTy(Char), segments: [PathSegment { ident: char#0, hir_id: HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).14), res: PrimTy(Char), args: None, infer_args: false }] })), span: src/integrity/enums.rs:4:9: 4:13 (#0) } }], HirId(DefId(0:31 ~ a[c74b]::integrity::enums::Foo).12), DefId(0:39 ~ a[c74b]::integrity::enums::Foo::Baz::{constructor#0})), disr_expr: None, span: src/integrity/enums.rs:4:5: 4:14 (#0) }] }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:1:9: 1:9 (#0), span: src/integrity/enums.rs:1:9: 1:9 (#0) })
[DEBUG] Checking item Struct(Tuple([FieldDef { span: src/integrity/enums.rs:8:18: 8:21 (#0), vis_span: src/integrity/enums.rs:8:18: 8:18 (#0), ident: 0#0, hir_id: HirId(DefId(0:50 ~ a[c74b]::integrity::enums::Something).4), def_id: DefId(0:52 ~ a[c74b]::integrity::enums::Something::0), ty: Ty { hir_id: HirId(DefId(0:50 ~ a[c74b]::integrity::enums::Something).2), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:8:18: 8:21 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:50 ~ a[c74b]::integrity::enums::Something).3), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/integrity/enums.rs:8:18: 8:21 (#0) } }], HirId(DefId(0:50 ~ a[c74b]::integrity::enums::Something).1), DefId(0:51 ~ a[c74b]::integrity::enums::Something::{constructor#0})), Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:8:22: 8:22 (#0), span: src/integrity/enums.rs:8:17: 8:17 (#0) })
[DEBUG] checking struct ...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/integrity/enums.rs:10:23: 10:23 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/integrity/enums.rs:10:1: 10:23 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/integrity/enums.rs:10:23: 10:23 (#0), span: src/integrity/enums.rs:10:21: 10:21 (#0) }, BodyId { hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).9) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).7), kind: Binding(BindingMode(No, Not), HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).7), s#0, None), span: src/integrity/enums.rs:11:9: 11:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).2), kind: Call(Expr { hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).3), kind: Path(Resolved(None, Path { span: src/integrity/enums.rs:11:13: 11:22 (#0), res: Def(Ctor(Struct, Fn), DefId(0:51 ~ a[c74b]::integrity::enums::Something::{constructor#0})), segments: [PathSegment { ident: Something#0, hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).4), res: Def(Ctor(Struct, Fn), DefId(0:51 ~ a[c74b]::integrity::enums::Something::{constructor#0})), args: None, infer_args: true }] })), span: src/integrity/enums.rs:11:13: 11:22 (#0) }, [Expr { hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).5), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/integrity/enums.rs:11:23: 11:24 (#0) }), span: src/integrity/enums.rs:11:23: 11:24 (#0) }]), span: src/integrity/enums.rs:11:13: 11:25 (#0) }), els: None, hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).6), span: src/integrity/enums.rs:11:5: 11:26 (#0), source: Normal }), span: src/integrity/enums.rs:11:5: 11:26 (#0) }], expr: None, hir_id: HirId(DefId(0:41 ~ a[c74b]::integrity::enums::test_struct_tuple).8), rules: DefaultBlock, span: src/integrity/enums.rs:10:24: 12:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] Done checking item fn body
[DEBUG] Checking item Mod(Mod { spans: ModSpans { inner_span: src/provenance.rs:1:1: 39:2 (#0), inject_use_span: src/provenance.rs:1:1: 1:1 (#0) }, item_ids: [ItemId { owner_id: DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance) }, ItemId { owner_id: DefId(0:44 ~ a[c74b]::provenance::test_fn_id) }, ItemId { owner_id: DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd) }] })
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:1:27: 1:27 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:1:1: 1:27 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:1:27: 1:27 (#0), span: src/provenance.rs:1:25: 1:25 (#0) }, BodyId { hir_id: HirId(DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance).1), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance).4), kind: Binding(BindingMode(No, Not), HirId(DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance).4), x#0, None), span: src/provenance.rs:3:9: 3:10 (#0), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance).2), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: src/provenance.rs:3:13: 3:14 (#0) }), span: src/provenance.rs:3:13: 3:14 (#0) }), els: None, hir_id: HirId(DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance).3), span: src/provenance.rs:3:5: 3:15 (#0), source: Normal }), span: src/provenance.rs:3:5: 3:15 (#0) }], expr: None, hir_id: HirId(DefId(0:43 ~ a[c74b]::provenance::test_basic_provenance).5), rules: DefaultBlock, span: src/provenance.rs:1:28: 8:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking a let stmt!
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking a let stmt!
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:10:16: 10:16 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:10:1: 10:16 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:10:16: 10:16 (#0), span: src/provenance.rs:10:14: 10:14 (#0) }, BodyId { hir_id: HirId(DefId(0:44 ~ a[c74b]::provenance::test_fn_id).3) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:44 ~ a[c74b]::provenance::test_fn_id)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:44 ~ a[c74b]::provenance::test_fn_id).1), kind: Item(ItemId { owner_id: DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo) }), span: src/provenance.rs:12:5: 14:6 (#0) }], expr: None, hir_id: HirId(DefId(0:44 ~ a[c74b]::provenance::test_fn_id).2), rules: DefaultBlock, span: src/provenance.rs:10:17: 15:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is NOT an expr
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:15: 12:18 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:15: 12:18 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:12:23: 12:26 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:12:23: 12:26 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:12:5: 12:26 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:12:26: 12:26 (#0), span: src/provenance.rs:12:11: 12:11 (#0) }, BodyId { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] })), span: src/provenance.rs:13:9: 13:10 (#0) }), hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).5), rules: DefaultBlock, span: src/provenance.rs:12:27: 14:6 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:13:9: 13:10 (#0), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).4), res: Local(HirId(DefId(0:53 ~ a[c74b]::provenance::test_fn_id::foo).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [], output: DefaultReturn(src/provenance.rs:17:18: 17:18 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:17:1: 17:18 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:17:18: 17:18 (#0), span: src/provenance.rs:17:16: 17:16 (#0) }, BodyId { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).11) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).1), kind: Item(ItemId { owner_id: DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id) }), span: src/provenance.rs:19:5: 33:6 (#0) }, Stmt { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).9), kind: Semi(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).2), kind: Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }]), span: src/provenance.rs:38:5: 38:19 (#0) }), span: src/provenance.rs:38:5: 38:20 (#0) }], expr: None, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).10), rules: DefaultBlock, span: src/provenance.rs:17:19: 39:2 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:14: 19:17 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:14: 19:17 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:22: 19:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:22: 19:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:19:5: 19:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:19:25: 19:25 (#0), span: src/provenance.rs:19:10: 19:10 (#0) }, BodyId { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).3), kind: Item(ItemId { owner_id: DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd) }), span: src/provenance.rs:22:9: 30:10 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).4), kind: Call(Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }]), span: src/provenance.rs:32:9: 32:15 (#0) }), hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).9), rules: DefaultBlock, span: src/provenance.rs:19:26: 33:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking a statement...
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ c[3801]::value)
[DEBUG] The last stmt is NOT an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] })), span: src/provenance.rs:38:5: 38:7 (#0) }, [Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).5), kind: Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, []), span: src/provenance.rs:38:8: 38:18 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:5: 38:7 (#0), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), segments: [PathSegment { ident: id#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).4), res: Def(Fn, DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).6), kind: Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] })), span: src/provenance.rs:38:8: 38:16 (#0) }, [])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:38:8: 38:16 (#0), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).7), res: Def(Mod, DefId(20:0 ~ c[3801])), args: None, infer_args: true }, PathSegment { ident: value#0, hir_id: HirId(DefId(0:45 ~ a[c74b]::provenance::test_fn_iddd).8), res: Def(Fn, DefId(20:3 ~ c[3801]::value)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(20:3 ~ c[3801]::value)
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:14: 19:17 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:14: 19:17 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:19:22: 19:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:19:22: 19:25 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:19:5: 19:25 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:19:25: 19:25 (#0), span: src/provenance.rs:19:10: 19:10 (#0) }, BodyId { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).3), kind: Item(ItemId { owner_id: DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd) }), span: src/provenance.rs:22:9: 30:10 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).4), kind: Call(Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }]), span: src/provenance.rs:32:9: 32:15 (#0) }), hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).9), rules: DefaultBlock, span: src/provenance.rs:19:26: 33:6 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] })), span: src/provenance.rs:32:9: 32:12 (#0) }, [Expr { hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] })), span: src/provenance.rs:32:13: 32:14 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:9: 32:12 (#0), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), segments: [PathSegment { ident: idd#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).6), res: Def(Fn, DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:32:13: 32:14 (#0), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).8), res: Local(HirId(DefId(0:54 ~ a[c74b]::provenance::test_fn_iddd::id).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).11), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:19: 22:22 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).12), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:19: 22:22 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).13), kind: Path(Resolved(None, Path { span: src/provenance.rs:22:27: 22:30 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).14), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:22:27: 22:30 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:22:9: 22:30 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:22:30: 22:30 (#0), span: src/provenance.rs:22:15: 22:15 (#0) }, BodyId { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).10) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd)
[DEBUG] > expr kind is Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).3), kind: Item(ItemId { owner_id: DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd) }), span: src/provenance.rs:25:13: 27:14 (#0) }], expr: Some(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).4), kind: Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }]), span: src/provenance.rs:29:13: 29:20 (#0) }), hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).9), rules: DefaultBlock, span: src/provenance.rs:22:31: 30:10 (#0), targeted_by_break: false }, None)
[DEBUG] Checking a statement...
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Call(Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).5), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] })), span: src/provenance.rs:29:13: 29:17 (#0) }, [Expr { hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:29:18: 29:19 (#0) }])
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:13: 29:17 (#0), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), segments: [PathSegment { ident: iddd#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).6), res: Def(Fn, DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)), args: None, infer_args: true }] }))
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:29:18: 29:19 (#0), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).8), res: Local(HirId(DefId(0:55 ~ a[c74b]::provenance::test_fn_iddd::id::idd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
[DEBUG] Checking item Fn(FnSig { header: FnHeader { safety: Safe, constness: NotConst, asyncness: NotAsync, abi: Rust }, decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).7), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:24: 25:27 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).8), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:24: 25:27 (#0) }], output: Return(Ty { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).9), kind: Path(Resolved(None, Path { span: src/provenance.rs:25:32: 25:35 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).10), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: src/provenance.rs:25:32: 25:35 (#0) }), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, span: src/provenance.rs:25:13: 25:35 (#0) }, Generics { params: [], predicates: [], has_where_clause_predicates: false, where_clause_span: src/provenance.rs:25:35: 25:35 (#0), span: src/provenance.rs:25:20: 25:20 (#0) }, BodyId { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).6) })
[DEBUG] Preapring to check item fn body...
[DEBUG] Trying to get type of function DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd)
[DEBUG] > expr kind is Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).3), kind: Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] })), span: src/provenance.rs:26:17: 26:18 (#0) }), hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).5), rules: DefaultBlock, span: src/provenance.rs:25:36: 27:14 (#0), targeted_by_break: false }, None)
[DEBUG] The last stmt is an expr
[DEBUG] > expr kind is Path(Resolved(None, Path { span: src/provenance.rs:26:17: 26:18 (#0), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), segments: [PathSegment { ident: z#0, hir_id: HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).4), res: Local(HirId(DefId(0:56 ~ a[c74b]::provenance::test_fn_iddd::id::idd::iddd).2)), args: None, infer_args: true }] }))
[DEBUG] Done checking item fn body
