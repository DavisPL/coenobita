[DEBUG] Trying to get func ty of defid DefId(0:23 ~ futures_core[4a49]::future::{impl#0}::is_terminated)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:20 ~ futures_core[4a49]::future::FusedFuture::is_terminated)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:26 ~ futures_core[4a49]::future::{impl#1}::is_terminated)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:20 ~ futures_core[4a49]::future::FusedFuture::is_terminated)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ futures_core[4a49]::future::{impl#2}::try_poll)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:40212 ~ core[7d5a]::future::future::Future::poll)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ futures_core[4a49]::future::if_alloc::{impl#0}::is_terminated)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:20 ~ futures_core[4a49]::future::FusedFuture::is_terminated)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:53 ~ futures_core[4a49]::future::if_alloc::{impl#1}::is_terminated)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:20 ~ futures_core[4a49]::future::FusedFuture::is_terminated)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:77 ~ futures_core[4a49]::stream::{impl#0}::poll_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:72 ~ futures_core[4a49]::stream::Stream::poll_next)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:10098 ~ core[7d5a]::pin::{impl#5}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:78 ~ futures_core[4a49]::stream::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:73 ~ futures_core[4a49]::stream::Stream::size_hint)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:82 ~ futures_core[4a49]::stream::{impl#1}::poll_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:72 ~ futures_core[4a49]::stream::Stream::poll_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10106 ~ core[7d5a]::pin::{impl#7}::as_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:10123 ~ core[7d5a]::pin::{impl#10}::get_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ futures_core[4a49]::stream::{impl#1}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:73 ~ futures_core[4a49]::stream::Stream::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:88 ~ futures_core[4a49]::stream::{impl#2}::is_terminated)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:85 ~ futures_core[4a49]::stream::FusedStream::is_terminated)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:91 ~ futures_core[4a49]::stream::{impl#3}::is_terminated)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:85 ~ futures_core[4a49]::stream::FusedStream::is_terminated)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:109 ~ futures_core[4a49]::stream::{impl#4}::try_poll_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:72 ~ futures_core[4a49]::stream::Stream::poll_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:116 ~ futures_core[4a49]::stream::if_alloc::{impl#0}::poll_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:72 ~ futures_core[4a49]::stream::Stream::poll_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10098 ~ core[7d5a]::pin::{impl#5}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:117 ~ futures_core[4a49]::stream::if_alloc::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:73 ~ futures_core[4a49]::stream::Stream::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ futures_core[4a49]::stream::if_alloc::{impl#1}::poll_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:72 ~ futures_core[4a49]::stream::Stream::poll_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10125 ~ core[7d5a]::pin::{impl#10}::map_unchecked_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ futures_core[4a49]::stream::if_alloc::{impl#1}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:73 ~ futures_core[4a49]::stream::Stream::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ futures_core[4a49]::stream::if_alloc::{impl#2}::is_terminated)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:85 ~ futures_core[4a49]::stream::FusedStream::is_terminated)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:152 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:37950 ~ core[7d5a]::sync::atomic::{impl#78}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5155 ~ core[7d5a]::cell::{impl#51}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10436 ~ core[7d5a]::result::{impl#0}::unwrap_or_else)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:37964 ~ core[7d5a]::sync::atomic::{impl#78}::compare_exchange)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5160 ~ core[7d5a]::cell::{impl#52}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5160 ~ core[7d5a]::cell::{impl#52}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:37964 ~ core[7d5a]::sync::atomic::{impl#78}::compare_exchange)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:307:54: 307:65 (#0), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), segments: [PathSegment { ident: REGISTERING#0, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).109), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:307:54: 307:65 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:307:68: 307:74 (#0), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), segments: [PathSegment { ident: WAKING#0, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).111), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:307:68: 307:74 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).120), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#19), res: Local(HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).112)), segments: [PathSegment { ident: left_val#19, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).122), res: Local(HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).112)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#19) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#19) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).123), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#19), res: Local(HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).113)), segments: [PathSegment { ident: right_val#19, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).125), res: Local(HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).113)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#19) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#19) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5160 ~ core[7d5a]::cell::{impl#52}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:37962 ~ core[7d5a]::sync::atomic::{impl#78}::swap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14922 ~ core[7d5a]::task::wake::{impl#8}::wake)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14923 ~ core[7d5a]::task::wake::{impl#8}::wake_by_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).213), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:37: 356:39 (#0) }, Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).214), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:31: 356:36 (#0), res: Local(HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).204)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).215), res: Local(HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).204)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:31: 356:36 (#0) }, Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).216), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:40: 356:51 (#0), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), segments: [PathSegment { ident: REGISTERING#0, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).217), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:40: 356:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:31: 356:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).218), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:61: 356:63 (#0) }, Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).219), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:55: 356:60 (#0), res: Local(HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).204)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).220), res: Local(HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).204)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:55: 356:60 (#0) }, Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).221), kind: Binary(Spanned { node: BitOr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:76: 356:77 (#0) }, Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).222), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:64: 356:75 (#0), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), segments: [PathSegment { ident: REGISTERING#0, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).223), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:64: 356:75 (#0) }, Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).224), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:78: 356:84 (#0), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), segments: [PathSegment { ident: WAKING#0, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).225), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:78: 356:84 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:64: 356:84 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:55: 356:84 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).214), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:31: 356:36 (#0), res: Local(HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).204)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).215), res: Local(HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).204)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:31: 356:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).216), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:40: 356:51 (#0), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), segments: [PathSegment { ident: REGISTERING#0, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).217), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:40: 356:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).219), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:55: 356:60 (#0), res: Local(HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).204)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).220), res: Local(HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).204)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:55: 356:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).221), kind: Binary(Spanned { node: BitOr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:76: 356:77 (#0) }, Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).222), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:64: 356:75 (#0), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), segments: [PathSegment { ident: REGISTERING#0, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).223), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:64: 356:75 (#0) }, Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).224), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:78: 356:84 (#0), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), segments: [PathSegment { ident: WAKING#0, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).225), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:78: 356:84 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:64: 356:84 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).222), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:64: 356:75 (#0), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), segments: [PathSegment { ident: REGISTERING#0, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).223), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:64: 356:75 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).224), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:78: 356:84 (#0), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), segments: [PathSegment { ident: WAKING#0, hir_id: HirId(DefId(0:155 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::register).225), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:356:78: 356:84 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:157 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::wake)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:14922 ~ core[7d5a]::task::wake::{impl#8}::wake)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:37970 ~ core[7d5a]::sync::atomic::{impl#78}::fetch_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5160 ~ core[7d5a]::cell::{impl#52}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:37968 ~ core[7d5a]::sync::atomic::{impl#78}::fetch_and)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).53), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:42: 401:44 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).54), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:27: 401:29 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:21: 401:26 (#0), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).56), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:21: 401:26 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:30: 401:41 (#0), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), segments: [PathSegment { ident: REGISTERING#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).58), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:30: 401:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:21: 401:41 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).59), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:51: 401:53 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:45: 401:50 (#0), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).61), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:45: 401:50 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).62), kind: Binary(Spanned { node: BitOr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:66: 401:67 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:54: 401:65 (#0), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), segments: [PathSegment { ident: REGISTERING#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).64), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:54: 401:65 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:68: 401:74 (#0), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), segments: [PathSegment { ident: WAKING#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).66), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:68: 401:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:54: 401:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:45: 401:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:21: 401:74 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).67), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:84: 401:86 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:78: 401:83 (#0), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).69), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:78: 401:83 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:87: 401:93 (#0), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), segments: [PathSegment { ident: WAKING#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).71), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:87: 401:93 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:78: 401:93 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).54), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:27: 401:29 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:21: 401:26 (#0), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).56), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:21: 401:26 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:30: 401:41 (#0), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), segments: [PathSegment { ident: REGISTERING#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).58), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:30: 401:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:21: 401:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).59), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:51: 401:53 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:45: 401:50 (#0), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).61), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:45: 401:50 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).62), kind: Binary(Spanned { node: BitOr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:66: 401:67 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:54: 401:65 (#0), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), segments: [PathSegment { ident: REGISTERING#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).64), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:54: 401:65 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:68: 401:74 (#0), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), segments: [PathSegment { ident: WAKING#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).66), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:68: 401:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:54: 401:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:45: 401:74 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:21: 401:26 (#0), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).56), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:21: 401:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:30: 401:41 (#0), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), segments: [PathSegment { ident: REGISTERING#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).58), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:30: 401:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:45: 401:50 (#0), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).61), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:45: 401:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).62), kind: Binary(Spanned { node: BitOr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:66: 401:67 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:54: 401:65 (#0), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), segments: [PathSegment { ident: REGISTERING#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).64), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:54: 401:65 (#0) }, Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:68: 401:74 (#0), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), segments: [PathSegment { ident: WAKING#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).66), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:68: 401:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:54: 401:74 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:54: 401:65 (#0), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), segments: [PathSegment { ident: REGISTERING#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).64), res: Def(Const, DefId(0:149 ~ futures_core[4a49]::task::__internal::atomic_waker::REGISTERING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:54: 401:65 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:68: 401:74 (#0), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), segments: [PathSegment { ident: WAKING#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).66), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:68: 401:74 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:78: 401:83 (#0), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).69), res: Local(HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:78: 401:83 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:87: 401:93 (#0), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), segments: [PathSegment { ident: WAKING#0, hir_id: HirId(DefId(0:158 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::take).71), res: Def(Const, DefId(0:150 ~ futures_core[4a49]::task::__internal::atomic_waker::WAKING)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/task/__internal/atomic_waker.rs:401:87: 401:93 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"futures_core"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#1}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:152 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:162 ~ futures_core[4a49]::task::__internal::atomic_waker::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
