[DEBUG] Trying to get func ty of defid DefId(0:34 ~ unicase[fec6]::ascii::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:35 ~ unicase[fec6]::ascii::{impl#0}::into_unicase)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:36 ~ unicase[fec6]::ascii::{impl#0}::into_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ unicase[fec6]::ascii::{impl#1}::deref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ unicase[fec6]::ascii::{impl#2}::deref_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ unicase[fec6]::ascii::{impl#3}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:51 ~ unicase[fec6]::ascii::{impl#4}::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5321 ~ core[7d5a]::char::methods::{impl#0}::to_ascii_lowercase)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5321 ~ core[7d5a]::char::methods::{impl#0}::to_ascii_lowercase)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9122 ~ core[7d5a]::iter::traits::iterator::Iterator::cmp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:56 ~ unicase[fec6]::ascii::{impl#5}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ unicase[fec6]::ascii::{impl#6}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11142 ~ core[7d5a]::fmt::Display::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:62 ~ unicase[fec6]::ascii::{impl#7}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ unicase[fec6]::ascii::{impl#7}::eq).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/ascii.rs:79:9: 79:14 (#0), res: Local(HirId(DefId(0:62 ~ unicase[fec6]::ascii::{impl#7}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:62 ~ unicase[fec6]::ascii::{impl#7}::eq).7), res: Local(HirId(DefId(0:62 ~ unicase[fec6]::ascii::{impl#7}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/ascii.rs:79:9: 79:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ unicase[fec6]::ascii::{impl#7}::eq).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/ascii.rs:79:18: 79:22 (#0), res: Local(HirId(DefId(0:62 ~ unicase[fec6]::ascii::{impl#7}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:62 ~ unicase[fec6]::ascii::{impl#7}::eq).9), res: Local(HirId(DefId(0:62 ~ unicase[fec6]::ascii::{impl#7}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/ascii.rs:79:18: 79:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:66 ~ unicase[fec6]::ascii::{impl#8}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:66 ~ unicase[fec6]::ascii::{impl#8}::eq).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/ascii.rs:86:9: 86:14 (#0), res: Local(HirId(DefId(0:66 ~ unicase[fec6]::ascii::{impl#8}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:66 ~ unicase[fec6]::ascii::{impl#8}::eq).7), res: Local(HirId(DefId(0:66 ~ unicase[fec6]::ascii::{impl#8}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/ascii.rs:86:9: 86:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:66 ~ unicase[fec6]::ascii::{impl#8}::eq).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/ascii.rs:86:18: 86:22 (#0), res: Local(HirId(DefId(0:66 ~ unicase[fec6]::ascii::{impl#8}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:66 ~ unicase[fec6]::ascii::{impl#8}::eq).9), res: Local(HirId(DefId(0:66 ~ unicase[fec6]::ascii::{impl#8}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/ascii.rs:86:18: 86:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:70 ~ unicase[fec6]::ascii::{impl#9}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14409 ~ core[7d5a]::str::{impl#0}::eq_ignore_ascii_case)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:76 ~ unicase[fec6]::ascii::{impl#11}::from_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14405 ~ core[7d5a]::str::{impl#0}::parse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ unicase[fec6]::ascii::{impl#12}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14327 ~ core[7d5a]::str::{impl#0}::bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:1139 ~ core[7d5a]::num::{impl#6}::to_ascii_lowercase)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11367 ~ core[7d5a]::hash::Hasher::write_u8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ unicase[fec6]::unicode::map::lookup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:17:8: 17:12 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).14), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:17:8: 17:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).15), kind: Lit(Spanned { node: Int(Pu128(11519), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:17:16: 17:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:17:16: 17:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Specific({"unicase"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:19:26: 19:30 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).29), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:19:26: 19:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).30), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:19:34: 19:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:19:34: 19:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:20:25: 20:29 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).39), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:20:25: 20:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).40), kind: Lit(Spanned { node: Int(Pu128(255), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:20:32: 20:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:20:32: 20:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:31:39: 31:43 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).141), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:31:39: 31:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).142), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:31:46: 31:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:31:46: 31:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:33:52: 33:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).167), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:33:52: 33:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).168), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:33:59: 33:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:33:59: 33:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).182), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:34:58: 34:59 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).183), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:34:53: 34:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).184), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:34:53: 34:57 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).185), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:34:60: 34:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:34:60: 34:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:34:52: 34:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).186), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).187), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:34:66: 34:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:34:66: 34:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:34:65: 34:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).183), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:34:53: 34:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).184), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:34:53: 34:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).185), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:34:60: 34:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:34:60: 34:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).211), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:36:52: 36:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).212), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:36:52: 36:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).213), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:36:59: 36:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:36:59: 36:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).231), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:38:58: 38:59 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).232), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:38:53: 38:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).233), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:38:53: 38:57 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).234), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:38:60: 38:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:38:60: 38:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:38:52: 38:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).235), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).236), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:38:66: 38:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:38:66: 38:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:38:65: 38:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).232), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:38:53: 38:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).233), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:38:53: 38:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).234), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:38:60: 38:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:38:60: 38:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).258), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:41:52: 41:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).259), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:41:52: 41:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).260), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:41:59: 41:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:41:59: 41:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).351), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:58:52: 58:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).352), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:58:52: 58:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).353), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:58:59: 58:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:58:59: 58:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).408), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:66:58: 66:59 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).409), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:66:53: 66:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).410), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:66:53: 66:57 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).411), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:66:60: 66:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:66:60: 66:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:66:52: 66:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).412), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).413), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:66:66: 66:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:66:66: 66:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:66:65: 66:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).409), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:66:53: 66:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).410), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:66:53: 66:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).411), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:66:60: 66:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:66:60: 66:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).459), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:75:58: 75:59 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).460), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:75:53: 75:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).461), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:75:53: 75:57 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).462), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:75:60: 75:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:75:60: 75:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:75:52: 75:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).463), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).464), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:75:66: 75:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:75:66: 75:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:75:65: 75:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).460), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:75:53: 75:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).461), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:75:53: 75:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).462), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:75:60: 75:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:75:60: 75:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).478), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:76:52: 76:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).479), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:76:52: 76:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).480), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:76:59: 76:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:76:59: 76:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).508), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:79:52: 79:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).509), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:79:52: 79:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).510), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:79:59: 79:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:79:59: 79:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).527), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:82:39: 82:43 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).528), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:82:39: 82:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).529), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:82:46: 82:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:82:46: 82:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).548), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:86:39: 86:43 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).549), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:86:39: 86:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).550), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:86:46: 86:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:86:46: 86:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).568), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:88:52: 88:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).569), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:88:52: 88:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).570), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:88:59: 88:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:88:59: 88:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).616), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:97:52: 97:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).617), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:97:52: 97:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).618), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:97:59: 97:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:97:59: 97:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).646), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:102:52: 102:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).647), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:102:52: 102:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).648), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:102:59: 102:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:102:59: 102:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).792), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:119:52: 119:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).793), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:119:52: 119:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).794), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:119:59: 119:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:119:59: 119:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).887), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:133:52: 133:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).888), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:133:52: 133:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).889), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:133:59: 133:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:133:59: 133:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).903), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:134:52: 134:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).904), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:134:52: 134:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).905), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:134:59: 134:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:134:59: 134:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).923), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:136:58: 136:59 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).924), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:136:53: 136:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).925), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:136:53: 136:57 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).926), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:136:60: 136:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:136:60: 136:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:136:52: 136:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).927), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).928), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:136:66: 136:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:136:66: 136:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:136:65: 136:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).924), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:136:53: 136:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).925), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:136:53: 136:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).926), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:136:60: 136:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:136:60: 136:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).937), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:137:39: 137:43 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).938), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:137:39: 137:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).939), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:137:46: 137:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:137:46: 137:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).958), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:141:39: 141:43 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).959), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:141:39: 141:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).960), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:141:46: 141:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:141:46: 141:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).1266), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:192:39: 192:43 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).1267), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:192:39: 192:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).1268), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:192:46: 192:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:192:46: 192:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).1346), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:200:52: 200:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).1347), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:200:52: 200:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).1348), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:200:59: 200:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:200:59: 200:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).1502), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:214:30: 214:31 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).1503), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:214:25: 214:29 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).1504), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:214:25: 214:29 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).1505), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:214:32: 214:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:214:32: 214:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:214:24: 214:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).1506), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:214:38: 214:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:214:38: 214:39 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).1503), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:214:25: 214:29 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).1504), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:214:25: 214:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).1505), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:214:32: 214:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:214:32: 214:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:24932 ~ core[7d5a]::num::{impl#7}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2632), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:338:58: 338:59 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2633), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:338:53: 338:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2634), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:338:53: 338:57 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2635), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:338:60: 338:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:338:60: 338:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:338:52: 338:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2636), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2637), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:338:66: 338:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:338:66: 338:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:338:65: 338:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2633), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:338:53: 338:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2634), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:338:53: 338:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2635), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:338:60: 338:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:338:60: 338:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:24934 ~ core[7d5a]::num::{impl#7}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2692), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:346:52: 346:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2693), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:346:52: 346:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2694), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:346:59: 346:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:346:59: 346:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2708), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:347:58: 347:59 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2709), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:347:53: 347:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2710), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:347:53: 347:57 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2711), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:347:60: 347:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:347:60: 347:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:347:52: 347:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2712), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2713), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:347:66: 347:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:347:66: 347:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:347:65: 347:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2709), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:347:53: 347:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2710), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:347:53: 347:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2711), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:347:60: 347:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:347:60: 347:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5374 ~ core[7d5a]::char::from_u32)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2767), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:356:52: 356:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2768), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:356:52: 356:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2769), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:356:59: 356:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:356:59: 356:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2783), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:357:52: 357:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2784), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:357:52: 357:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2785), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:357:59: 357:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:357:59: 357:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2799), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:358:52: 358:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2800), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:358:52: 358:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2801), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:358:59: 358:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:358:59: 358:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2815), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:359:52: 359:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2816), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:359:52: 359:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2817), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:359:59: 359:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:359:59: 359:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2831), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:360:58: 360:59 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2832), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:360:53: 360:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2833), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:360:53: 360:57 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2834), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:360:60: 360:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:360:60: 360:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:360:52: 360:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2835), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2836), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:360:66: 360:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:360:66: 360:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:360:65: 360:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2832), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:360:53: 360:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2833), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:360:53: 360:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2834), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:360:60: 360:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:360:60: 360:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2854), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:362:52: 362:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2855), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:362:52: 362:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2856), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:362:59: 362:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:362:59: 362:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2878), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:365:52: 365:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2879), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:365:52: 365:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2880), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:365:59: 365:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:365:59: 365:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2894), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:366:52: 366:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2895), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:366:52: 366:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2896), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:366:59: 366:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:366:59: 366:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2946), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:376:52: 376:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2947), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:376:52: 376:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2948), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:376:59: 376:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:376:59: 376:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2974), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:380:58: 380:59 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2975), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:380:53: 380:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2976), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:380:53: 380:57 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2977), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:380:60: 380:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:380:60: 380:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:380:52: 380:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2978), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2979), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:380:66: 380:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:380:66: 380:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:380:65: 380:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2975), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:380:53: 380:57 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2976), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:380:53: 380:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).2977), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:380:60: 380:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:380:60: 380:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).3005), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:384:52: 384:56 (#0), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), segments: [PathSegment { ident: from#0, hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).3006), res: Local(HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:384:52: 384:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicase[fec6]::unicode::map::lookup).3007), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:384:59: 384:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/map.rs:384:59: 384:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25060 ~ core[7d5a]::num::{impl#8}::wrapping_sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5374 ~ core[7d5a]::char::from_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:201 ~ unicase[fec6]::unicode::{impl#6}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:206 ~ unicase[fec6]::unicode::{impl#8}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:209 ~ unicase[fec6]::unicode::{impl#9}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ unicase[fec6]::unicode::{impl#0}::to_folded_case)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:8940 ~ core[7d5a]::iter::traits::iterator::Iterator::flat_map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ unicase[fec6]::unicode::map::lookup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:99 ~ unicase[fec6]::unicode::{impl#1}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8940 ~ core[7d5a]::iter::traits::iterator::Iterator::flat_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ unicase[fec6]::unicode::map::lookup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8940 ~ core[7d5a]::iter::traits::iterator::Iterator::flat_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ unicase[fec6]::unicode::map::lookup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:99 ~ unicase[fec6]::unicode::{impl#1}::eq).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:35:16: 35:17 (#0), res: Local(HirId(DefId(0:99 ~ unicase[fec6]::unicode::{impl#1}::eq).57)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:99 ~ unicase[fec6]::unicode::{impl#1}::eq).80), res: Local(HirId(DefId(0:99 ~ unicase[fec6]::unicode::{impl#1}::eq).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:35:16: 35:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:99 ~ unicase[fec6]::unicode::{impl#1}::eq).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:35:21: 35:22 (#0), res: Local(HirId(DefId(0:99 ~ unicase[fec6]::unicode::{impl#1}::eq).76)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:99 ~ unicase[fec6]::unicode::{impl#1}::eq).82), res: Local(HirId(DefId(0:99 ~ unicase[fec6]::unicode::{impl#1}::eq).76)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:35:21: 35:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:104 ~ unicase[fec6]::unicode::{impl#3}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:107 ~ unicase[fec6]::unicode::{impl#4}::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8940 ~ core[7d5a]::iter::traits::iterator::Iterator::flat_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ unicase[fec6]::unicode::map::lookup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8940 ~ core[7d5a]::iter::traits::iterator::Iterator::flat_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ unicase[fec6]::unicode::map::lookup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9122 ~ core[7d5a]::iter::traits::iterator::Iterator::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:110 ~ unicase[fec6]::unicode::{impl#5}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8940 ~ core[7d5a]::iter::traits::iterator::Iterator::flat_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ unicase[fec6]::unicode::map::lookup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11366 ~ core[7d5a]::hash::Hasher::write)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:79:8: 79:12 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).20), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:79:8: 79:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).21), kind: Lit(Spanned { node: Int(Pu128(127), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:79:16: 79:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:79:16: 79:20 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Specific({"unicase"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:82:15: 82:19 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).40), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:82:15: 82:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).41), kind: Lit(Spanned { node: Int(Pu128(2047), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:82:23: 82:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:82:23: 82:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).49), kind: Cast(Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).50), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:29: 83:30 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).51), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:24: 83:26 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:19: 83:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).53), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:19: 83:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).54), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:27: 83:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:27: 83:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:19: 83:28 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).55), kind: Lit(Spanned { node: Int(Pu128(31), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:31: 83:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:31: 83:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:18: 83:36 (#0) }, Ty { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:40: 83:42 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).57), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:40: 83:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:18: 83:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:45: 83:54 (#0), res: Def(Const, DefId(0:117 ~ unicase[fec6]::unicode::char_to_utf8::TAG_TWO_B)), segments: [PathSegment { ident: TAG_TWO_B#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).59), res: Def(Const, DefId(0:117 ~ unicase[fec6]::unicode::char_to_utf8::TAG_TWO_B)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:45: 83:54 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).51), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:24: 83:26 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:19: 83:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).53), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:19: 83:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).54), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:27: 83:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:27: 83:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:19: 83:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).55), kind: Lit(Spanned { node: Int(Pu128(31), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:31: 83:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:31: 83:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:19: 83:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).53), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:19: 83:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).54), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:27: 83:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:83:27: 83:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).67), kind: Cast(Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).68), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:24: 84:25 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:19: 84:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).70), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:19: 84:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).71), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:26: 84:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:26: 84:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:18: 84:31 (#0) }, Ty { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:35: 84:37 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).73), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:35: 84:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:18: 84:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:40: 84:48 (#0), res: Def(Const, DefId(0:116 ~ unicase[fec6]::unicode::char_to_utf8::TAG_CONT)), segments: [PathSegment { ident: TAG_CONT#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).75), res: Def(Const, DefId(0:116 ~ unicase[fec6]::unicode::char_to_utf8::TAG_CONT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:40: 84:48 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:19: 84:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).70), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:19: 84:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).71), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:26: 84:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:84:26: 84:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:86:15: 86:19 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).83), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:86:15: 86:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).84), kind: Lit(Spanned { node: Int(Pu128(65535), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:86:23: 86:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:86:23: 86:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicase"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).92), kind: Cast(Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).93), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:30: 87:31 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).94), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:24: 87:26 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).95), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:19: 87:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).96), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:19: 87:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).97), kind: Lit(Spanned { node: Int(Pu128(12), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:27: 87:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:27: 87:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:19: 87:29 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).98), kind: Lit(Spanned { node: Int(Pu128(15), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:32: 87:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:32: 87:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:18: 87:37 (#0) }, Ty { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:41: 87:43 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).100), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:41: 87:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:18: 87:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:46: 87:57 (#0), res: Def(Const, DefId(0:118 ~ unicase[fec6]::unicode::char_to_utf8::TAG_THREE_B)), segments: [PathSegment { ident: TAG_THREE_B#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).102), res: Def(Const, DefId(0:118 ~ unicase[fec6]::unicode::char_to_utf8::TAG_THREE_B)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:46: 87:57 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).94), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:24: 87:26 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).95), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:19: 87:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).96), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:19: 87:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).97), kind: Lit(Spanned { node: Int(Pu128(12), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:27: 87:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:27: 87:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:19: 87:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).98), kind: Lit(Spanned { node: Int(Pu128(15), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:32: 87:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:32: 87:36 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).95), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:19: 87:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).96), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:19: 87:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).97), kind: Lit(Spanned { node: Int(Pu128(12), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:27: 87:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:87:27: 87:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).110), kind: Cast(Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).111), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:29: 88:30 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).112), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:24: 88:26 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:19: 88:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).114), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:19: 88:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).115), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:27: 88:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:27: 88:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:19: 88:28 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).116), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:31: 88:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:31: 88:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:18: 88:36 (#0) }, Ty { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:40: 88:42 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).118), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:40: 88:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:18: 88:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).119), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:45: 88:53 (#0), res: Def(Const, DefId(0:116 ~ unicase[fec6]::unicode::char_to_utf8::TAG_CONT)), segments: [PathSegment { ident: TAG_CONT#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).120), res: Def(Const, DefId(0:116 ~ unicase[fec6]::unicode::char_to_utf8::TAG_CONT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:45: 88:53 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).112), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:24: 88:26 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:19: 88:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).114), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:19: 88:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).115), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:27: 88:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:27: 88:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:19: 88:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).116), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:31: 88:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:31: 88:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:19: 88:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).114), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:19: 88:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).115), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:27: 88:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:88:27: 88:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).128), kind: Cast(Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).129), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:24: 89:25 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:19: 89:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).131), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:19: 89:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).132), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:26: 89:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:26: 89:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:18: 89:31 (#0) }, Ty { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:35: 89:37 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).134), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:35: 89:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:18: 89:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).135), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:40: 89:48 (#0), res: Def(Const, DefId(0:116 ~ unicase[fec6]::unicode::char_to_utf8::TAG_CONT)), segments: [PathSegment { ident: TAG_CONT#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).136), res: Def(Const, DefId(0:116 ~ unicase[fec6]::unicode::char_to_utf8::TAG_CONT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:40: 89:48 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:19: 89:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).131), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:19: 89:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).132), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:26: 89:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:89:26: 89:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).148), kind: Cast(Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).149), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:30: 92:31 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).150), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:24: 92:26 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).151), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:19: 92:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).152), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:19: 92:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).153), kind: Lit(Spanned { node: Int(Pu128(18), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:27: 92:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:27: 92:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:19: 92:29 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).154), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:32: 92:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:32: 92:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:18: 92:37 (#0) }, Ty { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).155), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:41: 92:43 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).156), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:41: 92:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:18: 92:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).157), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:46: 92:56 (#0), res: Def(Const, DefId(0:119 ~ unicase[fec6]::unicode::char_to_utf8::TAG_FOUR_B)), segments: [PathSegment { ident: TAG_FOUR_B#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).158), res: Def(Const, DefId(0:119 ~ unicase[fec6]::unicode::char_to_utf8::TAG_FOUR_B)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:46: 92:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).150), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:24: 92:26 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).151), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:19: 92:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).152), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:19: 92:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).153), kind: Lit(Spanned { node: Int(Pu128(18), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:27: 92:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:27: 92:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:19: 92:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).154), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:32: 92:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:32: 92:36 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).151), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:19: 92:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).152), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:19: 92:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).153), kind: Lit(Spanned { node: Int(Pu128(18), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:27: 92:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:92:27: 92:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).166), kind: Cast(Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).167), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:30: 93:31 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).168), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:24: 93:26 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:19: 93:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).170), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:19: 93:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).171), kind: Lit(Spanned { node: Int(Pu128(12), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:27: 93:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:27: 93:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:19: 93:29 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).172), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:32: 93:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:32: 93:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:18: 93:37 (#0) }, Ty { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).173), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:41: 93:43 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).174), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:41: 93:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:18: 93:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).175), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:46: 93:54 (#0), res: Def(Const, DefId(0:116 ~ unicase[fec6]::unicode::char_to_utf8::TAG_CONT)), segments: [PathSegment { ident: TAG_CONT#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).176), res: Def(Const, DefId(0:116 ~ unicase[fec6]::unicode::char_to_utf8::TAG_CONT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:46: 93:54 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).168), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:24: 93:26 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:19: 93:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).170), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:19: 93:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).171), kind: Lit(Spanned { node: Int(Pu128(12), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:27: 93:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:27: 93:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:19: 93:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).172), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:32: 93:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:32: 93:36 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:19: 93:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).170), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:19: 93:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).171), kind: Lit(Spanned { node: Int(Pu128(12), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:27: 93:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:93:27: 93:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).184), kind: Cast(Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).185), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:29: 94:30 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).186), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:24: 94:26 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:19: 94:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).188), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:19: 94:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).189), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:27: 94:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:27: 94:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:19: 94:28 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).190), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:31: 94:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:31: 94:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:18: 94:36 (#0) }, Ty { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).191), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:40: 94:42 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).192), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:40: 94:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:18: 94:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).193), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:45: 94:53 (#0), res: Def(Const, DefId(0:116 ~ unicase[fec6]::unicode::char_to_utf8::TAG_CONT)), segments: [PathSegment { ident: TAG_CONT#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).194), res: Def(Const, DefId(0:116 ~ unicase[fec6]::unicode::char_to_utf8::TAG_CONT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:45: 94:53 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).186), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:24: 94:26 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:19: 94:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).188), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:19: 94:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).189), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:27: 94:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:27: 94:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:19: 94:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).190), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:31: 94:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:31: 94:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:19: 94:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).188), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:19: 94:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).189), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:27: 94:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:94:27: 94:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).202), kind: Cast(Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).203), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:24: 95:25 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).204), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:19: 95:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).205), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:19: 95:23 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).206), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:26: 95:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:26: 95:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:18: 95:31 (#0) }, Ty { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).207), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:35: 95:37 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).208), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:35: 95:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:18: 95:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:40: 95:48 (#0), res: Def(Const, DefId(0:116 ~ unicase[fec6]::unicode::char_to_utf8::TAG_CONT)), segments: [PathSegment { ident: TAG_CONT#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).210), res: Def(Const, DefId(0:116 ~ unicase[fec6]::unicode::char_to_utf8::TAG_CONT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:40: 95:48 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).204), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:19: 95:23 (#0), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), segments: [PathSegment { ident: code#0, hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).205), res: Local(HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:19: 95:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicase[fec6]::unicode::char_to_utf8).206), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:26: 95:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/unicode/mod.rs:95:26: 95:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:226 ~ unicase[fec6]::unicode::fold::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ unicase[fec6]::unicode::fold::{impl#0}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ unicase[fec6]::unicode::fold::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ unicase[fec6]::unicode::fold::{impl#1}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ unicase[fec6]::unicode::fold::{impl#2}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:130 ~ unicase[fec6]::unicode::fold::{impl#3}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:234 ~ unicase[fec6]::{impl#16}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:243 ~ unicase[fec6]::{impl#18}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:248 ~ unicase[fec6]::{impl#20}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:251 ~ unicase[fec6]::{impl#21}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:131 ~ unicase[fec6]::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:131 ~ unicase[fec6]::eq).6), kind: Call(Expr { hir_id: HirId(DefId(0:131 ~ unicase[fec6]::eq).7), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:131 ~ unicase[fec6]::eq).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:81:5: 81:12 (#0), res: Def(Struct, DefId(0:228 ~ unicase[fec6]::UniCase)), segments: [PathSegment { ident: UniCase#0, hir_id: HirId(DefId(0:131 ~ unicase[fec6]::eq).8), res: Def(Struct, DefId(0:228 ~ unicase[fec6]::UniCase)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:81:5: 81:12 (#0) }, PathSegment { ident: new#0, hir_id: HirId(DefId(0:131 ~ unicase[fec6]::eq).10), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:81:5: 81:17 (#0) }, [Expr { hir_id: HirId(DefId(0:131 ~ unicase[fec6]::eq).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:81:18: 81:22 (#0), res: Local(HirId(DefId(0:131 ~ unicase[fec6]::eq).2)), segments: [PathSegment { ident: left#0, hir_id: HirId(DefId(0:131 ~ unicase[fec6]::eq).12), res: Local(HirId(DefId(0:131 ~ unicase[fec6]::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:81:18: 81:22 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:81:5: 81:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:131 ~ unicase[fec6]::eq).13), kind: Call(Expr { hir_id: HirId(DefId(0:131 ~ unicase[fec6]::eq).14), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:131 ~ unicase[fec6]::eq).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:81:27: 81:34 (#0), res: Def(Struct, DefId(0:228 ~ unicase[fec6]::UniCase)), segments: [PathSegment { ident: UniCase#0, hir_id: HirId(DefId(0:131 ~ unicase[fec6]::eq).15), res: Def(Struct, DefId(0:228 ~ unicase[fec6]::UniCase)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:81:27: 81:34 (#0) }, PathSegment { ident: new#0, hir_id: HirId(DefId(0:131 ~ unicase[fec6]::eq).17), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:81:27: 81:39 (#0) }, [Expr { hir_id: HirId(DefId(0:131 ~ unicase[fec6]::eq).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:81:40: 81:45 (#0), res: Local(HirId(DefId(0:131 ~ unicase[fec6]::eq).4)), segments: [PathSegment { ident: right#0, hir_id: HirId(DefId(0:131 ~ unicase[fec6]::eq).19), res: Local(HirId(DefId(0:131 ~ unicase[fec6]::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:81:40: 81:45 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:81:27: 81:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:141 ~ unicase[fec6]::{impl#1}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:141 ~ unicase[fec6]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:133 ~ unicase[fec6]::eq_ascii)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:133 ~ unicase[fec6]::eq_ascii).6), kind: Call(Expr { hir_id: HirId(DefId(0:133 ~ unicase[fec6]::eq_ascii).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:89:5: 89:10 (#0), res: Def(Ctor(Struct, Fn), DefId(0:238 ~ unicase[fec6]::Ascii::{constructor#0})), segments: [PathSegment { ident: Ascii#0, hir_id: HirId(DefId(0:133 ~ unicase[fec6]::eq_ascii).8), res: Def(Ctor(Struct, Fn), DefId(0:238 ~ unicase[fec6]::Ascii::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:89:5: 89:10 (#0) }, [Expr { hir_id: HirId(DefId(0:133 ~ unicase[fec6]::eq_ascii).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:89:11: 89:15 (#0), res: Local(HirId(DefId(0:133 ~ unicase[fec6]::eq_ascii).2)), segments: [PathSegment { ident: left#0, hir_id: HirId(DefId(0:133 ~ unicase[fec6]::eq_ascii).10), res: Local(HirId(DefId(0:133 ~ unicase[fec6]::eq_ascii).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:89:11: 89:15 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:89:5: 89:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:133 ~ unicase[fec6]::eq_ascii).11), kind: Call(Expr { hir_id: HirId(DefId(0:133 ~ unicase[fec6]::eq_ascii).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:89:20: 89:25 (#0), res: Def(Ctor(Struct, Fn), DefId(0:238 ~ unicase[fec6]::Ascii::{constructor#0})), segments: [PathSegment { ident: Ascii#0, hir_id: HirId(DefId(0:133 ~ unicase[fec6]::eq_ascii).13), res: Def(Ctor(Struct, Fn), DefId(0:238 ~ unicase[fec6]::Ascii::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:89:20: 89:25 (#0) }, [Expr { hir_id: HirId(DefId(0:133 ~ unicase[fec6]::eq_ascii).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:89:26: 89:31 (#0), res: Local(HirId(DefId(0:133 ~ unicase[fec6]::eq_ascii).4)), segments: [PathSegment { ident: right#0, hir_id: HirId(DefId(0:133 ~ unicase[fec6]::eq_ascii).15), res: Local(HirId(DefId(0:133 ~ unicase[fec6]::eq_ascii).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:89:26: 89:31 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:89:20: 89:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:262 ~ unicase[fec6]::{impl#22}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:267 ~ unicase[fec6]::{impl#24}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:138 ~ unicase[fec6]::{impl#0}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:141 ~ unicase[fec6]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:141 ~ unicase[fec6]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14407 ~ core[7d5a]::str::{impl#0}::is_ascii)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ unicase[fec6]::{impl#1}::to_folded_case)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:5919 ~ alloc[5873]::str::{impl#5}::to_ascii_lowercase)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ unicase[fec6]::unicode::{impl#0}::to_folded_case)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:145 ~ unicase[fec6]::{impl#2}::unicode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:146 ~ unicase[fec6]::{impl#2}::ascii)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:147 ~ unicase[fec6]::{impl#2}::is_ascii)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:148 ~ unicase[fec6]::{impl#2}::into_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:152 ~ unicase[fec6]::{impl#3}::deref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:156 ~ unicase[fec6]::{impl#4}::deref_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ unicase[fec6]::{impl#5}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:163 ~ unicase[fec6]::{impl#6}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11137 ~ core[7d5a]::fmt::Debug::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:166 ~ unicase[fec6]::{impl#7}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11142 ~ core[7d5a]::fmt::Display::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:170 ~ unicase[fec6]::{impl#8}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:215:67: 215:68 (#0), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).17)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).29), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:215:67: 215:68 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:215:72: 215:73 (#0), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).22)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).31), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:215:72: 215:73 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:216:71: 216:72 (#0), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).34)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).46), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:216:71: 216:72 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:216:76: 216:77 (#0), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).39)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).48), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:216:76: 216:77 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).62), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).63), kind: Call(Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:217:70: 217:77 (#0), res: Def(Ctor(Struct, Fn), DefId(0:196 ~ unicase[fec6]::unicode::Unicode::{constructor#0})), segments: [PathSegment { ident: Unicode#0, hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).65), res: Def(Ctor(Struct, Fn), DefId(0:196 ~ unicase[fec6]::unicode::Unicode::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:217:70: 217:77 (#0) }, [Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).66), kind: MethodCall(PathSegment { ident: as_ref#0, hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).67), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:217:78: 217:79 (#0), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).51)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).69), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).51)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:217:78: 217:79 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:217:80: 217:88 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:217:78: 217:88 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:217:70: 217:89 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:217:69: 217:89 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:217:93: 217:94 (#0), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).56)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).71), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:217:93: 217:94 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:218:69: 218:70 (#0), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).74)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).86), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:218:69: 218:70 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).87), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).88), kind: Call(Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).89), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:218:75: 218:82 (#0), res: Def(Ctor(Struct, Fn), DefId(0:196 ~ unicase[fec6]::unicode::Unicode::{constructor#0})), segments: [PathSegment { ident: Unicode#0, hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).90), res: Def(Ctor(Struct, Fn), DefId(0:196 ~ unicase[fec6]::unicode::Unicode::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:218:75: 218:82 (#0) }, [Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).91), kind: MethodCall(PathSegment { ident: as_ref#0, hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).92), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:218:83: 218:84 (#0), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).79)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).94), res: Local(HirId(DefId(0:170 ~ unicase[fec6]::{impl#8}::eq).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:218:83: 218:84 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:218:85: 218:93 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:218:83: 218:93 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:218:75: 218:94 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.0/src/lib.rs:218:74: 218:94 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:175 ~ unicase[fec6]::{impl#10}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:179 ~ unicase[fec6]::{impl#11}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:184 ~ unicase[fec6]::{impl#12}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:145 ~ unicase[fec6]::{impl#2}::unicode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:270 ~ unicase[fec6]::{impl#25}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:145 ~ unicase[fec6]::{impl#2}::unicode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ unicase[fec6]::{impl#26}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:145 ~ unicase[fec6]::{impl#2}::unicode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:276 ~ unicase[fec6]::{impl#27}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:145 ~ unicase[fec6]::{impl#2}::unicode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:279 ~ unicase[fec6]::{impl#28}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:145 ~ unicase[fec6]::{impl#2}::unicode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:845 ~ alloc[5873]::borrow::{impl#3}::into_owned)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:282 ~ unicase[fec6]::{impl#29}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:145 ~ unicase[fec6]::{impl#2}::unicode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:285 ~ unicase[fec6]::{impl#30}::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:148 ~ unicase[fec6]::{impl#2}::into_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:288 ~ unicase[fec6]::{impl#31}::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:148 ~ unicase[fec6]::{impl#2}::into_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:291 ~ unicase[fec6]::{impl#32}::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:148 ~ unicase[fec6]::{impl#2}::into_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:187 ~ unicase[fec6]::{impl#13}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:190 ~ unicase[fec6]::{impl#14}::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:194 ~ unicase[fec6]::{impl#15}::from_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14405 ~ core[7d5a]::str::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:141 ~ unicase[fec6]::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
