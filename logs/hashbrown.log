[DEBUG] Trying to get func ty of defid DefId(0:2329 ~ hashbrown[411b]::raw::neon::{impl#2}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2306 ~ hashbrown[411b]::raw::neon::{impl#0}::static_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2315 ~ hashbrown[411b]::raw::neon::{impl#0}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:15994 ~ core[7d5a]::core_arch::aarch64::neon::vld1_u8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2560 ~ core[7d5a]::ptr::const_ptr::{impl#0}::cast)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).10), kind: Cast(Expr { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:26: 56:29 (#0), res: Local(HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).2)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).12), res: Local(HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:26: 56:29 (#0) }, Ty { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:33: 56:38 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).14), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:33: 56:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:26: 56:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).15), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:66: 56:67 (#0) }, Expr { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).16), kind: Call(Expr { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:42: 56:63 (#0), res: Def(Fn, DefId(1:2168 ~ core[7d5a]::mem::align_of)), segments: [PathSegment { ident: mem#0, hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).18), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: align_of#0, hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).21), res: Def(Fn, DefId(1:2168 ~ core[7d5a]::mem::align_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:58: 56:62 (#0), res: SelfTyAlias { alias_to: DefId(0:2304 ~ hashbrown[411b]::raw::neon::{impl#0}), forbid_generic: false, is_trait_impl: false }, segments: [PathSegment { ident: Self#0, hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).20), res: SelfTyAlias { alias_to: DefId(0:2304 ~ hashbrown[411b]::raw::neon::{impl#0}), forbid_generic: false, is_trait_impl: false }, args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:58: 56:62 (#0) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:57: 56:63 (#0) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:42: 56:63 (#0) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:42: 56:65 (#0) }, Expr { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:68: 56:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:68: 56:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:41: 56:70 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).16), kind: Call(Expr { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:42: 56:63 (#0), res: Def(Fn, DefId(1:2168 ~ core[7d5a]::mem::align_of)), segments: [PathSegment { ident: mem#0, hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).18), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: align_of#0, hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).21), res: Def(Fn, DefId(1:2168 ~ core[7d5a]::mem::align_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:58: 56:62 (#0), res: SelfTyAlias { alias_to: DefId(0:2304 ~ hashbrown[411b]::raw::neon::{impl#0}), forbid_generic: false, is_trait_impl: false }, segments: [PathSegment { ident: Self#0, hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).20), res: SelfTyAlias { alias_to: DefId(0:2304 ~ hashbrown[411b]::raw::neon::{impl#0}), forbid_generic: false, is_trait_impl: false }, args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:58: 56:62 (#0) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:57: 56:63 (#0) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:42: 56:63 (#0) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:42: 56:65 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:68: 56:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:56:68: 56:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:2168 ~ core[7d5a]::mem::align_of)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).33), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#13), res: Local(HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).25)), segments: [PathSegment { ident: left_val#13, hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).35), res: Local(HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#13) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#13) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).36), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#13), res: Local(HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).26)), segments: [PathSegment { ident: right_val#13, hir_id: HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).38), res: Local(HirId(DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#13) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#13) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:15994 ~ core[7d5a]::core_arch::aarch64::neon::vld1_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2560 ~ core[7d5a]::ptr::const_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).12), kind: Cast(Expr { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:26: 66:29 (#0), res: Local(HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).4)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).14), res: Local(HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:26: 66:29 (#0) }, Ty { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:33: 66:38 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).16), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:33: 66:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:26: 66:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).17), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:66: 66:67 (#0) }, Expr { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).18), kind: Call(Expr { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:42: 66:63 (#0), res: Def(Fn, DefId(1:2168 ~ core[7d5a]::mem::align_of)), segments: [PathSegment { ident: mem#0, hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).20), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: align_of#0, hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).23), res: Def(Fn, DefId(1:2168 ~ core[7d5a]::mem::align_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:58: 66:62 (#0), res: SelfTyAlias { alias_to: DefId(0:2304 ~ hashbrown[411b]::raw::neon::{impl#0}), forbid_generic: false, is_trait_impl: false }, segments: [PathSegment { ident: Self#0, hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).22), res: SelfTyAlias { alias_to: DefId(0:2304 ~ hashbrown[411b]::raw::neon::{impl#0}), forbid_generic: false, is_trait_impl: false }, args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:58: 66:62 (#0) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:57: 66:63 (#0) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:42: 66:63 (#0) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:42: 66:65 (#0) }, Expr { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).24), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:68: 66:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:68: 66:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:41: 66:70 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).18), kind: Call(Expr { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:42: 66:63 (#0), res: Def(Fn, DefId(1:2168 ~ core[7d5a]::mem::align_of)), segments: [PathSegment { ident: mem#0, hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).20), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: align_of#0, hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).23), res: Def(Fn, DefId(1:2168 ~ core[7d5a]::mem::align_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:58: 66:62 (#0), res: SelfTyAlias { alias_to: DefId(0:2304 ~ hashbrown[411b]::raw::neon::{impl#0}), forbid_generic: false, is_trait_impl: false }, segments: [PathSegment { ident: Self#0, hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).22), res: SelfTyAlias { alias_to: DefId(0:2304 ~ hashbrown[411b]::raw::neon::{impl#0}), forbid_generic: false, is_trait_impl: false }, args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:58: 66:62 (#0) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:57: 66:63 (#0) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:42: 66:63 (#0) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:42: 66:65 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).24), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:68: 66:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/neon.rs:66:68: 66:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:2168 ~ core[7d5a]::mem::align_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).35), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#16), res: Local(HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).27)), segments: [PathSegment { ident: left_val#16, hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).37), res: Local(HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#16) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#16) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).38), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#16), res: Local(HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).28)), segments: [PathSegment { ident: right_val#16, hir_id: HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).40), res: Local(HirId(DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#16) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#16) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:16027 ~ core[7d5a]::core_arch::aarch64::neon::vst1_u8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2318 ~ hashbrown[411b]::raw::neon::{impl#0}::match_tag)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:41446 ~ core[7d5a]::core_arch::arm_shared::neon::generated::vceq_u8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:15698 ~ core[7d5a]::core_arch::arm_shared::neon::vdup_n_u8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:15614 ~ core[7d5a]::core_arch::arm_shared::neon::vget_lane_u64)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:44015 ~ core[7d5a]::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2319 ~ hashbrown[411b]::raw::neon::{impl#0}::match_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2318 ~ hashbrown[411b]::raw::neon::{impl#0}::match_tag)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2320 ~ hashbrown[411b]::raw::neon::{impl#0}::match_empty_or_deleted)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:49245 ~ core[7d5a]::core_arch::aarch64::neon::generated::vcltz_s8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:43803 ~ core[7d5a]::core_arch::arm_shared::neon::generated::vreinterpret_s8_u8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:15614 ~ core[7d5a]::core_arch::arm_shared::neon::vget_lane_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:44015 ~ core[7d5a]::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2321 ~ hashbrown[411b]::raw::neon::{impl#0}::match_full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:49200 ~ core[7d5a]::core_arch::aarch64::neon::generated::vcgez_s8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:43803 ~ core[7d5a]::core_arch::arm_shared::neon::generated::vreinterpret_s8_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:15614 ~ core[7d5a]::core_arch::arm_shared::neon::vget_lane_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:44015 ~ core[7d5a]::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2322 ~ hashbrown[411b]::raw::neon::{impl#0}::convert_special_to_empty_and_full_to_deleted)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:49245 ~ core[7d5a]::core_arch::aarch64::neon::generated::vcltz_s8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:43803 ~ core[7d5a]::core_arch::arm_shared::neon::generated::vreinterpret_s8_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:41372 ~ core[7d5a]::core_arch::arm_shared::neon::generated::vorr_u8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:15698 ~ core[7d5a]::core_arch::arm_shared::neon::vdup_n_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2334 ~ hashbrown[411b]::raw::alloc::inner::{impl#3}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ hashbrown[411b]::raw::alloc::inner::{impl#0}::allocate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9688 ~ core[7d5a]::option::{impl#0}::ok_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2389 ~ core[7d5a]::ptr::non_null::{impl#3}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(4:139 ~ alloc[5873]::alloc::alloc)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ hashbrown[411b]::raw::alloc::inner::{impl#0}::deallocate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:140 ~ alloc[5873]::alloc::dealloc)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ hashbrown[411b]::raw::alloc::inner::{impl#1}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ hashbrown[411b]::raw::alloc::inner::do_alloc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:37 ~ hashbrown[411b]::raw::alloc::inner::Allocator::allocate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2340 ~ hashbrown[411b]::raw::bitmask::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:58 ~ hashbrown[411b]::raw::bitmask::{impl#0}::invert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:58 ~ hashbrown[411b]::raw::bitmask::{impl#0}::invert).7), kind: Field(Expr { hir_id: HirId(DefId(0:58 ~ hashbrown[411b]::raw::bitmask::{impl#0}::invert).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:31:17: 31:21 (#0), res: Local(HirId(DefId(0:58 ~ hashbrown[411b]::raw::bitmask::{impl#0}::invert).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:58 ~ hashbrown[411b]::raw::bitmask::{impl#0}::invert).9), res: Local(HirId(DefId(0:58 ~ hashbrown[411b]::raw::bitmask::{impl#0}::invert).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:31:17: 31:21 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:31:17: 31:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:58 ~ hashbrown[411b]::raw::bitmask::{impl#0}::invert).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:31:26: 31:38 (#0), res: Def(Const, DefId(0:2302 ~ hashbrown[411b]::raw::neon::BITMASK_MASK)), segments: [PathSegment { ident: BITMASK_MASK#0, hir_id: HirId(DefId(0:58 ~ hashbrown[411b]::raw::bitmask::{impl#0}::invert).11), res: Def(Const, DefId(0:2302 ~ hashbrown[411b]::raw::neon::BITMASK_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:31:26: 31:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).7), kind: Field(Expr { hir_id: HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:17: 38:21 (#0), res: Local(HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).9), res: Local(HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:17: 38:21 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:17: 38:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).10), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:34: 38:35 (#0) }, Expr { hir_id: HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).11), kind: Field(Expr { hir_id: HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:27: 38:31 (#0), res: Local(HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).13), res: Local(HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:27: 38:31 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:27: 38:33 (#0) }, Expr { hir_id: HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:36: 38:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:36: 38:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:26: 38:38 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).11), kind: Field(Expr { hir_id: HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:27: 38:31 (#0), res: Local(HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).13), res: Local(HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:27: 38:31 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:27: 38:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:36: 38:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:38:36: 38:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:60 ~ hashbrown[411b]::raw::bitmask::{impl#0}::any_bit_set)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:60 ~ hashbrown[411b]::raw::bitmask::{impl#0}::any_bit_set).4), kind: Field(Expr { hir_id: HirId(DefId(0:60 ~ hashbrown[411b]::raw::bitmask::{impl#0}::any_bit_set).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:44:9: 44:13 (#0), res: Local(HirId(DefId(0:60 ~ hashbrown[411b]::raw::bitmask::{impl#0}::any_bit_set).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:60 ~ hashbrown[411b]::raw::bitmask::{impl#0}::any_bit_set).6), res: Local(HirId(DefId(0:60 ~ hashbrown[411b]::raw::bitmask::{impl#0}::any_bit_set).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:44:9: 44:13 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:44:9: 44:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:60 ~ hashbrown[411b]::raw::bitmask::{impl#0}::any_bit_set).7), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:44:19: 44:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:44:19: 44:20 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:61 ~ hashbrown[411b]::raw::bitmask::{impl#0}::lowest_set_bit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:976 ~ core[7d5a]::num::nonzero::{impl#14}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).5), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:12: 65:37 (#23) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:12: 65:37 (#23) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).6), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:60: 65:62 (#0) }, Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).7), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:56: 65:57 (#0) }, Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:41: 65:55 (#0), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), segments: [PathSegment { ident: BITMASK_STRIDE#0, hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).9), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:41: 65:55 (#0) }, Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).10), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:58: 65:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:58: 65:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:41: 65:59 (#0) }, Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:63: 65:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:63: 65:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:41: 65:64 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).7), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:56: 65:57 (#0) }, Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:41: 65:55 (#0), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), segments: [PathSegment { ident: BITMASK_STRIDE#0, hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).9), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:41: 65:55 (#0) }, Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).10), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:58: 65:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:58: 65:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:41: 65:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:63: 65:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:63: 65:64 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:41: 65:55 (#0), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), segments: [PathSegment { ident: BITMASK_STRIDE#0, hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).9), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:41: 65:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).10), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:58: 65:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:65:58: 65:59 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).14), kind: Cast(Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).15), kind: MethodCall(PathSegment { ident: leading_zeros#0, hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).16), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).17), kind: MethodCall(PathSegment { ident: swap_bytes#0, hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).18), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).19), kind: Field(Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:66:13: 66:17 (#0), res: Local(HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).21), res: Local(HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:66:13: 66:17 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:66:13: 66:19 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:66:20: 66:32 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:66:13: 66:32 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:66:33: 66:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:66:13: 66:48 (#0) }, Ty { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:66:52: 66:57 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).23), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:66:52: 66:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:66:13: 66:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:66:60: 66:74 (#0), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), segments: [PathSegment { ident: BITMASK_STRIDE#0, hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).25), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:66:60: 66:74 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:25127 ~ core[7d5a]::num::{impl#9}::leading_zeros)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:25134 ~ core[7d5a]::num::{impl#9}::swap_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).30), kind: Cast(Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).31), kind: MethodCall(PathSegment { ident: trailing_zeros#0, hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).32), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).33), kind: Field(Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:68:13: 68:17 (#0), res: Local(HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).35), res: Local(HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:68:13: 68:17 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:68:13: 68:19 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:68:20: 68:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:68:13: 68:36 (#0) }, Ty { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:68:40: 68:45 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).37), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:68:40: 68:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:68:13: 68:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:68:48: 68:62 (#0), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), segments: [PathSegment { ident: BITMASK_STRIDE#0, hir_id: HirId(DefId(0:62 ~ hashbrown[411b]::raw::bitmask::{impl#0}::trailing_zeros).39), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:68:48: 68:62 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:25128 ~ core[7d5a]::num::{impl#9}::trailing_zeros)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).5), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:12: 75:37 (#24) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:12: 75:37 (#24) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).6), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:60: 75:62 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).7), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:56: 75:57 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:41: 75:55 (#0), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), segments: [PathSegment { ident: BITMASK_STRIDE#0, hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).9), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:41: 75:55 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).10), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:58: 75:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:58: 75:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:41: 75:59 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:63: 75:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:63: 75:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:41: 75:64 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).7), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:56: 75:57 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:41: 75:55 (#0), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), segments: [PathSegment { ident: BITMASK_STRIDE#0, hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).9), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:41: 75:55 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).10), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:58: 75:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:58: 75:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:41: 75:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:63: 75:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:63: 75:64 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:41: 75:55 (#0), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), segments: [PathSegment { ident: BITMASK_STRIDE#0, hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).9), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:41: 75:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).10), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:58: 75:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:75:58: 75:59 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:977 ~ core[7d5a]::num::nonzero::{impl#14}::new_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:25134 ~ core[7d5a]::num::{impl#9}::swap_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:980 ~ core[7d5a]::num::nonzero::{impl#14}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).30), kind: Cast(Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).31), kind: MethodCall(PathSegment { ident: leading_zeros#0, hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).32), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:78:13: 78:20 (#0), res: Local(HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).28)), segments: [PathSegment { ident: swapped#0, hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).34), res: Local(HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:78:13: 78:20 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:78:21: 78:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:78:13: 78:36 (#0) }, Ty { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:78:40: 78:45 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).36), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:78:40: 78:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:78:13: 78:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:78:48: 78:62 (#0), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), segments: [PathSegment { ident: BITMASK_STRIDE#0, hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).38), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:78:48: 78:62 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:18282 ~ core[7d5a]::num::nonzero::{impl#69}::leading_zeros)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).43), kind: Cast(Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).44), kind: MethodCall(PathSegment { ident: trailing_zeros#0, hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).45), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:80:13: 80:20 (#0), res: Local(HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).2)), segments: [PathSegment { ident: nonzero#0, hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).47), res: Local(HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:80:13: 80:20 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:80:21: 80:37 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:80:13: 80:37 (#0) }, Ty { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:80:41: 80:46 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).49), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:80:41: 80:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:80:13: 80:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:80:49: 80:63 (#0), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), segments: [PathSegment { ident: BITMASK_STRIDE#0, hir_id: HirId(DefId(0:63 ~ hashbrown[411b]::raw::bitmask::{impl#0}::nonzero_trailing_zeros).51), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:80:49: 80:63 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:18283 ~ core[7d5a]::num::nonzero::{impl#69}::trailing_zeros)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:64 ~ hashbrown[411b]::raw::bitmask::{impl#0}::leading_zeros)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:64 ~ hashbrown[411b]::raw::bitmask::{impl#0}::leading_zeros).4), kind: Cast(Expr { hir_id: HirId(DefId(0:64 ~ hashbrown[411b]::raw::bitmask::{impl#0}::leading_zeros).5), kind: MethodCall(PathSegment { ident: leading_zeros#0, hir_id: HirId(DefId(0:64 ~ hashbrown[411b]::raw::bitmask::{impl#0}::leading_zeros).6), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:64 ~ hashbrown[411b]::raw::bitmask::{impl#0}::leading_zeros).7), kind: Field(Expr { hir_id: HirId(DefId(0:64 ~ hashbrown[411b]::raw::bitmask::{impl#0}::leading_zeros).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:87:9: 87:13 (#0), res: Local(HirId(DefId(0:64 ~ hashbrown[411b]::raw::bitmask::{impl#0}::leading_zeros).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:64 ~ hashbrown[411b]::raw::bitmask::{impl#0}::leading_zeros).9), res: Local(HirId(DefId(0:64 ~ hashbrown[411b]::raw::bitmask::{impl#0}::leading_zeros).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:87:9: 87:13 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:87:9: 87:15 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:87:16: 87:31 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:87:9: 87:31 (#0) }, Ty { hir_id: HirId(DefId(0:64 ~ hashbrown[411b]::raw::bitmask::{impl#0}::leading_zeros).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:87:35: 87:40 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:64 ~ hashbrown[411b]::raw::bitmask::{impl#0}::leading_zeros).11), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:87:35: 87:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:87:9: 87:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:64 ~ hashbrown[411b]::raw::bitmask::{impl#0}::leading_zeros).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:87:43: 87:57 (#0), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), segments: [PathSegment { ident: BITMASK_STRIDE#0, hir_id: HirId(DefId(0:64 ~ hashbrown[411b]::raw::bitmask::{impl#0}::leading_zeros).13), res: Def(Const, DefId(0:2301 ~ hashbrown[411b]::raw::neon::BITMASK_STRIDE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:87:43: 87:57 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:25127 ~ core[7d5a]::num::{impl#9}::leading_zeros)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:68 ~ hashbrown[411b]::raw::bitmask::{impl#1}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ hashbrown[411b]::raw::bitmask::{impl#1}::into_iter).10), kind: Field(Expr { hir_id: HirId(DefId(0:68 ~ hashbrown[411b]::raw::bitmask::{impl#1}::into_iter).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:99:29: 99:33 (#0), res: Local(HirId(DefId(0:68 ~ hashbrown[411b]::raw::bitmask::{impl#1}::into_iter).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:68 ~ hashbrown[411b]::raw::bitmask::{impl#1}::into_iter).12), res: Local(HirId(DefId(0:68 ~ hashbrown[411b]::raw::bitmask::{impl#1}::into_iter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:99:29: 99:33 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:99:29: 99:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ hashbrown[411b]::raw::bitmask::{impl#1}::into_iter).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:99:38: 99:55 (#0), res: Def(Const, DefId(0:2303 ~ hashbrown[411b]::raw::neon::BITMASK_ITER_MASK)), segments: [PathSegment { ident: BITMASK_ITER_MASK#0, hir_id: HirId(DefId(0:68 ~ hashbrown[411b]::raw::bitmask::{impl#1}::into_iter).14), res: Def(Const, DefId(0:2303 ~ hashbrown[411b]::raw::neon::BITMASK_ITER_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/bitmask.rs:99:38: 99:55 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2346 ~ hashbrown[411b]::raw::bitmask::{impl#6}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:71 ~ hashbrown[411b]::raw::bitmask::{impl#2}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:61 ~ hashbrown[411b]::raw::bitmask::{impl#0}::lowest_set_bit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ hashbrown[411b]::raw::bitmask::{impl#0}::remove_lowest_bit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:77 ~ hashbrown[411b]::raw::invalid_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:1721 ~ core[7d5a]::intrinsics::{extern#1}::transmute)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ hashbrown[411b]::raw::offset_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2582 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset_from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2354 ~ hashbrown[411b]::raw::{impl#59}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:82 ~ hashbrown[411b]::raw::{impl#0}::capacity_overflow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ hashbrown[411b]::raw::{impl#0}::alloc_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:156 ~ alloc[5873]::alloc::handle_alloc_error)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2360 ~ hashbrown[411b]::raw::{impl#61}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2363 ~ hashbrown[411b]::raw::{impl#63}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2363 ~ hashbrown[411b]::raw::{impl#63}::eq).6), kind: Field(Expr { hir_id: HirId(DefId(0:2363 ~ hashbrown[411b]::raw::{impl#63}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:106:23: 106:23 (#36), res: Local(HirId(DefId(0:2363 ~ hashbrown[411b]::raw::{impl#63}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2363 ~ hashbrown[411b]::raw::{impl#63}::eq).8), res: Local(HirId(DefId(0:2363 ~ hashbrown[411b]::raw::{impl#63}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:106:23: 106:32 (#36) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:108:23: 108:25 (#36) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2363 ~ hashbrown[411b]::raw::{impl#63}::eq).9), kind: Field(Expr { hir_id: HirId(DefId(0:2363 ~ hashbrown[411b]::raw::{impl#63}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:106:23: 106:32 (#36), res: Local(HirId(DefId(0:2363 ~ hashbrown[411b]::raw::{impl#63}::eq).4)), segments: [PathSegment { ident: other#36, hir_id: HirId(DefId(0:2363 ~ hashbrown[411b]::raw::{impl#63}::eq).11), res: Local(HirId(DefId(0:2363 ~ hashbrown[411b]::raw::{impl#63}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:106:23: 106:32 (#36) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:108:23: 108:25 (#36) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2365 ~ hashbrown[411b]::raw::{impl#64}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2367 ~ hashbrown[411b]::raw::{impl#65}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full).4), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:119:16: 119:17 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full).5), kind: Field(Expr { hir_id: HirId(DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:119:9: 119:13 (#0), res: Local(HirId(DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full).7), res: Local(HirId(DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:119:9: 119:13 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:119:9: 119:15 (#0) }, Expr { hir_id: HirId(DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full).8), kind: Lit(Spanned { node: Int(Pu128(128), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:119:18: 119:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:119:18: 119:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:119:9: 119:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:119:26: 119:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:119:26: 119:27 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full).5), kind: Field(Expr { hir_id: HirId(DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:119:9: 119:13 (#0), res: Local(HirId(DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full).7), res: Local(HirId(DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:119:9: 119:13 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:119:9: 119:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ hashbrown[411b]::raw::{impl#2}::is_full).8), kind: Lit(Spanned { node: Int(Pu128(128), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:119:18: 119:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:119:18: 119:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special).4), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:125:16: 125:17 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special).5), kind: Field(Expr { hir_id: HirId(DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:125:9: 125:13 (#0), res: Local(HirId(DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special).7), res: Local(HirId(DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:125:9: 125:13 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:125:9: 125:15 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special).8), kind: Lit(Spanned { node: Int(Pu128(128), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:125:18: 125:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:125:18: 125:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:125:9: 125:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:125:26: 125:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:125:26: 125:27 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special).5), kind: Field(Expr { hir_id: HirId(DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:125:9: 125:13 (#0), res: Local(HirId(DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special).7), res: Local(HirId(DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:125:9: 125:13 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:125:9: 125:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special).8), kind: Lit(Spanned { node: Int(Pu128(128), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:125:18: 125:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:125:18: 125:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ hashbrown[411b]::raw::{impl#2}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty).26), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:132:16: 132:17 (#0) }, Expr { hir_id: HirId(DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty).27), kind: Field(Expr { hir_id: HirId(DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:132:9: 132:13 (#0), res: Local(HirId(DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty).29), res: Local(HirId(DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:132:9: 132:13 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:132:9: 132:15 (#0) }, Expr { hir_id: HirId(DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty).30), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:132:18: 132:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:132:18: 132:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:132:9: 132:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty).31), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:132:26: 132:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:132:26: 132:27 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty).27), kind: Field(Expr { hir_id: HirId(DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:132:9: 132:13 (#0), res: Local(HirId(DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty).29), res: Local(HirId(DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:132:9: 132:13 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:132:9: 132:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:94 ~ hashbrown[411b]::raw::{impl#2}::special_is_empty).30), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:132:18: 132:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:132:18: 132:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:20: 150:24 (#0), res: Local(HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).2)), segments: [PathSegment { ident: hash#0, hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).7), res: Local(HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:20: 150:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).8), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:46: 150:47 (#0) }, Expr { hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).9), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:42: 150:43 (#0) }, Expr { hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:29: 150:41 (#0), res: Def(Const, DefId(0:96 ~ hashbrown[411b]::raw::{impl#2}::full::MIN_HASH_LEN)), segments: [PathSegment { ident: MIN_HASH_LEN#0, hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).11), res: Def(Const, DefId(0:96 ~ hashbrown[411b]::raw::{impl#2}::full::MIN_HASH_LEN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:29: 150:41 (#0) }, Expr { hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).12), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:44: 150:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:44: 150:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:29: 150:45 (#0) }, Expr { hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).13), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:48: 150:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:48: 150:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:28: 150:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).9), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:42: 150:43 (#0) }, Expr { hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:29: 150:41 (#0), res: Def(Const, DefId(0:96 ~ hashbrown[411b]::raw::{impl#2}::full::MIN_HASH_LEN)), segments: [PathSegment { ident: MIN_HASH_LEN#0, hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).11), res: Def(Const, DefId(0:96 ~ hashbrown[411b]::raw::{impl#2}::full::MIN_HASH_LEN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:29: 150:41 (#0) }, Expr { hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).12), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:44: 150:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:44: 150:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:29: 150:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).13), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:48: 150:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:48: 150:49 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:29: 150:41 (#0), res: Def(Const, DefId(0:96 ~ hashbrown[411b]::raw::{impl#2}::full::MIN_HASH_LEN)), segments: [PathSegment { ident: MIN_HASH_LEN#0, hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).11), res: Def(Const, DefId(0:96 ~ hashbrown[411b]::raw::{impl#2}::full::MIN_HASH_LEN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:29: 150:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).12), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:44: 150:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:150:44: 150:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:151:14: 151:18 (#0), res: Local(HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).15)), segments: [PathSegment { ident: top7#0, hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).22), res: Local(HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:151:14: 151:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full).23), kind: Lit(Spanned { node: Int(Pu128(127), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:151:21: 151:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:151:21: 151:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ hashbrown[411b]::raw::h1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2372 ~ hashbrown[411b]::raw::{impl#66}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:99 ~ hashbrown[411b]::raw::{impl#3}::move_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:99 ~ hashbrown[411b]::raw::{impl#3}::move_next).11), kind: Field(Expr { hir_id: HirId(DefId(0:99 ~ hashbrown[411b]::raw::{impl#3}::move_next).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:183:13: 183:17 (#0), res: Local(HirId(DefId(0:99 ~ hashbrown[411b]::raw::{impl#3}::move_next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:99 ~ hashbrown[411b]::raw::{impl#3}::move_next).13), res: Local(HirId(DefId(0:99 ~ hashbrown[411b]::raw::{impl#3}::move_next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:183:13: 183:17 (#0) }, stride#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:183:13: 183:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:99 ~ hashbrown[411b]::raw::{impl#3}::move_next).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:183:28: 183:39 (#0), res: Local(HirId(DefId(0:99 ~ hashbrown[411b]::raw::{impl#3}::move_next).4)), segments: [PathSegment { ident: bucket_mask#0, hir_id: HirId(DefId(0:99 ~ hashbrown[411b]::raw::{impl#3}::move_next).15), res: Local(HirId(DefId(0:99 ~ hashbrown[411b]::raw::{impl#3}::move_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:183:28: 183:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).20), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#52), res: Local(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).13)), segments: [PathSegment { ident: left_val#52, hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).22), res: Local(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#52) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:20: 102:29 (#52) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).23), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#52), res: Local(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).14)), segments: [PathSegment { ident: right_val#52, hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).25), res: Local(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#52) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:33: 102:43 (#52) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:205:8: 205:11 (#0), res: Local(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).2)), segments: [PathSegment { ident: cap#0, hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).66), res: Local(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:205:8: 205:11 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).67), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:205:14: 205:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:205:14: 205:15 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:209:24: 209:27 (#0), res: Local(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).2)), segments: [PathSegment { ident: cap#0, hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).76), res: Local(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:209:24: 209:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).77), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:209:30: 209:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:209:30: 209:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).91), kind: Match(Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).98), kind: Call(Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).97), kind: Path(LangItem(TryTraitBranch, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:43 (#190))), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:43 (#190) }, [Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).92), kind: MethodCall(PathSegment { ident: checked_mul#0, hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).93), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:27 (#0), res: Local(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).2)), segments: [PathSegment { ident: cap#0, hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).95), res: Local(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:27 (#0) }, [Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).96), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:40: 216:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:40: 216:41 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:28: 216:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:42 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:43 (#190) }, [Arm { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).113), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:42: 216:43 (#191), pat: Pat { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).112), kind: Struct(LangItem(ControlFlowBreak, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:42: 216:43 (#191)), [PatField { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).111), ident: 0#191, pat: Pat { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).105), kind: Binding(BindingMode(No, Not), HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).105), residual#0, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:42: 216:43 (#191), default_binding_modes: true }, is_shorthand: false, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:42: 216:43 (#191) }], false), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:42: 216:43 (#191), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).110), kind: Ret(Some(Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).109), kind: Call(Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).108), kind: Path(LangItem(TryTraitFromResidual, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:42: 216:43 (#191))), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:42: 216:43 (#191) }, [Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:42: 216:43 (#191), res: Local(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).105)), segments: [PathSegment { ident: residual#0, hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).106), res: Local(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).105)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:42: 216:43 (#191) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:43 (#190) })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:42: 216:43 (#191) } }, Arm { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).104), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:43 (#0), pat: Pat { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).103), kind: Struct(LangItem(ControlFlowContinue, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:43 (#190)), [PatField { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).102), ident: 0#190, pat: Pat { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).99), kind: Binding(BindingMode(No, Not), HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).99), val#0, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:43 (#0), default_binding_modes: true }, is_shorthand: false, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:43 (#190) }], false), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:43 (#190), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:43 (#0), res: Local(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).99)), segments: [PathSegment { ident: val#0, hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).100), res: Local(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).99)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:43 (#0) } }], TryDesugar(HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).98))), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:24: 216:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets).114), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:46: 216:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:216:46: 216:47 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25399 ~ core[7d5a]::num::{impl#11}::checked_mul)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25473 ~ core[7d5a]::num::{impl#11}::next_power_of_two)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:228:8: 228:19 (#0), res: Local(HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).2)), segments: [PathSegment { ident: bucket_mask#0, hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).6), res: Local(HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:228:8: 228:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).7), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:228:22: 228:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:228:22: 228:23 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).15), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:28: 234:29 (#0) }, Expr { hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).16), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:23: 234:24 (#0) }, Expr { hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:11: 234:22 (#0), res: Local(HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).2)), segments: [PathSegment { ident: bucket_mask#0, hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).18), res: Local(HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:11: 234:22 (#0) }, Expr { hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).19), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:25: 234:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:25: 234:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:10: 234:27 (#0) }, Expr { hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).20), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:30: 234:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:30: 234:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:9: 234:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).21), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:35: 234:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:35: 234:36 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).16), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:23: 234:24 (#0) }, Expr { hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:11: 234:22 (#0), res: Local(HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).2)), segments: [PathSegment { ident: bucket_mask#0, hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).18), res: Local(HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:11: 234:22 (#0) }, Expr { hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).19), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:25: 234:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:25: 234:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:10: 234:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).20), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:30: 234:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:30: 234:31 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:11: 234:22 (#0), res: Local(HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).2)), segments: [PathSegment { ident: bucket_mask#0, hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).18), res: Local(HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:11: 234:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity).19), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:25: 234:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:234:25: 234:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2378 ~ hashbrown[411b]::raw::{impl#68}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:103 ~ hashbrown[411b]::raw::{impl#4}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:15003 ~ core[7d5a]::alloc::layout::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:15001 ~ core[7d5a]::alloc::layout::{impl#0}::size)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:103 ~ hashbrown[411b]::raw::{impl#4}::new).21), kind: MethodCall(PathSegment { ident: align#0, hir_id: HirId(DefId(0:103 ~ hashbrown[411b]::raw::{impl#4}::new).22), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:103 ~ hashbrown[411b]::raw::{impl#4}::new).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:252:28: 252:34 (#0), res: Local(HirId(DefId(0:103 ~ hashbrown[411b]::raw::{impl#4}::new).10)), segments: [PathSegment { ident: layout#0, hir_id: HirId(DefId(0:103 ~ hashbrown[411b]::raw::{impl#4}::new).24), res: Local(HirId(DefId(0:103 ~ hashbrown[411b]::raw::{impl#4}::new).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:252:28: 252:34 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:252:35: 252:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:252:28: 252:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:103 ~ hashbrown[411b]::raw::{impl#4}::new).25), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:103 ~ hashbrown[411b]::raw::{impl#4}::new).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:252:45: 252:50 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:103 ~ hashbrown[411b]::raw::{impl#4}::new).26), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:252:45: 252:50 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:103 ~ hashbrown[411b]::raw::{impl#4}::new).28), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:252:45: 252:57 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:15002 ~ core[7d5a]::alloc::layout::{impl#0}::align)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:15002 ~ core[7d5a]::alloc::layout::{impl#0}::align)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25471 ~ core[7d5a]::num::{impl#11}::is_power_of_two)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).39), kind: Match(Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).71), kind: Call(Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).70), kind: Path(LangItem(TryTraitBranch, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:68 (#199))), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:68 (#199) }, [Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).40), kind: MethodCall(PathSegment { ident: checked_add#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).41), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).42), kind: Match(Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).50), kind: Call(Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).49), kind: Path(LangItem(TryTraitBranch, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:39 (#201))), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:39 (#201) }, [Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).43), kind: MethodCall(PathSegment { ident: checked_mul#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).44), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:17 (#0), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).33)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).46), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:17 (#0) }, [Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:30: 267:37 (#0), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).4)), segments: [PathSegment { ident: buckets#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).48), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:30: 267:37 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:18: 267:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:38 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:39 (#201) }, [Arm { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).65), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:38: 267:39 (#202), pat: Pat { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).64), kind: Struct(LangItem(ControlFlowBreak, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:38: 267:39 (#202)), [PatField { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).63), ident: 0#202, pat: Pat { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).57), kind: Binding(BindingMode(No, Not), HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).57), residual#0, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:38: 267:39 (#202), default_binding_modes: true }, is_shorthand: false, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:38: 267:39 (#202) }], false), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:38: 267:39 (#202), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).62), kind: Ret(Some(Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).61), kind: Call(Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).60), kind: Path(LangItem(TryTraitFromResidual, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:38: 267:39 (#202))), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:38: 267:39 (#202) }, [Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:38: 267:39 (#202), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).57)), segments: [PathSegment { ident: residual#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).58), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:38: 267:39 (#202) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:39 (#201) })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:38: 267:39 (#202) } }, Arm { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).56), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:39 (#0), pat: Pat { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).55), kind: Struct(LangItem(ControlFlowContinue, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:39 (#201)), [PatField { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).54), ident: 0#201, pat: Pat { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).51), kind: Binding(BindingMode(No, Not), HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).51), val#0, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:39 (#0), default_binding_modes: true }, is_shorthand: false, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:39 (#201) }], false), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:39 (#201), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:39 (#0), res: Local(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).51)), segments: [PathSegment { ident: val#0, hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).52), res: Local(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).51)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:39 (#0) } }], TryDesugar(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).50))), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:39 (#0) }, [Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).66), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:63: 267:64 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:52: 267:62 (#0), res: Local(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).35)), segments: [PathSegment { ident: ctrl_align#0, hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).68), res: Local(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:52: 267:62 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).69), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:65: 267:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:65: 267:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:52: 267:66 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:40: 267:67 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:67 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:68 (#199) }, [Arm { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).86), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:67: 267:68 (#200), pat: Pat { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).85), kind: Struct(LangItem(ControlFlowBreak, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:67: 267:68 (#200)), [PatField { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).84), ident: 0#200, pat: Pat { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).78), kind: Binding(BindingMode(No, Not), HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).78), residual#0, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:67: 267:68 (#200), default_binding_modes: true }, is_shorthand: false, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:67: 267:68 (#200) }], false), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:67: 267:68 (#200), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).83), kind: Ret(Some(Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).82), kind: Call(Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).81), kind: Path(LangItem(TryTraitFromResidual, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:67: 267:68 (#200))), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:67: 267:68 (#200) }, [Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:67: 267:68 (#200), res: Local(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).78)), segments: [PathSegment { ident: residual#0, hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).79), res: Local(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).78)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:67: 267:68 (#200) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:68 (#199) })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:67: 267:68 (#200) } }, Arm { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).77), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:68 (#0), pat: Pat { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).76), kind: Struct(LangItem(ControlFlowContinue, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:68 (#199)), [PatField { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).75), ident: 0#199, pat: Pat { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).72), kind: Binding(BindingMode(No, Not), HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).72), val#0, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:68 (#0), default_binding_modes: true }, is_shorthand: false, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:68 (#199) }], false), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:68 (#199), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:68 (#0), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).72)), segments: [PathSegment { ident: val#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).73), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:68 (#0) } }], TryDesugar(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).71))), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:13: 267:68 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).87), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).88), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:84: 267:85 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).89), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:73: 267:83 (#0), res: Local(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).35)), segments: [PathSegment { ident: ctrl_align#0, hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).90), res: Local(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:73: 267:83 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).91), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:86: 267:87 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:86: 267:87 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:72: 267:88 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:71: 267:88 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25399 ~ core[7d5a]::num::{impl#11}::checked_mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:52: 267:62 (#0), res: Local(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).35)), segments: [PathSegment { ident: ctrl_align#0, hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).68), res: Local(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:52: 267:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).69), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:65: 267:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:65: 267:66 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).89), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:73: 267:83 (#0), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).35)), segments: [PathSegment { ident: ctrl_align#0, hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).90), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:73: 267:83 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).91), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:86: 267:87 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:267:86: 267:87 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:268:43: 268:50 (#0), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).4)), segments: [PathSegment { ident: buckets#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).102), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:268:43: 268:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).103), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).105), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:268:53: 268:58 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).104), res: Def(Struct, DefId(0:2324 ~ hashbrown[130f]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:268:53: 268:58 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).106), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:268:53: 268:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).128), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:12: 272:15 (#0), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).125)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).129), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:12: 272:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).130), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:38: 272:39 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).131), kind: Cast(Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).132), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:18: 272:23 (#0), res: PrimTy(Int(Isize)), segments: [PathSegment { ident: isize#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).133), res: PrimTy(Int(Isize)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:18: 272:23 (#0) }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).135), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:18: 272:28 (#0) }, Ty { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:32: 272:37 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).137), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:32: 272:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:18: 272:37 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).138), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:52: 272:53 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).139), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:41: 272:51 (#0), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).35)), segments: [PathSegment { ident: ctrl_align#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).140), res: Local(HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:41: 272:51 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).141), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:54: 272:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:54: 272:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:40: 272:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:18: 272:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).131), kind: Cast(Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).132), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:18: 272:23 (#0), res: PrimTy(Int(Isize)), segments: [PathSegment { ident: isize#0, hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).133), res: PrimTy(Int(Isize)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:18: 272:23 (#0) }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for).135), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:18: 272:28 (#0) }, Ty { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:32: 272:37 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).137), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:32: 272:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:18: 272:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).138), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:52: 272:53 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).139), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:41: 272:51 (#0), res: Local(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).35)), segments: [PathSegment { ident: ctrl_align#0, hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).140), res: Local(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:41: 272:51 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).141), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:54: 272:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:54: 272:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:40: 272:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).139), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:41: 272:51 (#0), res: Local(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).35)), segments: [PathSegment { ident: ctrl_align#0, hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).140), res: Local(HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:41: 272:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for).141), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:54: 272:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:272:54: 272:55 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:15000 ~ core[7d5a]::alloc::layout::{impl#0}::from_size_align_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ hashbrown[130f]::raw::{impl#6}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ hashbrown[130f]::raw::{impl#7}::from_base_index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:77 ~ hashbrown[411b]::raw::invalid_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:118 ~ hashbrown[411b]::raw::{impl#7}::from_base_index).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:385:25: 385:30 (#0), res: Local(HirId(DefId(0:118 ~ hashbrown[411b]::raw::{impl#7}::from_base_index).4)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:118 ~ hashbrown[411b]::raw::{impl#7}::from_base_index).17), res: Local(HirId(DefId(0:118 ~ hashbrown[411b]::raw::{impl#7}::from_base_index).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:385:25: 385:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:118 ~ hashbrown[411b]::raw::{impl#7}::from_base_index).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:385:33: 385:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:385:33: 385:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2691 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2388 ~ core[7d5a]::ptr::non_null::{impl#3}::new_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:119 ~ hashbrown[411b]::raw::{impl#7}::to_base_index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:119 ~ hashbrown[130f]::raw::{impl#7}::to_base_index).12), kind: Cast(Expr { hir_id: HirId(DefId(0:119 ~ hashbrown[411b]::raw::{impl#7}::to_base_index).13), kind: MethodCall(PathSegment { ident: as_ptr#0, hir_id: HirId(DefId(0:119 ~ hashbrown[130f]::raw::{impl#7}::to_base_index).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:119 ~ hashbrown[130f]::raw::{impl#7}::to_base_index).15), kind: Field(Expr { hir_id: HirId(DefId(0:119 ~ hashbrown[130f]::raw::{impl#7}::to_base_index).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:457:13: 457:17 (#0), res: Local(HirId(DefId(0:119 ~ hashbrown[130f]::raw::{impl#7}::to_base_index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:119 ~ hashbrown[130f]::raw::{impl#7}::to_base_index).17), res: Local(HirId(DefId(0:119 ~ hashbrown[130f]::raw::{impl#7}::to_base_index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:457:13: 457:17 (#0) }, ptr#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:457:13: 457:21 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:457:22: 457:30 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:457:13: 457:30 (#0) }, Ty { hir_id: HirId(DefId(0:119 ~ hashbrown[411b]::raw::{impl#7}::to_base_index).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:457:34: 457:39 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:119 ~ hashbrown[411b]::raw::{impl#7}::to_base_index).19), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:457:34: 457:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:457:13: 457:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:119 ~ hashbrown[411b]::raw::{impl#7}::to_base_index).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:457:42: 457:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:457:42: 457:43 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ hashbrown[411b]::raw::offset_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ hashbrown[411b]::raw::{impl#7}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:77 ~ hashbrown[130f]::raw::invalid_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2168 ~ core[7d5a]::mem::align_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2691 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ hashbrown[411b]::raw::{impl#7}::as_non_null)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2388 ~ core[7d5a]::ptr::non_null::{impl#3}::new_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ hashbrown[411b]::raw::{impl#7}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:122 ~ hashbrown[130f]::raw::{impl#7}::next_n)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:77 ~ hashbrown[411b]::raw::invalid_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:122 ~ hashbrown[130f]::raw::{impl#7}::next_n).16), kind: Cast(Expr { hir_id: HirId(DefId(0:122 ~ hashbrown[411b]::raw::{impl#7}::next_n).17), kind: MethodCall(PathSegment { ident: as_ptr#0, hir_id: HirId(DefId(0:122 ~ hashbrown[130f]::raw::{impl#7}::next_n).18), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:122 ~ hashbrown[130f]::raw::{impl#7}::next_n).19), kind: Field(Expr { hir_id: HirId(DefId(0:122 ~ hashbrown[130f]::raw::{impl#7}::next_n).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:541:25: 541:29 (#0), res: Local(HirId(DefId(0:122 ~ hashbrown[411b]::raw::{impl#7}::next_n).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:122 ~ hashbrown[411b]::raw::{impl#7}::next_n).21), res: Local(HirId(DefId(0:122 ~ hashbrown[130f]::raw::{impl#7}::next_n).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:541:25: 541:29 (#0) }, ptr#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:541:25: 541:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:541:34: 541:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:541:25: 541:42 (#0) }, Ty { hir_id: HirId(DefId(0:122 ~ hashbrown[130f]::raw::{impl#7}::next_n).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:541:46: 541:51 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:122 ~ hashbrown[130f]::raw::{impl#7}::next_n).23), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:541:46: 541:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:541:25: 541:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:122 ~ hashbrown[411b]::raw::{impl#7}::next_n).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:541:54: 541:60 (#0), res: Local(HirId(DefId(0:122 ~ hashbrown[411b]::raw::{impl#7}::next_n).4)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:122 ~ hashbrown[411b]::raw::{impl#7}::next_n).25), res: Local(HirId(DefId(0:122 ~ hashbrown[411b]::raw::{impl#7}::next_n).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:541:54: 541:60 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2691 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2388 ~ core[7d5a]::ptr::non_null::{impl#3}::new_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ hashbrown[130f]::raw::{impl#7}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2704 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::drop_in_place)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ hashbrown[411b]::raw::{impl#7}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ hashbrown[411b]::raw::{impl#7}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2697 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::read)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ hashbrown[411b]::raw::{impl#7}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ hashbrown[411b]::raw::{impl#7}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2705 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::write)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ hashbrown[130f]::raw::{impl#7}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ hashbrown[130f]::raw::{impl#7}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ hashbrown[411b]::raw::{impl#7}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[130f]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ hashbrown[130f]::raw::{impl#7}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ hashbrown[130f]::raw::{impl#8}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:144 ~ hashbrown[130f]::raw::{impl#8}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:151 ~ hashbrown[130f]::raw::{impl#9}::with_capacity_in)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:149 ~ hashbrown[130f]::raw::{impl#9}::new_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:150 ~ hashbrown[130f]::raw::{impl#9}::new_uninitialized)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25471 ~ core[7d5a]::num::{impl#11}::is_power_of_two)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:239 ~ hashbrown[130f]::raw::{impl#13}::new_uninitialized)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:151 ~ hashbrown[411b]::raw::{impl#9}::with_capacity_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:244 ~ hashbrown[411b]::raw::{impl#13}::with_capacity)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:152 ~ hashbrown[411b]::raw::{impl#9}::allocator)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:153 ~ hashbrown[411b]::raw::{impl#9}::data_end)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2401 ~ core[7d5a]::ptr::non_null::{impl#3}::cast)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:154 ~ hashbrown[411b]::raw::{impl#9}::allocation_size)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:292 ~ hashbrown[411b]::raw::{impl#13}::allocation_size_or_zero)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:155 ~ hashbrown[411b]::raw::{impl#9}::bucket_index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:119 ~ hashbrown[130f]::raw::{impl#7}::to_base_index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:153 ~ hashbrown[130f]::raw::{impl#9}::data_end)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket).24), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:156 ~ hashbrown[411b]::raw::{impl#9}::bucket).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#65), res: Local(HirId(DefId(0:156 ~ hashbrown[411b]::raw::{impl#9}::bucket).17)), segments: [PathSegment { ident: left_val#65, hir_id: HirId(DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket).26), res: Local(HirId(DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#65) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:20: 102:29 (#65) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:156 ~ hashbrown[411b]::raw::{impl#9}::bucket).27), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#65), res: Local(HirId(DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket).18)), segments: [PathSegment { ident: right_val#65, hir_id: HirId(DefId(0:156 ~ hashbrown[411b]::raw::{impl#9}::bucket).29), res: Local(HirId(DefId(0:156 ~ hashbrown[411b]::raw::{impl#9}::bucket).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#65) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:33: 102:43 (#65) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:857:23: 857:28 (#0), res: Local(HirId(DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket).4)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:156 ~ hashbrown[411b]::raw::{impl#9}::bucket).74), res: Local(HirId(DefId(0:156 ~ hashbrown[411b]::raw::{impl#9}::bucket).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:857:23: 857:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket).75), kind: MethodCall(PathSegment { ident: buckets#0, hir_id: HirId(DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket).76), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:857:31: 857:35 (#0), res: Local(HirId(DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket).78), res: Local(HirId(DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:857:31: 857:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:857:36: 857:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:857:31: 857:45 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:221 ~ hashbrown[130f]::raw::{impl#9}::buckets)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ hashbrown[130f]::raw::{impl#7}::from_base_index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:153 ~ hashbrown[130f]::raw::{impl#9}::data_end)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:157 ~ hashbrown[130f]::raw::{impl#9}::erase_no_drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:155 ~ hashbrown[130f]::raw::{impl#9}::bucket_index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:294 ~ hashbrown[411b]::raw::{impl#13}::erase)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:158 ~ hashbrown[130f]::raw::{impl#9}::erase)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:157 ~ hashbrown[411b]::raw::{impl#9}::erase_no_drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ hashbrown[130f]::raw::{impl#7}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:159 ~ hashbrown[130f]::raw::{impl#9}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:157 ~ hashbrown[130f]::raw::{impl#9}::erase_no_drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ hashbrown[130f]::raw::{impl#7}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:155 ~ hashbrown[411b]::raw::{impl#9}::bucket_index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ hashbrown[411b]::raw::{impl#9}::remove_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ hashbrown[411b]::raw::{impl#9}::find)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:159 ~ hashbrown[130f]::raw::{impl#9}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:162 ~ hashbrown[411b]::raw::{impl#9}::clear_no_drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:293 ~ hashbrown[411b]::raw::{impl#13}::clear_no_drop)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:163 ~ hashbrown[411b]::raw::{impl#9}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:220 ~ hashbrown[130f]::raw::{impl#9}::is_empty)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1359 ~ hashbrown[130f]::scopeguard::guard)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:162 ~ hashbrown[130f]::raw::{impl#9}::clear_no_drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:255 ~ hashbrown[130f]::raw::{impl#13}::drop_elements)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3002 ~ core[7d5a]::cmp::Ord::max)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:931:12: 931:20 (#0), res: Local(HirId(DefId(0:165 ~ hashbrown[130f]::raw::{impl#9}::shrink_to).20)), segments: [PathSegment { ident: min_size#0, hir_id: HirId(DefId(0:165 ~ hashbrown[130f]::raw::{impl#9}::shrink_to).24), res: Local(HirId(DefId(0:165 ~ hashbrown[130f]::raw::{impl#9}::shrink_to).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:931:12: 931:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:165 ~ hashbrown[130f]::raw::{impl#9}::shrink_to).25), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:931:24: 931:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:931:24: 931:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:257 ~ hashbrown[411b]::raw::{impl#13}::drop_inner_table)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:100 ~ hashbrown[411b]::raw::capacity_to_buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:955:12: 955:23 (#0), res: Local(HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).84)), segments: [PathSegment { ident: min_buckets#0, hir_id: HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).88), res: Local(HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).84)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:955:12: 955:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).89), kind: MethodCall(PathSegment { ident: buckets#0, hir_id: HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).90), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:955:26: 955:30 (#0), res: Local(HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).92), res: Local(HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:955:26: 955:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:955:31: 955:40 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:955:26: 955:40 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:221 ~ hashbrown[411b]::raw::{impl#9}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).96), kind: Field(Expr { hir_id: HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).97), kind: Field(Expr { hir_id: HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:957:16: 957:20 (#0), res: Local(HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).99), res: Local(HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:957:16: 957:20 (#0) }, table#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:957:16: 957:26 (#0) }, items#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:957:16: 957:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to).100), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:957:36: 957:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:957:36: 957:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:244 ~ hashbrown[411b]::raw::{impl#13}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:257 ~ hashbrown[411b]::raw::{impl#13}::drop_inner_table)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10388 ~ core[7d5a]::result::{impl#0}::is_err)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:175 ~ hashbrown[411b]::raw::{impl#9}::resize)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1283 ~ core[7d5a]::hint::unreachable_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:167 ~ hashbrown[130f]::raw::{impl#9}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3153 ~ core[7d5a]::convert::identity)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:167 ~ hashbrown[411b]::raw::{impl#9}::reserve).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:994:21: 994:31 (#0), res: Local(HirId(DefId(0:167 ~ hashbrown[130f]::raw::{impl#9}::reserve).4)), segments: [PathSegment { ident: additional#0, hir_id: HirId(DefId(0:167 ~ hashbrown[130f]::raw::{impl#9}::reserve).13), res: Local(HirId(DefId(0:167 ~ hashbrown[411b]::raw::{impl#9}::reserve).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:994:21: 994:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:167 ~ hashbrown[411b]::raw::{impl#9}::reserve).14), kind: Field(Expr { hir_id: HirId(DefId(0:167 ~ hashbrown[130f]::raw::{impl#9}::reserve).15), kind: Field(Expr { hir_id: HirId(DefId(0:167 ~ hashbrown[411b]::raw::{impl#9}::reserve).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:994:34: 994:38 (#0), res: Local(HirId(DefId(0:167 ~ hashbrown[130f]::raw::{impl#9}::reserve).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:167 ~ hashbrown[130f]::raw::{impl#9}::reserve).17), res: Local(HirId(DefId(0:167 ~ hashbrown[130f]::raw::{impl#9}::reserve).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:994:34: 994:38 (#0) }, table#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:994:34: 994:44 (#0) }, growth_left#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:994:34: 994:56 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10388 ~ core[7d5a]::result::{impl#0}::is_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:171 ~ hashbrown[130f]::raw::{impl#9}::reserve_rehash)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1283 ~ core[7d5a]::hint::unreachable_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:169 ~ hashbrown[130f]::raw::{impl#9}::try_reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:169 ~ hashbrown[130f]::raw::{impl#9}::try_reserve).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1018:12: 1018:22 (#0), res: Local(HirId(DefId(0:169 ~ hashbrown[130f]::raw::{impl#9}::try_reserve).4)), segments: [PathSegment { ident: additional#0, hir_id: HirId(DefId(0:169 ~ hashbrown[130f]::raw::{impl#9}::try_reserve).10), res: Local(HirId(DefId(0:169 ~ hashbrown[130f]::raw::{impl#9}::try_reserve).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1018:12: 1018:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:169 ~ hashbrown[130f]::raw::{impl#9}::try_reserve).11), kind: Field(Expr { hir_id: HirId(DefId(0:169 ~ hashbrown[130f]::raw::{impl#9}::try_reserve).12), kind: Field(Expr { hir_id: HirId(DefId(0:169 ~ hashbrown[130f]::raw::{impl#9}::try_reserve).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1018:25: 1018:29 (#0), res: Local(HirId(DefId(0:169 ~ hashbrown[130f]::raw::{impl#9}::try_reserve).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:169 ~ hashbrown[130f]::raw::{impl#9}::try_reserve).14), res: Local(HirId(DefId(0:169 ~ hashbrown[130f]::raw::{impl#9}::try_reserve).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1018:25: 1018:29 (#0) }, table#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1018:25: 1018:35 (#0) }, growth_left#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1018:25: 1018:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:171 ~ hashbrown[130f]::raw::{impl#9}::reserve_rehash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:171 ~ hashbrown[130f]::raw::{impl#9}::reserve_rehash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:282 ~ hashbrown[130f]::raw::{impl#13}::reserve_rehash_inner)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:171 ~ hashbrown[130f]::raw::{impl#9}::reserve_rehash).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1054:33: 1054:39 (#0), res: Local(HirId(DefId(0:171 ~ hashbrown[130f]::raw::{impl#9}::reserve_rehash).6)), segments: [PathSegment { ident: hasher#0, hir_id: HirId(DefId(0:171 ~ hashbrown[130f]::raw::{impl#9}::reserve_rehash).29), res: Local(HirId(DefId(0:171 ~ hashbrown[130f]::raw::{impl#9}::reserve_rehash).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1054:33: 1054:39 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2750 ~ core[7d5a]::ptr::drop_in_place)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:175 ~ hashbrown[130f]::raw::{impl#9}::resize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:285 ~ hashbrown[130f]::raw::{impl#13}::resize_inner)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:175 ~ hashbrown[130f]::raw::{impl#9}::resize).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1108:29: 1108:35 (#0), res: Local(HirId(DefId(0:175 ~ hashbrown[130f]::raw::{impl#9}::resize).6)), segments: [PathSegment { ident: hasher#0, hir_id: HirId(DefId(0:175 ~ hashbrown[130f]::raw::{impl#9}::resize).28), res: Local(HirId(DefId(0:175 ~ hashbrown[130f]::raw::{impl#9}::resize).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1108:29: 1108:35 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:250 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3153 ~ core[7d5a]::convert::identity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert).37), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:48: 1133:50 (#0) }, Expr { hir_id: HirId(DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert).38), kind: Field(Expr { hir_id: HirId(DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert).39), kind: Field(Expr { hir_id: HirId(DefId(0:178 ~ hashbrown[411b]::raw::{impl#9}::insert).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:25: 1133:29 (#0), res: Local(HirId(DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:178 ~ hashbrown[411b]::raw::{impl#9}::insert).41), res: Local(HirId(DefId(0:178 ~ hashbrown[411b]::raw::{impl#9}::insert).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:25: 1133:29 (#0) }, table#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:25: 1133:35 (#0) }, growth_left#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:25: 1133:47 (#0) }, Expr { hir_id: HirId(DefId(0:178 ~ hashbrown[411b]::raw::{impl#9}::insert).42), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:51: 1133:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:51: 1133:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:25: 1133:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert).43), kind: MethodCall(PathSegment { ident: special_is_empty#0, hir_id: HirId(DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert).44), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:178 ~ hashbrown[411b]::raw::{impl#9}::insert).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:56: 1133:64 (#0), res: Local(HirId(DefId(0:178 ~ hashbrown[411b]::raw::{impl#9}::insert).31)), segments: [PathSegment { ident: old_ctrl#0, hir_id: HirId(DefId(0:178 ~ hashbrown[411b]::raw::{impl#9}::insert).46), res: Local(HirId(DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert).31)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:56: 1133:64 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:65: 1133:83 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:56: 1133:83 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert).38), kind: Field(Expr { hir_id: HirId(DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert).39), kind: Field(Expr { hir_id: HirId(DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:25: 1133:29 (#0), res: Local(HirId(DefId(0:178 ~ hashbrown[411b]::raw::{impl#9}::insert).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert).41), res: Local(HirId(DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:25: 1133:29 (#0) }, table#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:25: 1133:35 (#0) }, growth_left#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:25: 1133:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert).42), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:51: 1133:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1133:51: 1133:52 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ hashbrown[130f]::raw::{impl#2}::special_is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:167 ~ hashbrown[411b]::raw::{impl#9}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:250 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ hashbrown[130f]::raw::{impl#9}::insert_in_slot)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:180 ~ hashbrown[130f]::raw::{impl#9}::insert_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[130f]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:178 ~ hashbrown[411b]::raw::{impl#9}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:182 ~ hashbrown[411b]::raw::{impl#9}::replace_bucket_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:155 ~ hashbrown[411b]::raw::{impl#9}::bucket_index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:222 ~ hashbrown[130f]::raw::{impl#9}::is_bucket_full)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:159 ~ hashbrown[411b]::raw::{impl#9}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:182 ~ hashbrown[130f]::raw::{impl#9}::replace_bucket_with).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1188:33: 1188:34 (#0), res: Local(HirId(DefId(0:182 ~ hashbrown[130f]::raw::{impl#9}::replace_bucket_with).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:182 ~ hashbrown[411b]::raw::{impl#9}::replace_bucket_with).76), res: Local(HirId(DefId(0:182 ~ hashbrown[411b]::raw::{impl#9}::replace_bucket_with).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1188:33: 1188:34 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ hashbrown[411b]::raw::{impl#7}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:184 ~ hashbrown[130f]::raw::{impl#9}::find_or_find_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:167 ~ hashbrown[130f]::raw::{impl#9}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:248 ~ hashbrown[130f]::raw::{impl#13}::find_or_find_insert_slot_inner)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:184 ~ hashbrown[130f]::raw::{impl#9}::find_or_find_insert_slot).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1224:68: 1224:70 (#0), res: Local(HirId(DefId(0:184 ~ hashbrown[130f]::raw::{impl#9}::find_or_find_insert_slot).6)), segments: [PathSegment { ident: eq#0, hir_id: HirId(DefId(0:184 ~ hashbrown[130f]::raw::{impl#9}::find_or_find_insert_slot).32), res: Local(HirId(DefId(0:184 ~ hashbrown[411b]::raw::{impl#9}::find_or_find_insert_slot).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1224:68: 1224:70 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ hashbrown[411b]::raw::{impl#9}::insert_in_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:266 ~ hashbrown[411b]::raw::{impl#13}::record_item_insert_at)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:156 ~ hashbrown[411b]::raw::{impl#9}::bucket)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ hashbrown[411b]::raw::{impl#7}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ hashbrown[130f]::raw::{impl#9}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:189 ~ hashbrown[411b]::raw::{impl#9}::find).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1263:48: 1263:50 (#0), res: Local(HirId(DefId(0:189 ~ hashbrown[411b]::raw::{impl#9}::find).6)), segments: [PathSegment { ident: eq#0, hir_id: HirId(DefId(0:189 ~ hashbrown[130f]::raw::{impl#9}::find).22), res: Local(HirId(DefId(0:189 ~ hashbrown[130f]::raw::{impl#9}::find).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1263:48: 1263:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:156 ~ hashbrown[411b]::raw::{impl#9}::bucket)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:192 ~ hashbrown[411b]::raw::{impl#9}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ hashbrown[411b]::raw::{impl#9}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ hashbrown[411b]::raw::{impl#7}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:194 ~ hashbrown[411b]::raw::{impl#9}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ hashbrown[411b]::raw::{impl#9}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[411b]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:210 ~ hashbrown[130f]::raw::{impl#9}::get_many_mut_pointers)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:8925 ~ core[7d5a]::iter::traits::iterator::Iterator::enumerate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).36), kind: MethodCall(PathSegment { ident: is_some#0, hir_id: HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).37), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:20: 1312:23 (#0), res: Local(HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).26)), segments: [PathSegment { ident: cur#0, hir_id: HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).39), res: Local(HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:20: 1312:23 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:24: 1312:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:20: 1312:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).40), kind: MethodCall(PathSegment { ident: contains#0, hir_id: HirId(DefId(0:196 ~ hashbrown[130f]::raw::{impl#9}::get_many_mut).41), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).42), kind: Index(Expr { hir_id: HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:37: 1312:41 (#0), res: Local(HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).18)), segments: [PathSegment { ident: ptrs#0, hir_id: HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).44), res: Local(HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:37: 1312:41 (#0) }, Expr { hir_id: HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).45), kind: Struct(LangItem(RangeTo, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:42: 1312:45 (#0)), [ExprField { hir_id: HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).48), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:196 ~ hashbrown[130f]::raw::{impl#9}::get_many_mut).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:44: 1312:45 (#0), res: Local(HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).25)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).47), res: Local(HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:44: 1312:45 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:44: 1312:45 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:42: 1312:45 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:41: 1312:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:37: 1312:46 (#0) }, [Expr { hir_id: HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:56: 1312:59 (#0), res: Local(HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).26)), segments: [PathSegment { ident: cur#0, hir_id: HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).50), res: Local(HirId(DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:56: 1312:59 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:47: 1312:60 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1312:37: 1312:60 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13356 ~ core[7d5a]::slice::{impl#0}::contains)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:4571 ~ core[7d5a]::array::{impl#23}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2399 ~ core[7d5a]::ptr::non_null::{impl#3}::as_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:203 ~ hashbrown[130f]::raw::{impl#9}::get_many_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:210 ~ hashbrown[130f]::raw::{impl#9}::get_many_mut_pointers)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:4571 ~ core[7d5a]::array::{impl#23}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2399 ~ core[7d5a]::ptr::non_null::{impl#3}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:210 ~ hashbrown[130f]::raw::{impl#9}::get_many_mut_pointers)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:4400 ~ core[7d5a]::array::from_fn)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ hashbrown[130f]::raw::{impl#9}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:210 ~ hashbrown[130f]::raw::{impl#9}::get_many_mut_pointers).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1338:38: 1338:40 (#0), res: Local(HirId(DefId(0:210 ~ hashbrown[130f]::raw::{impl#9}::get_many_mut_pointers).6)), segments: [PathSegment { ident: eq#0, hir_id: HirId(DefId(0:210 ~ hashbrown[130f]::raw::{impl#9}::get_many_mut_pointers).31), res: Local(HirId(DefId(0:210 ~ hashbrown[130f]::raw::{impl#9}::get_many_mut_pointers).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1338:38: 1338:40 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ hashbrown[130f]::raw::{impl#7}::as_non_null)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:218 ~ hashbrown[411b]::raw::{impl#9}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:218 ~ hashbrown[130f]::raw::{impl#9}::capacity).4), kind: Field(Expr { hir_id: HirId(DefId(0:218 ~ hashbrown[130f]::raw::{impl#9}::capacity).5), kind: Field(Expr { hir_id: HirId(DefId(0:218 ~ hashbrown[130f]::raw::{impl#9}::capacity).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1349:9: 1349:13 (#0), res: Local(HirId(DefId(0:218 ~ hashbrown[130f]::raw::{impl#9}::capacity).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:218 ~ hashbrown[130f]::raw::{impl#9}::capacity).7), res: Local(HirId(DefId(0:218 ~ hashbrown[130f]::raw::{impl#9}::capacity).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1349:9: 1349:13 (#0) }, table#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1349:9: 1349:19 (#0) }, items#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1349:9: 1349:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:218 ~ hashbrown[130f]::raw::{impl#9}::capacity).8), kind: Field(Expr { hir_id: HirId(DefId(0:218 ~ hashbrown[130f]::raw::{impl#9}::capacity).9), kind: Field(Expr { hir_id: HirId(DefId(0:218 ~ hashbrown[130f]::raw::{impl#9}::capacity).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1349:28: 1349:32 (#0), res: Local(HirId(DefId(0:218 ~ hashbrown[130f]::raw::{impl#9}::capacity).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:218 ~ hashbrown[130f]::raw::{impl#9}::capacity).11), res: Local(HirId(DefId(0:218 ~ hashbrown[130f]::raw::{impl#9}::capacity).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1349:28: 1349:32 (#0) }, table#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1349:28: 1349:38 (#0) }, growth_left#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1349:28: 1349:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ hashbrown[130f]::raw::{impl#9}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:220 ~ hashbrown[130f]::raw::{impl#9}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:220 ~ hashbrown[130f]::raw::{impl#9}::is_empty).4), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:220 ~ hashbrown[130f]::raw::{impl#9}::is_empty).5), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:220 ~ hashbrown[130f]::raw::{impl#9}::is_empty).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1361:9: 1361:13 (#0), res: Local(HirId(DefId(0:220 ~ hashbrown[130f]::raw::{impl#9}::is_empty).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:220 ~ hashbrown[130f]::raw::{impl#9}::is_empty).7), res: Local(HirId(DefId(0:220 ~ hashbrown[130f]::raw::{impl#9}::is_empty).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1361:9: 1361:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1361:14: 1361:19 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1361:9: 1361:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:220 ~ hashbrown[130f]::raw::{impl#9}::is_empty).8), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1361:23: 1361:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1361:23: 1361:24 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ hashbrown[130f]::raw::{impl#9}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:221 ~ hashbrown[130f]::raw::{impl#9}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:221 ~ hashbrown[130f]::raw::{impl#9}::buckets).4), kind: Field(Expr { hir_id: HirId(DefId(0:221 ~ hashbrown[130f]::raw::{impl#9}::buckets).5), kind: Field(Expr { hir_id: HirId(DefId(0:221 ~ hashbrown[130f]::raw::{impl#9}::buckets).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1367:9: 1367:13 (#0), res: Local(HirId(DefId(0:221 ~ hashbrown[130f]::raw::{impl#9}::buckets).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:221 ~ hashbrown[130f]::raw::{impl#9}::buckets).7), res: Local(HirId(DefId(0:221 ~ hashbrown[130f]::raw::{impl#9}::buckets).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1367:9: 1367:13 (#0) }, table#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1367:9: 1367:19 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1367:9: 1367:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:221 ~ hashbrown[130f]::raw::{impl#9}::buckets).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1367:34: 1367:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1367:34: 1367:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:222 ~ hashbrown[130f]::raw::{impl#9}::is_bucket_full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:274 ~ hashbrown[130f]::raw::{impl#13}::is_bucket_full)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ hashbrown[130f]::raw::{impl#9}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:253 ~ hashbrown[130f]::raw::{impl#13}::iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:224 ~ hashbrown[130f]::raw::{impl#9}::iter_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:469 ~ hashbrown[130f]::raw::{impl#51}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:225 ~ hashbrown[130f]::raw::{impl#9}::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ hashbrown[130f]::raw::{impl#9}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:226 ~ hashbrown[130f]::raw::{impl#9}::drain_iter_from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:226 ~ hashbrown[130f]::raw::{impl#9}::drain_iter_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ hashbrown[411b]::raw::{impl#9}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:226 ~ hashbrown[411b]::raw::{impl#9}::drain_iter_from).28), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:226 ~ hashbrown[130f]::raw::{impl#9}::drain_iter_from).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#80), res: Local(HirId(DefId(0:226 ~ hashbrown[130f]::raw::{impl#9}::drain_iter_from).20)), segments: [PathSegment { ident: left_val#80, hir_id: HirId(DefId(0:226 ~ hashbrown[130f]::raw::{impl#9}::drain_iter_from).30), res: Local(HirId(DefId(0:226 ~ hashbrown[411b]::raw::{impl#9}::drain_iter_from).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#80) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#80) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:226 ~ hashbrown[130f]::raw::{impl#9}::drain_iter_from).31), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:226 ~ hashbrown[411b]::raw::{impl#9}::drain_iter_from).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#80), res: Local(HirId(DefId(0:226 ~ hashbrown[130f]::raw::{impl#9}::drain_iter_from).21)), segments: [PathSegment { ident: right_val#80, hir_id: HirId(DefId(0:226 ~ hashbrown[411b]::raw::{impl#9}::drain_iter_from).33), res: Local(HirId(DefId(0:226 ~ hashbrown[411b]::raw::{impl#9}::drain_iter_from).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#80) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#80) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:227 ~ hashbrown[130f]::raw::{impl#9}::into_iter_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ hashbrown[130f]::raw::{impl#9}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:227 ~ hashbrown[130f]::raw::{impl#9}::into_iter_from).28), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:227 ~ hashbrown[411b]::raw::{impl#9}::into_iter_from).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#83), res: Local(HirId(DefId(0:227 ~ hashbrown[411b]::raw::{impl#9}::into_iter_from).20)), segments: [PathSegment { ident: left_val#83, hir_id: HirId(DefId(0:227 ~ hashbrown[411b]::raw::{impl#9}::into_iter_from).30), res: Local(HirId(DefId(0:227 ~ hashbrown[411b]::raw::{impl#9}::into_iter_from).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#83) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#83) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:227 ~ hashbrown[411b]::raw::{impl#9}::into_iter_from).31), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:227 ~ hashbrown[411b]::raw::{impl#9}::into_iter_from).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#83), res: Local(HirId(DefId(0:227 ~ hashbrown[411b]::raw::{impl#9}::into_iter_from).21)), segments: [PathSegment { ident: right_val#83, hir_id: HirId(DefId(0:227 ~ hashbrown[411b]::raw::{impl#9}::into_iter_from).33), res: Local(HirId(DefId(0:227 ~ hashbrown[411b]::raw::{impl#9}::into_iter_from).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#83) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#83) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ hashbrown[411b]::raw::{impl#9}::into_allocation)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ hashbrown[411b]::raw::{impl#9}::into_allocation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:276 ~ hashbrown[411b]::raw::{impl#13}::is_empty_singleton)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:105 ~ hashbrown[411b]::raw::{impl#4}::calculate_layout_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[411b]::raw::{impl#13}::buckets)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:1283 ~ core[7d5a]::hint::unreachable_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2388 ~ core[7d5a]::ptr::non_null::{impl#3}::new_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2691 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2785 ~ core[7d5a]::ptr::read)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2154 ~ core[7d5a]::mem::forget)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:171 ~ hashbrown[411b]::raw::{impl#9}::reserve_rehash).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1054:33: 1054:39 (#0), res: Local(HirId(DefId(0:171 ~ hashbrown[411b]::raw::{impl#9}::reserve_rehash).6)), segments: [PathSegment { ident: hasher#0, hir_id: HirId(DefId(0:171 ~ hashbrown[411b]::raw::{impl#9}::reserve_rehash).29), res: Local(HirId(DefId(0:171 ~ hashbrown[411b]::raw::{impl#9}::reserve_rehash).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1054:33: 1054:39 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:175 ~ hashbrown[411b]::raw::{impl#9}::resize).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1108:29: 1108:35 (#0), res: Local(HirId(DefId(0:175 ~ hashbrown[411b]::raw::{impl#9}::resize).6)), segments: [PathSegment { ident: hasher#0, hir_id: HirId(DefId(0:175 ~ hashbrown[411b]::raw::{impl#9}::resize).28), res: Local(HirId(DefId(0:175 ~ hashbrown[411b]::raw::{impl#9}::resize).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1108:29: 1108:35 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:182 ~ hashbrown[411b]::raw::{impl#9}::replace_bucket_with).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1188:33: 1188:34 (#0), res: Local(HirId(DefId(0:182 ~ hashbrown[411b]::raw::{impl#9}::replace_bucket_with).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:182 ~ hashbrown[411b]::raw::{impl#9}::replace_bucket_with).76), res: Local(HirId(DefId(0:182 ~ hashbrown[411b]::raw::{impl#9}::replace_bucket_with).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1188:33: 1188:34 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:184 ~ hashbrown[130f]::raw::{impl#9}::find_or_find_insert_slot).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1224:68: 1224:70 (#0), res: Local(HirId(DefId(0:184 ~ hashbrown[130f]::raw::{impl#9}::find_or_find_insert_slot).6)), segments: [PathSegment { ident: eq#0, hir_id: HirId(DefId(0:184 ~ hashbrown[130f]::raw::{impl#9}::find_or_find_insert_slot).32), res: Local(HirId(DefId(0:184 ~ hashbrown[130f]::raw::{impl#9}::find_or_find_insert_slot).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1224:68: 1224:70 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:189 ~ hashbrown[130f]::raw::{impl#9}::find).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1263:48: 1263:50 (#0), res: Local(HirId(DefId(0:189 ~ hashbrown[130f]::raw::{impl#9}::find).6)), segments: [PathSegment { ident: eq#0, hir_id: HirId(DefId(0:189 ~ hashbrown[130f]::raw::{impl#9}::find).22), res: Local(HirId(DefId(0:189 ~ hashbrown[130f]::raw::{impl#9}::find).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1263:48: 1263:50 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:210 ~ hashbrown[130f]::raw::{impl#9}::get_many_mut_pointers).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1338:38: 1338:40 (#0), res: Local(HirId(DefId(0:210 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut_pointers).6)), segments: [PathSegment { ident: eq#0, hir_id: HirId(DefId(0:210 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut_pointers).31), res: Local(HirId(DefId(0:210 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut_pointers).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1338:38: 1338:40 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:237 ~ hashbrown[411b]::raw::{impl#12}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2388 ~ core[7d5a]::ptr::non_null::{impl#3}::new_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2564 ~ core[7d5a]::ptr::const_ptr::{impl#0}::cast_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2306 ~ hashbrown[411b]::raw::neon::{impl#0}::static_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:239 ~ hashbrown[130f]::raw::{impl#13}::new_uninitialized)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25471 ~ core[7d5a]::num::{impl#11}::is_power_of_two)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:82 ~ hashbrown[130f]::raw::{impl#0}::capacity_overflow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ hashbrown[130f]::raw::alloc::inner::do_alloc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2401 ~ core[7d5a]::ptr::non_null::{impl#3}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ hashbrown[130f]::raw::{impl#0}::alloc_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2388 ~ core[7d5a]::ptr::non_null::{impl#3}::new_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2689 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:239 ~ hashbrown[130f]::raw::{impl#13}::new_uninitialized).123), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1551:26: 1551:33 (#0), res: Local(HirId(DefId(0:239 ~ hashbrown[130f]::raw::{impl#13}::new_uninitialized).6)), segments: [PathSegment { ident: buckets#0, hir_id: HirId(DefId(0:239 ~ hashbrown[130f]::raw::{impl#13}::new_uninitialized).124), res: Local(HirId(DefId(0:239 ~ hashbrown[130f]::raw::{impl#13}::new_uninitialized).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1551:26: 1551:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:239 ~ hashbrown[130f]::raw::{impl#13}::new_uninitialized).125), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1551:36: 1551:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1551:36: 1551:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:101 ~ hashbrown[130f]::raw::bucket_mask_to_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:239 ~ hashbrown[130f]::raw::{impl#13}::new_uninitialized).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1553:50: 1553:57 (#0), res: Local(HirId(DefId(0:239 ~ hashbrown[130f]::raw::{impl#13}::new_uninitialized).6)), segments: [PathSegment { ident: buckets#0, hir_id: HirId(DefId(0:239 ~ hashbrown[130f]::raw::{impl#13}::new_uninitialized).134), res: Local(HirId(DefId(0:239 ~ hashbrown[130f]::raw::{impl#13}::new_uninitialized).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1553:50: 1553:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:239 ~ hashbrown[411b]::raw::{impl#13}::new_uninitialized).135), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1553:60: 1553:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1553:60: 1553:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:241 ~ hashbrown[130f]::raw::{impl#13}::fallible_with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:241 ~ hashbrown[130f]::raw::{impl#13}::fallible_with_capacity).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1571:12: 1571:20 (#0), res: Local(HirId(DefId(0:241 ~ hashbrown[130f]::raw::{impl#13}::fallible_with_capacity).6)), segments: [PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:241 ~ hashbrown[130f]::raw::{impl#13}::fallible_with_capacity).12), res: Local(HirId(DefId(0:241 ~ hashbrown[130f]::raw::{impl#13}::fallible_with_capacity).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1571:12: 1571:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:241 ~ hashbrown[130f]::raw::{impl#13}::fallible_with_capacity).13), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1571:24: 1571:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1571:24: 1571:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9690 ~ core[7d5a]::option::{impl#0}::ok_or_else)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:100 ~ hashbrown[130f]::raw::capacity_to_buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:82 ~ hashbrown[130f]::raw::{impl#0}::capacity_overflow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:239 ~ hashbrown[130f]::raw::{impl#13}::new_uninitialized)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2706 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::write_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:275 ~ hashbrown[411b]::raw::{impl#13}::num_ctrl_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:244 ~ hashbrown[411b]::raw::{impl#13}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:241 ~ hashbrown[411b]::raw::{impl#13}::fallible_with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1283 ~ core[7d5a]::hint::unreachable_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ hashbrown[130f]::raw::{impl#13}::fix_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3153 ~ core[7d5a]::convert::identity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:274 ~ hashbrown[130f]::raw::{impl#13}::is_bucket_full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:246 ~ hashbrown[411b]::raw::{impl#13}::fix_insert_slot).22), kind: Field(Expr { hir_id: HirId(DefId(0:246 ~ hashbrown[411b]::raw::{impl#13}::fix_insert_slot).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1664:27: 1664:31 (#0), res: Local(HirId(DefId(0:246 ~ hashbrown[130f]::raw::{impl#13}::fix_insert_slot).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:246 ~ hashbrown[411b]::raw::{impl#13}::fix_insert_slot).24), res: Local(HirId(DefId(0:246 ~ hashbrown[411b]::raw::{impl#13}::fix_insert_slot).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1664:27: 1664:31 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1664:27: 1664:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:246 ~ hashbrown[411b]::raw::{impl#13}::fix_insert_slot).25), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:246 ~ hashbrown[411b]::raw::{impl#13}::fix_insert_slot).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1664:46: 1664:51 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:246 ~ hashbrown[130f]::raw::{impl#13}::fix_insert_slot).26), res: Def(Struct, DefId(0:2324 ~ hashbrown[130f]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1664:46: 1664:51 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:246 ~ hashbrown[130f]::raw::{impl#13}::fix_insert_slot).28), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1664:46: 1664:58 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9675 ~ core[7d5a]::option::{impl#0}::unwrap_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:61 ~ hashbrown[411b]::raw::bitmask::{impl#0}::lowest_set_bit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2320 ~ hashbrown[130f]::raw::neon::{impl#0}::match_empty_or_deleted)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2316 ~ hashbrown[130f]::raw::neon::{impl#0}::load_aligned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:61 ~ hashbrown[130f]::raw::bitmask::{impl#0}::lowest_set_bit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2320 ~ hashbrown[130f]::raw::neon::{impl#0}::match_empty_or_deleted)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3153 ~ core[7d5a]::convert::identity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).29), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:33: 1704:34 (#0) }, Expr { hir_id: HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).30), kind: Field(Expr { hir_id: HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:19: 1704:28 (#0), res: Local(HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).6)), segments: [PathSegment { ident: probe_seq#0, hir_id: HirId(DefId(0:247 ~ hashbrown[411b]::raw::{impl#13}::find_insert_slot_in_group).32), res: Local(HirId(DefId(0:247 ~ hashbrown[411b]::raw::{impl#13}::find_insert_slot_in_group).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:19: 1704:28 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:19: 1704:32 (#0) }, Expr { hir_id: HirId(DefId(0:247 ~ hashbrown[411b]::raw::{impl#13}::find_insert_slot_in_group).33), kind: MethodCall(PathSegment { ident: unwrap#0, hir_id: HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:35: 1704:38 (#0), res: Local(HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).15)), segments: [PathSegment { ident: bit#0, hir_id: HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).36), res: Local(HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:35: 1704:38 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:39: 1704:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:35: 1704:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:18: 1704:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).37), kind: Field(Expr { hir_id: HirId(DefId(0:247 ~ hashbrown[411b]::raw::{impl#13}::find_insert_slot_in_group).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:51: 1704:55 (#0), res: Local(HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).39), res: Local(HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:51: 1704:55 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:51: 1704:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).30), kind: Field(Expr { hir_id: HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:19: 1704:28 (#0), res: Local(HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).6)), segments: [PathSegment { ident: probe_seq#0, hir_id: HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).32), res: Local(HirId(DefId(0:247 ~ hashbrown[411b]::raw::{impl#13}::find_insert_slot_in_group).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:19: 1704:28 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:19: 1704:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:247 ~ hashbrown[411b]::raw::{impl#13}::find_insert_slot_in_group).33), kind: MethodCall(PathSegment { ident: unwrap#0, hir_id: HirId(DefId(0:247 ~ hashbrown[411b]::raw::{impl#13}::find_insert_slot_in_group).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:247 ~ hashbrown[411b]::raw::{impl#13}::find_insert_slot_in_group).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:35: 1704:38 (#0), res: Local(HirId(DefId(0:247 ~ hashbrown[411b]::raw::{impl#13}::find_insert_slot_in_group).15)), segments: [PathSegment { ident: bit#0, hir_id: HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).36), res: Local(HirId(DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:35: 1704:38 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:39: 1704:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1704:35: 1704:47 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ hashbrown[130f]::raw::{impl#2}::full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:265 ~ hashbrown[130f]::raw::{impl#13}::probe_seq)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2315 ~ hashbrown[130f]::raw::neon::{impl#0}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2318 ~ hashbrown[130f]::raw::neon::{impl#0}::match_tag)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).64), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:44: 1775:45 (#0) }, Expr { hir_id: HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).65), kind: Field(Expr { hir_id: HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:30: 1775:39 (#0), res: Local(HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).30)), segments: [PathSegment { ident: probe_seq#0, hir_id: HirId(DefId(0:248 ~ hashbrown[130f]::raw::{impl#13}::find_or_find_insert_slot_inner).67), res: Local(HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:30: 1775:39 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:30: 1775:43 (#0) }, Expr { hir_id: HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:46: 1775:49 (#0), res: Local(HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).55)), segments: [PathSegment { ident: bit#0, hir_id: HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).69), res: Local(HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:46: 1775:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:29: 1775:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:248 ~ hashbrown[130f]::raw::{impl#13}::find_or_find_insert_slot_inner).70), kind: Field(Expr { hir_id: HirId(DefId(0:248 ~ hashbrown[130f]::raw::{impl#13}::find_or_find_insert_slot_inner).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:53: 1775:57 (#0), res: Local(HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).72), res: Local(HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:53: 1775:57 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:53: 1775:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).65), kind: Field(Expr { hir_id: HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:30: 1775:39 (#0), res: Local(HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).30)), segments: [PathSegment { ident: probe_seq#0, hir_id: HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).67), res: Local(HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:30: 1775:39 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:30: 1775:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:46: 1775:49 (#0), res: Local(HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).55)), segments: [PathSegment { ident: bit#0, hir_id: HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).69), res: Local(HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1775:46: 1775:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3153 ~ core[7d5a]::convert::identity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1777:27: 1777:29 (#0), res: Local(HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).6)), segments: [PathSegment { ident: eq#0, hir_id: HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).81), res: Local(HirId(DefId(0:248 ~ hashbrown[411b]::raw::{impl#13}::find_or_find_insert_slot_inner).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1777:27: 1777:29 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3153 ~ core[7d5a]::convert::identity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:247 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot_in_group)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3153 ~ core[7d5a]::convert::identity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:60 ~ hashbrown[130f]::raw::bitmask::{impl#0}::any_bit_set)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2319 ~ hashbrown[130f]::raw::neon::{impl#0}::match_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ hashbrown[411b]::raw::{impl#13}::fix_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9675 ~ core[7d5a]::option::{impl#0}::unwrap_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:99 ~ hashbrown[130f]::raw::{impl#3}::move_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:249 ~ hashbrown[130f]::raw::{impl#13}::prepare_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:250 ~ hashbrown[411b]::raw::{impl#13}::find_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:269 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl_hash)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:250 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:265 ~ hashbrown[130f]::raw::{impl#13}::probe_seq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2315 ~ hashbrown[130f]::raw::neon::{impl#0}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:247 ~ hashbrown[411b]::raw::{impl#13}::find_insert_slot_in_group)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3153 ~ core[7d5a]::convert::identity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ hashbrown[130f]::raw::{impl#13}::fix_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9675 ~ core[7d5a]::option::{impl#0}::unwrap_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:99 ~ hashbrown[411b]::raw::{impl#3}::move_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:265 ~ hashbrown[411b]::raw::{impl#13}::probe_seq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2315 ~ hashbrown[411b]::raw::neon::{impl#0}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2318 ~ hashbrown[411b]::raw::neon::{impl#0}::match_tag)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).59), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:44: 1984:45 (#0) }, Expr { hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).60), kind: Field(Expr { hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:30: 1984:39 (#0), res: Local(HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).25)), segments: [PathSegment { ident: probe_seq#0, hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).62), res: Local(HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:30: 1984:39 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:30: 1984:43 (#0) }, Expr { hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:46: 1984:49 (#0), res: Local(HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).50)), segments: [PathSegment { ident: bit#0, hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).64), res: Local(HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).50)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:46: 1984:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:29: 1984:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).65), kind: Field(Expr { hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:53: 1984:57 (#0), res: Local(HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).67), res: Local(HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:53: 1984:57 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:53: 1984:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).60), kind: Field(Expr { hir_id: HirId(DefId(0:251 ~ hashbrown[130f]::raw::{impl#13}::find_inner).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:30: 1984:39 (#0), res: Local(HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).25)), segments: [PathSegment { ident: probe_seq#0, hir_id: HirId(DefId(0:251 ~ hashbrown[130f]::raw::{impl#13}::find_inner).62), res: Local(HirId(DefId(0:251 ~ hashbrown[130f]::raw::{impl#13}::find_inner).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:30: 1984:39 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:30: 1984:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:46: 1984:49 (#0), res: Local(HirId(DefId(0:251 ~ hashbrown[130f]::raw::{impl#13}::find_inner).50)), segments: [PathSegment { ident: bit#0, hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).64), res: Local(HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).50)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1984:46: 1984:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3153 ~ core[7d5a]::convert::identity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1986:27: 1986:29 (#0), res: Local(HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).6)), segments: [PathSegment { ident: eq#0, hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).76), res: Local(HirId(DefId(0:251 ~ hashbrown[130f]::raw::{impl#13}::find_inner).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1986:27: 1986:29 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3153 ~ core[7d5a]::convert::identity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:60 ~ hashbrown[411b]::raw::bitmask::{impl#0}::any_bit_set)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2319 ~ hashbrown[411b]::raw::neon::{impl#0}::match_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:99 ~ hashbrown[411b]::raw::{impl#3}::move_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:252 ~ hashbrown[130f]::raw::{impl#13}::prepare_rehash_in_place)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8902 ~ core[7d5a]::iter::traits::iterator::Iterator::step_by)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[130f]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[130f]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2316 ~ hashbrown[130f]::raw::neon::{impl#0}::load_aligned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2322 ~ hashbrown[411b]::raw::neon::{impl#0}::convert_special_to_empty_and_full_to_deleted)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2317 ~ hashbrown[411b]::raw::neon::{impl#0}::store_aligned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3153 ~ core[7d5a]::convert::identity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:252 ~ hashbrown[130f]::raw::{impl#13}::prepare_rehash_in_place).79), kind: MethodCall(PathSegment { ident: buckets#0, hir_id: HirId(DefId(0:252 ~ hashbrown[130f]::raw::{impl#13}::prepare_rehash_in_place).80), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:252 ~ hashbrown[130f]::raw::{impl#13}::prepare_rehash_in_place).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2056:21: 2056:25 (#0), res: Local(HirId(DefId(0:252 ~ hashbrown[130f]::raw::{impl#13}::prepare_rehash_in_place).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:252 ~ hashbrown[130f]::raw::{impl#13}::prepare_rehash_in_place).82), res: Local(HirId(DefId(0:252 ~ hashbrown[130f]::raw::{impl#13}::prepare_rehash_in_place).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2056:21: 2056:25 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2056:26: 2056:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2056:21: 2056:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:252 ~ hashbrown[130f]::raw::{impl#13}::prepare_rehash_in_place).83), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:252 ~ hashbrown[411b]::raw::{impl#13}::prepare_rehash_in_place).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2056:38: 2056:43 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:252 ~ hashbrown[411b]::raw::{impl#13}::prepare_rehash_in_place).84), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2056:38: 2056:43 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:252 ~ hashbrown[411b]::raw::{impl#13}::prepare_rehash_in_place).86), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2056:38: 2056:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[130f]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2700 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::copy_to)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[411b]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2700 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::copy_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[411b]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:253 ~ hashbrown[411b]::raw::{impl#13}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ hashbrown[411b]::raw::{impl#7}::from_base_index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:263 ~ hashbrown[130f]::raw::{impl#13}::data_end)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:333 ~ hashbrown[411b]::raw::{impl#20}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[411b]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:255 ~ hashbrown[130f]::raw::{impl#13}::drop_elements)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements).5), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:12: 2164:13 (#0), res: Def(TyParam, DefId(0:256 ~ hashbrown[130f]::raw::{impl#13}::drop_elements::T)), segments: [PathSegment { ident: T#0, hir_id: HirId(DefId(0:255 ~ hashbrown[130f]::raw::{impl#13}::drop_elements).6), res: Def(TyParam, DefId(0:256 ~ hashbrown[130f]::raw::{impl#13}::drop_elements::T)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:12: 2164:13 (#0) }, PathSegment { ident: NEEDS_DROP#0, hir_id: HirId(DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements).8), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:12: 2164:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements).9), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:40: 2164:42 (#0) }, Expr { hir_id: HirId(DefId(0:255 ~ hashbrown[130f]::raw::{impl#13}::drop_elements).10), kind: Field(Expr { hir_id: HirId(DefId(0:255 ~ hashbrown[130f]::raw::{impl#13}::drop_elements).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:29: 2164:33 (#0), res: Local(HirId(DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements).12), res: Local(HirId(DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:29: 2164:33 (#0) }, items#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:29: 2164:39 (#0) }, Expr { hir_id: HirId(DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements).13), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:43: 2164:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:43: 2164:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:29: 2164:44 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements).10), kind: Field(Expr { hir_id: HirId(DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:29: 2164:33 (#0), res: Local(HirId(DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements).12), res: Local(HirId(DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:29: 2164:33 (#0) }, items#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:29: 2164:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements).13), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:43: 2164:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2164:43: 2164:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:253 ~ hashbrown[411b]::raw::{impl#13}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ hashbrown[411b]::raw::{impl#7}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:257 ~ hashbrown[411b]::raw::{impl#13}::drop_inner_table)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:276 ~ hashbrown[411b]::raw::{impl#13}::is_empty_singleton)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:289 ~ hashbrown[411b]::raw::{impl#13}::free_buckets)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).23), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#94), res: Local(HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).16)), segments: [PathSegment { ident: left_val#94, hir_id: HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).25), res: Local(HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#94) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:20: 102:29 (#94) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).26), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#94), res: Local(HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).17)), segments: [PathSegment { ident: right_val#94, hir_id: HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).28), res: Local(HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#94) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:33: 102:43 (#94) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2295:23: 2295:28 (#0), res: Local(HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).4)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).73), res: Local(HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2295:23: 2295:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).74), kind: MethodCall(PathSegment { ident: buckets#0, hir_id: HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).75), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2295:31: 2295:35 (#0), res: Local(HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).77), res: Local(HirId(DefId(0:260 ~ hashbrown[411b]::raw::{impl#13}::bucket).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2295:31: 2295:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2295:36: 2295:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2295:31: 2295:45 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[411b]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ hashbrown[411b]::raw::{impl#7}::from_base_index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:263 ~ hashbrown[411b]::raw::{impl#13}::data_end)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).25), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#101), res: Local(HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).18)), segments: [PathSegment { ident: left_val#101, hir_id: HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).27), res: Local(HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#101) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:20: 102:29 (#101) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).28), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#101), res: Local(HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).19)), segments: [PathSegment { ident: right_val#101, hir_id: HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).30), res: Local(HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#101) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:33: 102:43 (#101) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2348:23: 2348:28 (#0), res: Local(HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).4)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).75), res: Local(HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2348:23: 2348:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).76), kind: MethodCall(PathSegment { ident: buckets#0, hir_id: HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).77), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2348:31: 2348:35 (#0), res: Local(HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).79), res: Local(HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2348:31: 2348:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2348:36: 2348:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2348:31: 2348:45 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[411b]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:263 ~ hashbrown[411b]::raw::{impl#13}::data_end)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2691 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).110), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2350:25: 2350:26 (#0) }, Expr { hir_id: HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2350:19: 2350:24 (#0), res: Local(HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).4)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).112), res: Local(HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2350:19: 2350:24 (#0) }, Expr { hir_id: HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).113), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2350:27: 2350:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2350:27: 2350:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2350:18: 2350:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).114), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2350:32: 2350:39 (#0), res: Local(HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).6)), segments: [PathSegment { ident: size_of#0, hir_id: HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).115), res: Local(HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2350:32: 2350:39 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2350:19: 2350:24 (#0), res: Local(HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).4)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:262 ~ hashbrown[411b]::raw::{impl#13}::bucket_ptr).112), res: Local(HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2350:19: 2350:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr).113), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2350:27: 2350:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2350:27: 2350:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:263 ~ hashbrown[411b]::raw::{impl#13}::data_end)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2401 ~ core[7d5a]::ptr::non_null::{impl#3}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:265 ~ hashbrown[411b]::raw::{impl#13}::probe_seq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:265 ~ hashbrown[411b]::raw::{impl#13}::probe_seq).9), kind: Call(Expr { hir_id: HirId(DefId(0:265 ~ hashbrown[411b]::raw::{impl#13}::probe_seq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2403:18: 2403:20 (#0), res: Def(Fn, DefId(0:97 ~ hashbrown[411b]::raw::h1)), segments: [PathSegment { ident: h1#0, hir_id: HirId(DefId(0:265 ~ hashbrown[411b]::raw::{impl#13}::probe_seq).11), res: Def(Fn, DefId(0:97 ~ hashbrown[130f]::raw::h1)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2403:18: 2403:20 (#0) }, [Expr { hir_id: HirId(DefId(0:265 ~ hashbrown[130f]::raw::{impl#13}::probe_seq).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2403:21: 2403:25 (#0), res: Local(HirId(DefId(0:265 ~ hashbrown[130f]::raw::{impl#13}::probe_seq).4)), segments: [PathSegment { ident: hash#0, hir_id: HirId(DefId(0:265 ~ hashbrown[130f]::raw::{impl#13}::probe_seq).13), res: Local(HirId(DefId(0:265 ~ hashbrown[130f]::raw::{impl#13}::probe_seq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2403:21: 2403:25 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2403:18: 2403:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:265 ~ hashbrown[411b]::raw::{impl#13}::probe_seq).14), kind: Field(Expr { hir_id: HirId(DefId(0:265 ~ hashbrown[411b]::raw::{impl#13}::probe_seq).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2403:29: 2403:33 (#0), res: Local(HirId(DefId(0:265 ~ hashbrown[411b]::raw::{impl#13}::probe_seq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:265 ~ hashbrown[411b]::raw::{impl#13}::probe_seq).16), res: Local(HirId(DefId(0:265 ~ hashbrown[411b]::raw::{impl#13}::probe_seq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2403:29: 2403:33 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2403:29: 2403:45 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ hashbrown[411b]::raw::h1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:266 ~ hashbrown[130f]::raw::{impl#13}::record_item_insert_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ hashbrown[130f]::raw::{impl#2}::special_is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:269 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:265 ~ hashbrown[130f]::raw::{impl#13}::probe_seq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).24), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:59: 2419:60 (#0) }, Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).25), kind: MethodCall(PathSegment { ident: wrapping_sub#0, hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).26), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:27: 2419:30 (#0), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).28), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:27: 2419:30 (#0) }, [Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:44: 2419:57 (#0), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).18)), segments: [PathSegment { ident: probe_seq_pos#0, hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).30), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:44: 2419:57 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:31: 2419:58 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:27: 2419:58 (#0) }, Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).31), kind: Field(Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:61: 2419:65 (#0), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).33), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:61: 2419:65 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:61: 2419:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:26: 2419:78 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).34), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:81: 2419:86 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:267 ~ hashbrown[411b]::raw::{impl#13}::is_in_same_group).35), res: Def(Struct, DefId(0:2324 ~ hashbrown[130f]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:81: 2419:86 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:267 ~ hashbrown[411b]::raw::{impl#13}::is_in_same_group).37), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:81: 2419:93 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[411b]::raw::{impl#13}::is_in_same_group).25), kind: MethodCall(PathSegment { ident: wrapping_sub#0, hir_id: HirId(DefId(0:267 ~ hashbrown[411b]::raw::{impl#13}::is_in_same_group).26), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:27: 2419:30 (#0), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).28), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:27: 2419:30 (#0) }, [Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:44: 2419:57 (#0), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).18)), segments: [PathSegment { ident: probe_seq_pos#0, hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).30), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:44: 2419:57 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:31: 2419:58 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:27: 2419:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).31), kind: Field(Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:61: 2419:65 (#0), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).33), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:61: 2419:65 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2419:61: 2419:77 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:25436 ~ core[7d5a]::num::{impl#11}::wrapping_sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).43), kind: Call(Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:9: 2420:20 (#0), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).41)), segments: [PathSegment { ident: probe_index#0, hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).45), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).41)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:9: 2420:20 (#0) }, [Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:21: 2420:22 (#0), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).4)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).47), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:21: 2420:22 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:9: 2420:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).48), kind: Call(Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:27: 2420:38 (#0), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).41)), segments: [PathSegment { ident: probe_index#0, hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).50), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).41)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:27: 2420:38 (#0) }, [Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:39: 2420:44 (#0), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).6)), segments: [PathSegment { ident: new_i#0, hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).52), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:39: 2420:44 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:27: 2420:45 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:9: 2420:20 (#0), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).41)), segments: [PathSegment { ident: probe_index#0, hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).45), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).41)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:9: 2420:20 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:27: 2420:38 (#0), res: Local(HirId(DefId(0:267 ~ hashbrown[411b]::raw::{impl#13}::is_in_same_group).41)), segments: [PathSegment { ident: probe_index#0, hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).50), res: Local(HirId(DefId(0:267 ~ hashbrown[411b]::raw::{impl#13}::is_in_same_group).41)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:27: 2420:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:269 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ hashbrown[130f]::raw::{impl#2}::full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:270 ~ hashbrown[130f]::raw::{impl#13}::replace_ctrl_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:269 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).9), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:58: 2542:59 (#0) }, Expr { hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).10), kind: MethodCall(PathSegment { ident: wrapping_sub#0, hir_id: HirId(DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl).11), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:24: 2542:29 (#0), res: Local(HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).4)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).13), res: Local(HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:24: 2542:29 (#0) }, [Expr { hir_id: HirId(DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl).14), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:43: 2542:48 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[130f]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).15), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:43: 2542:48 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl).17), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:43: 2542:55 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:30: 2542:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:23: 2542:57 (#0) }, Expr { hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).18), kind: Field(Expr { hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:60: 2542:64 (#0), res: Local(HirId(DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl).20), res: Local(HirId(DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:60: 2542:64 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:60: 2542:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:22: 2542:77 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).21), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:80: 2542:85 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).22), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:80: 2542:85 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl).24), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:80: 2542:92 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).10), kind: MethodCall(PathSegment { ident: wrapping_sub#0, hir_id: HirId(DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl).11), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:24: 2542:29 (#0), res: Local(HirId(DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl).4)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).13), res: Local(HirId(DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:24: 2542:29 (#0) }, [Expr { hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).14), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:43: 2542:48 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[130f]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).15), res: Def(Struct, DefId(0:2324 ~ hashbrown[130f]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:43: 2542:48 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl).17), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:43: 2542:55 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:30: 2542:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:23: 2542:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl).18), kind: Field(Expr { hir_id: HirId(DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:60: 2542:64 (#0), res: Local(HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).20), res: Local(HirId(DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:60: 2542:64 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2542:60: 2542:76 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:25436 ~ core[7d5a]::num::{impl#11}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2574:23: 2574:28 (#0), res: Local(HirId(DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl).4)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl).12), res: Local(HirId(DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2574:23: 2574:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl).13), kind: MethodCall(PathSegment { ident: num_ctrl_bytes#0, hir_id: HirId(DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2574:31: 2574:35 (#0), res: Local(HirId(DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl).16), res: Local(HirId(DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2574:31: 2574:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2574:36: 2574:52 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2574:31: 2574:52 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2689 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[130f]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:273 ~ hashbrown[130f]::raw::{impl#13}::buckets).4), kind: Field(Expr { hir_id: HirId(DefId(0:273 ~ hashbrown[130f]::raw::{impl#13}::buckets).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2581:9: 2581:13 (#0), res: Local(HirId(DefId(0:273 ~ hashbrown[130f]::raw::{impl#13}::buckets).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:273 ~ hashbrown[130f]::raw::{impl#13}::buckets).6), res: Local(HirId(DefId(0:273 ~ hashbrown[130f]::raw::{impl#13}::buckets).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2581:9: 2581:13 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2581:9: 2581:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:273 ~ hashbrown[130f]::raw::{impl#13}::buckets).7), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2581:28: 2581:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2581:28: 2581:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:274 ~ hashbrown[130f]::raw::{impl#13}::is_bucket_full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:274 ~ hashbrown[130f]::raw::{impl#13}::is_bucket_full).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2591:23: 2591:28 (#0), res: Local(HirId(DefId(0:274 ~ hashbrown[130f]::raw::{impl#13}::is_bucket_full).4)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:274 ~ hashbrown[130f]::raw::{impl#13}::is_bucket_full).12), res: Local(HirId(DefId(0:274 ~ hashbrown[130f]::raw::{impl#13}::is_bucket_full).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2591:23: 2591:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:274 ~ hashbrown[130f]::raw::{impl#13}::is_bucket_full).13), kind: MethodCall(PathSegment { ident: buckets#0, hir_id: HirId(DefId(0:274 ~ hashbrown[130f]::raw::{impl#13}::is_bucket_full).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:274 ~ hashbrown[130f]::raw::{impl#13}::is_bucket_full).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2591:31: 2591:35 (#0), res: Local(HirId(DefId(0:274 ~ hashbrown[130f]::raw::{impl#13}::is_bucket_full).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:274 ~ hashbrown[130f]::raw::{impl#13}::is_bucket_full).16), res: Local(HirId(DefId(0:274 ~ hashbrown[130f]::raw::{impl#13}::is_bucket_full).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2591:31: 2591:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2591:36: 2591:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2591:31: 2591:45 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[130f]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ hashbrown[130f]::raw::{impl#2}::is_full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:275 ~ hashbrown[411b]::raw::{impl#13}::num_ctrl_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes).4), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:26: 2597:27 (#0) }, Expr { hir_id: HirId(DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes).5), kind: Field(Expr { hir_id: HirId(DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:9: 2597:13 (#0), res: Local(HirId(DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes).7), res: Local(HirId(DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:9: 2597:13 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:9: 2597:25 (#0) }, Expr { hir_id: HirId(DefId(0:275 ~ hashbrown[411b]::raw::{impl#13}::num_ctrl_bytes).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:28: 2597:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:28: 2597:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:9: 2597:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:275 ~ hashbrown[411b]::raw::{impl#13}::num_ctrl_bytes).9), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:275 ~ hashbrown[411b]::raw::{impl#13}::num_ctrl_bytes).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:32: 2597:37 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[130f]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes).10), res: Def(Struct, DefId(0:2324 ~ hashbrown[130f]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:32: 2597:37 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes).12), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:32: 2597:44 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes).5), kind: Field(Expr { hir_id: HirId(DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:9: 2597:13 (#0), res: Local(HirId(DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes).7), res: Local(HirId(DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:9: 2597:13 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:9: 2597:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:275 ~ hashbrown[130f]::raw::{impl#13}::num_ctrl_bytes).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:28: 2597:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2597:28: 2597:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:276 ~ hashbrown[130f]::raw::{impl#13}::is_empty_singleton)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:276 ~ hashbrown[130f]::raw::{impl#13}::is_empty_singleton).4), kind: Field(Expr { hir_id: HirId(DefId(0:276 ~ hashbrown[130f]::raw::{impl#13}::is_empty_singleton).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2602:9: 2602:13 (#0), res: Local(HirId(DefId(0:276 ~ hashbrown[130f]::raw::{impl#13}::is_empty_singleton).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:276 ~ hashbrown[130f]::raw::{impl#13}::is_empty_singleton).6), res: Local(HirId(DefId(0:276 ~ hashbrown[130f]::raw::{impl#13}::is_empty_singleton).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2602:9: 2602:13 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2602:9: 2602:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:276 ~ hashbrown[130f]::raw::{impl#13}::is_empty_singleton).7), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2602:29: 2602:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2602:29: 2602:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:277 ~ hashbrown[130f]::raw::{impl#13}::prepare_resize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:277 ~ hashbrown[130f]::raw::{impl#13}::prepare_resize).17), kind: Field(Expr { hir_id: HirId(DefId(0:277 ~ hashbrown[130f]::raw::{impl#13}::prepare_resize).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2639:23: 2639:27 (#0), res: Local(HirId(DefId(0:277 ~ hashbrown[130f]::raw::{impl#13}::prepare_resize).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:277 ~ hashbrown[130f]::raw::{impl#13}::prepare_resize).19), res: Local(HirId(DefId(0:277 ~ hashbrown[130f]::raw::{impl#13}::prepare_resize).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2639:23: 2639:27 (#0) }, items#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2639:23: 2639:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:277 ~ hashbrown[130f]::raw::{impl#13}::prepare_resize).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2639:37: 2639:45 (#0), res: Local(HirId(DefId(0:277 ~ hashbrown[130f]::raw::{impl#13}::prepare_resize).8)), segments: [PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:277 ~ hashbrown[130f]::raw::{impl#13}::prepare_resize).21), res: Local(HirId(DefId(0:277 ~ hashbrown[130f]::raw::{impl#13}::prepare_resize).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2639:37: 2639:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:241 ~ hashbrown[411b]::raw::{impl#13}::fallible_with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1359 ~ hashbrown[411b]::scopeguard::guard)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:276 ~ hashbrown[130f]::raw::{impl#13}::is_empty_singleton)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:289 ~ hashbrown[411b]::raw::{impl#13}::free_buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:82 ~ hashbrown[411b]::raw::{impl#0}::capacity_overflow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2704:12: 2704:21 (#0), res: Local(HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).42)), segments: [PathSegment { ident: new_items#0, hir_id: HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).55), res: Local(HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).42)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2704:12: 2704:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).56), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2704:39: 2704:40 (#0) }, Expr { hir_id: HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2704:25: 2704:38 (#0), res: Local(HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).51)), segments: [PathSegment { ident: full_capacity#0, hir_id: HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).58), res: Local(HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).51)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2704:25: 2704:38 (#0) }, Expr { hir_id: HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).59), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2704:41: 2704:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2704:41: 2704:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2704:25: 2704:42 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2704:25: 2704:38 (#0), res: Local(HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).51)), segments: [PathSegment { ident: full_capacity#0, hir_id: HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).58), res: Local(HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).51)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2704:25: 2704:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).59), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2704:41: 2704:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2704:41: 2704:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:285 ~ hashbrown[411b]::raw::{impl#13}::resize_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3002 ~ core[7d5a]::cmp::Ord::max)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2731:39: 2731:52 (#0), res: Local(HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).51)), segments: [PathSegment { ident: full_capacity#0, hir_id: HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).95), res: Local(HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).51)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2731:39: 2731:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:282 ~ hashbrown[411b]::raw::{impl#13}::reserve_rehash_inner).96), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2731:55: 2731:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2731:55: 2731:56 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:284 ~ hashbrown[130f]::raw::{impl#13}::full_buckets_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2388 ~ core[7d5a]::ptr::non_null::{impl#3}::new_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2321 ~ hashbrown[411b]::raw::neon::{impl#0}::match_full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:285 ~ hashbrown[411b]::raw::{impl#13}::resize_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:277 ~ hashbrown[411b]::raw::{impl#13}::prepare_resize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:284 ~ hashbrown[411b]::raw::{impl#13}::full_buckets_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:285 ~ hashbrown[130f]::raw::{impl#13}::resize_inner).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2848:24: 2848:30 (#0), res: Local(HirId(DefId(0:285 ~ hashbrown[130f]::raw::{impl#13}::resize_inner).8)), segments: [PathSegment { ident: hasher#0, hir_id: HirId(DefId(0:285 ~ hashbrown[130f]::raw::{impl#13}::resize_inner).60), res: Local(HirId(DefId(0:285 ~ hashbrown[130f]::raw::{impl#13}::resize_inner).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2848:24: 2848:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:249 ~ hashbrown[130f]::raw::{impl#13}::prepare_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2180 ~ core[7d5a]::mem::swap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:252 ~ hashbrown[130f]::raw::{impl#13}::prepare_rehash_in_place)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1359 ~ hashbrown[130f]::scopeguard::guard)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[130f]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[411b]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).48), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).49), kind: MethodCall(PathSegment { ident: ctrl#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).50), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2940:25: 2940:30 (#0), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).22)), segments: [PathSegment { ident: self_#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).52), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2940:25: 2940:30 (#0) }, [Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2940:36: 2940:37 (#0), res: Local(HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).39)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).54), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2940:36: 2940:37 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2940:31: 2940:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2940:25: 2940:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2940:24: 2940:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).55), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2940:42: 2940:45 (#0), res: Def(Struct, DefId(0:2355 ~ hashbrown[411b]::raw::Tag)), segments: [PathSegment { ident: Tag#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).56), res: Def(Struct, DefId(0:2355 ~ hashbrown[411b]::raw::Tag)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2940:42: 2940:45 (#0) }, PathSegment { ident: DELETED#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).58), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2940:42: 2940:54 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2942:25: 2942:29 (#0), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).27)), segments: [PathSegment { ident: drop#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).73), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2942:25: 2942:29 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).116), kind: Call(Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2947:33: 2947:56 (#0), res: Def(Fn, DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity)), segments: [PathSegment { ident: bucket_mask_to_capacity#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).118), res: Def(Fn, DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2947:33: 2947:56 (#0) }, [Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).119), kind: Field(Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2947:57: 2947:62 (#0), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).22)), segments: [PathSegment { ident: self_#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).121), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2947:57: 2947:62 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2947:57: 2947:74 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2947:33: 2947:75 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).122), kind: Field(Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).123), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2947:78: 2947:83 (#0), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).22)), segments: [PathSegment { ident: self_#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).124), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2947:78: 2947:83 (#0) }, items#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2947:78: 2947:89 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[411b]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[411b]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).147), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).148), kind: MethodCall(PathSegment { ident: ctrl#0, hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).149), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2954:17: 2954:22 (#0), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).129)), segments: [PathSegment { ident: guard#0, hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).151), res: Local(HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).129)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2954:17: 2954:22 (#0) }, [Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).152), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2954:28: 2954:29 (#0), res: Local(HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).138)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).153), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).138)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2954:28: 2954:29 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2954:23: 2954:30 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2954:17: 2954:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2954:16: 2954:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).154), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2954:34: 2954:37 (#0), res: Def(Struct, DefId(0:2355 ~ hashbrown[130f]::raw::Tag)), segments: [PathSegment { ident: Tag#0, hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).155), res: Def(Struct, DefId(0:2355 ~ hashbrown[130f]::raw::Tag)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2954:34: 2954:37 (#0) }, PathSegment { ident: DELETED#0, hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).157), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2954:34: 2954:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[130f]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).178), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2962:28: 2962:34 (#0), res: Local(HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).4)), segments: [PathSegment { ident: hasher#0, hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).179), res: Local(HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2962:28: 2962:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:250 ~ hashbrown[130f]::raw::{impl#13}::find_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3153 ~ core[7d5a]::convert::identity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:269 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:262 ~ hashbrown[130f]::raw::{impl#13}::bucket_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:270 ~ hashbrown[411b]::raw::{impl#13}::replace_ctrl_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2985:20: 2985:29 (#0), res: Local(HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).247)), segments: [PathSegment { ident: prev_ctrl#0, hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).251), res: Local(HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).247)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2985:20: 2985:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).252), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).254), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2985:33: 2985:36 (#0), res: Def(Struct, DefId(0:2355 ~ hashbrown[411b]::raw::Tag)), segments: [PathSegment { ident: Tag#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).253), res: Def(Struct, DefId(0:2355 ~ hashbrown[411b]::raw::Tag)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2985:33: 2985:36 (#0) }, PathSegment { ident: EMPTY#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).255), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2985:33: 2985:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:271 ~ hashbrown[130f]::raw::{impl#13}::set_ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).305), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).306), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#120), res: Local(HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).297)), segments: [PathSegment { ident: left_val#120, hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).307), res: Local(HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).297)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#120) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#120) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).308), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).309), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#120), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).298)), segments: [PathSegment { ident: right_val#120, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).310), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).298)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#120) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#120) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2778 ~ core[7d5a]::ptr::swap_nonoverlapping)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).386), kind: Call(Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).387), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3003:29: 3003:52 (#0), res: Def(Fn, DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity)), segments: [PathSegment { ident: bucket_mask_to_capacity#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).388), res: Def(Fn, DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3003:29: 3003:52 (#0) }, [Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).389), kind: Field(Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).390), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3003:53: 3003:58 (#0), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).129)), segments: [PathSegment { ident: guard#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).391), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).129)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3003:53: 3003:58 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3003:53: 3003:70 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3003:29: 3003:71 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).392), kind: Field(Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).393), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3003:74: 3003:79 (#0), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).129)), segments: [PathSegment { ident: guard#0, hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).394), res: Local(HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).129)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3003:74: 3003:79 (#0) }, items#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3003:74: 3003:85 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2154 ~ core[7d5a]::mem::forget)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:289 ~ hashbrown[411b]::raw::{impl#13}::free_buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:291 ~ hashbrown[130f]::raw::{impl#13}::allocation_info)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:38 ~ hashbrown[130f]::raw::alloc::inner::Allocator::deallocate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:291 ~ hashbrown[130f]::raw::{impl#13}::allocation_info)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:276 ~ hashbrown[130f]::raw::{impl#13}::is_empty_singleton)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:105 ~ hashbrown[130f]::raw::{impl#4}::calculate_layout_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[130f]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:1283 ~ core[7d5a]::hint::unreachable_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2388 ~ core[7d5a]::ptr::non_null::{impl#3}::new_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2691 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:292 ~ hashbrown[130f]::raw::{impl#13}::allocation_size_or_zero)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:276 ~ hashbrown[130f]::raw::{impl#13}::is_empty_singleton)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:15001 ~ core[7d5a]::alloc::layout::{impl#0}::size)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:291 ~ hashbrown[130f]::raw::{impl#13}::allocation_info)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:293 ~ hashbrown[411b]::raw::{impl#13}::clear_no_drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:276 ~ hashbrown[411b]::raw::{impl#13}::is_empty_singleton)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2706 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::write_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:275 ~ hashbrown[411b]::raw::{impl#13}::num_ctrl_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:101 ~ hashbrown[411b]::raw::bucket_mask_to_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:294 ~ hashbrown[411b]::raw::{impl#13}::erase)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:274 ~ hashbrown[130f]::raw::{impl#13}::is_bucket_full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).31), kind: MethodCall(PathSegment { ident: wrapping_sub#0, hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).32), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3162:28: 3162:33 (#0), res: Local(HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).4)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).34), res: Local(HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3162:28: 3162:33 (#0) }, [Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).35), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3162:47: 3162:52 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[130f]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:294 ~ hashbrown[411b]::raw::{impl#13}::erase).36), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3162:47: 3162:52 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:294 ~ hashbrown[411b]::raw::{impl#13}::erase).38), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3162:47: 3162:59 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3162:34: 3162:60 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3162:28: 3162:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[411b]::raw::{impl#13}::erase).39), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[411b]::raw::{impl#13}::erase).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3162:63: 3162:67 (#0), res: Local(HirId(DefId(0:294 ~ hashbrown[411b]::raw::{impl#13}::erase).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ hashbrown[411b]::raw::{impl#13}::erase).41), res: Local(HirId(DefId(0:294 ~ hashbrown[411b]::raw::{impl#13}::erase).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3162:63: 3162:67 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3162:63: 3162:79 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:25436 ~ core[7d5a]::num::{impl#11}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2319 ~ hashbrown[411b]::raw::neon::{impl#0}::match_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2315 ~ hashbrown[411b]::raw::neon::{impl#0}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2319 ~ hashbrown[130f]::raw::neon::{impl#0}::match_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2315 ~ hashbrown[130f]::raw::neon::{impl#0}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[411b]::raw::{impl#13}::erase).79), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:52: 3205:53 (#0) }, Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).80), kind: MethodCall(PathSegment { ident: leading_zeros#0, hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).81), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:23: 3205:35 (#0), res: Local(HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).59)), segments: [PathSegment { ident: empty_before#0, hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).83), res: Local(HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:23: 3205:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:36: 3205:51 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:23: 3205:51 (#0) }, Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).84), kind: MethodCall(PathSegment { ident: trailing_zeros#0, hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).85), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:54: 3205:65 (#0), res: Local(HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).75)), segments: [PathSegment { ident: empty_after#0, hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).87), res: Local(HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).75)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:54: 3205:65 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:66: 3205:82 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:54: 3205:82 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:23: 3205:82 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).88), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:86: 3205:91 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[130f]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).89), res: Def(Struct, DefId(0:2324 ~ hashbrown[130f]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:86: 3205:91 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).91), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:86: 3205:98 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).80), kind: MethodCall(PathSegment { ident: leading_zeros#0, hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).81), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:23: 3205:35 (#0), res: Local(HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).59)), segments: [PathSegment { ident: empty_before#0, hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).83), res: Local(HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:23: 3205:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:36: 3205:51 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:23: 3205:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).84), kind: MethodCall(PathSegment { ident: trailing_zeros#0, hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).85), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:54: 3205:65 (#0), res: Local(HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).75)), segments: [PathSegment { ident: empty_after#0, hir_id: HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).87), res: Local(HirId(DefId(0:294 ~ hashbrown[130f]::raw::{impl#13}::erase).75)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:54: 3205:65 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:66: 3205:82 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3205:54: 3205:82 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:64 ~ hashbrown[130f]::raw::bitmask::{impl#0}::leading_zeros)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:62 ~ hashbrown[130f]::raw::bitmask::{impl#0}::trailing_zeros)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:271 ~ hashbrown[411b]::raw::{impl#13}::set_ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:248 ~ hashbrown[130f]::raw::{impl#13}::find_or_find_insert_slot_inner).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1777:27: 1777:29 (#0), res: Local(HirId(DefId(0:248 ~ hashbrown[130f]::raw::{impl#13}::find_or_find_insert_slot_inner).6)), segments: [PathSegment { ident: eq#0, hir_id: HirId(DefId(0:248 ~ hashbrown[130f]::raw::{impl#13}::find_or_find_insert_slot_inner).81), res: Local(HirId(DefId(0:248 ~ hashbrown[130f]::raw::{impl#13}::find_or_find_insert_slot_inner).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1777:27: 1777:29 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:251 ~ hashbrown[411b]::raw::{impl#13}::find_inner).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1986:27: 1986:29 (#0), res: Local(HirId(DefId(0:251 ~ hashbrown[130f]::raw::{impl#13}::find_inner).6)), segments: [PathSegment { ident: eq#0, hir_id: HirId(DefId(0:251 ~ hashbrown[130f]::raw::{impl#13}::find_inner).76), res: Local(HirId(DefId(0:251 ~ hashbrown[130f]::raw::{impl#13}::find_inner).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:1986:27: 1986:29 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:9: 2420:20 (#0), res: Local(HirId(DefId(0:267 ~ hashbrown[411b]::raw::{impl#13}::is_in_same_group).41)), segments: [PathSegment { ident: probe_index#0, hir_id: HirId(DefId(0:267 ~ hashbrown[411b]::raw::{impl#13}::is_in_same_group).45), res: Local(HirId(DefId(0:267 ~ hashbrown[411b]::raw::{impl#13}::is_in_same_group).41)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:9: 2420:20 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:267 ~ hashbrown[411b]::raw::{impl#13}::is_in_same_group).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:27: 2420:38 (#0), res: Local(HirId(DefId(0:267 ~ hashbrown[411b]::raw::{impl#13}::is_in_same_group).41)), segments: [PathSegment { ident: probe_index#0, hir_id: HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).50), res: Local(HirId(DefId(0:267 ~ hashbrown[130f]::raw::{impl#13}::is_in_same_group).41)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2420:27: 2420:38 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:285 ~ hashbrown[411b]::raw::{impl#13}::resize_inner).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2848:24: 2848:30 (#0), res: Local(HirId(DefId(0:285 ~ hashbrown[411b]::raw::{impl#13}::resize_inner).8)), segments: [PathSegment { ident: hasher#0, hir_id: HirId(DefId(0:285 ~ hashbrown[411b]::raw::{impl#13}::resize_inner).60), res: Local(HirId(DefId(0:285 ~ hashbrown[411b]::raw::{impl#13}::resize_inner).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2848:24: 2848:30 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[411b]::raw::{impl#13}::rehash_in_place).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2942:25: 2942:29 (#0), res: Local(HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).27)), segments: [PathSegment { ident: drop#0, hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).73), res: Local(HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2942:25: 2942:29 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).178), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2962:28: 2962:34 (#0), res: Local(HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).4)), segments: [PathSegment { ident: hasher#0, hir_id: HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).179), res: Local(HirId(DefId(0:287 ~ hashbrown[130f]::raw::{impl#13}::rehash_in_place).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:2962:28: 2962:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:298 ~ hashbrown[411b]::raw::{impl#14}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:276 ~ hashbrown[130f]::raw::{impl#13}::is_empty_singleton)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:149 ~ hashbrown[411b]::raw::{impl#9}::new_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:150 ~ hashbrown[411b]::raw::{impl#9}::new_uninitialized)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:273 ~ hashbrown[411b]::raw::{impl#13}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1283 ~ core[7d5a]::hint::unreachable_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:302 ~ hashbrown[411b]::raw::RawTableClone::clone_from_spec)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:299 ~ hashbrown[130f]::raw::{impl#14}::clone_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:276 ~ hashbrown[411b]::raw::{impl#13}::is_empty_singleton)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:257 ~ hashbrown[411b]::raw::{impl#13}::drop_inner_table)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1359 ~ hashbrown[411b]::scopeguard::guard)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:162 ~ hashbrown[411b]::raw::{impl#9}::clear_no_drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:255 ~ hashbrown[411b]::raw::{impl#13}::drop_elements)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:299 ~ hashbrown[411b]::raw::{impl#14}::clone_from).78), kind: MethodCall(PathSegment { ident: buckets#0, hir_id: HirId(DefId(0:299 ~ hashbrown[411b]::raw::{impl#14}::clone_from).79), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:299 ~ hashbrown[411b]::raw::{impl#14}::clone_from).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3284:20: 3284:25 (#0), res: Local(HirId(DefId(0:299 ~ hashbrown[411b]::raw::{impl#14}::clone_from).67)), segments: [PathSegment { ident: self_#0, hir_id: HirId(DefId(0:299 ~ hashbrown[411b]::raw::{impl#14}::clone_from).81), res: Local(HirId(DefId(0:299 ~ hashbrown[411b]::raw::{impl#14}::clone_from).67)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3284:20: 3284:25 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3284:26: 3284:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3284:20: 3284:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:299 ~ hashbrown[411b]::raw::{impl#14}::clone_from).82), kind: MethodCall(PathSegment { ident: buckets#0, hir_id: HirId(DefId(0:299 ~ hashbrown[411b]::raw::{impl#14}::clone_from).83), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:299 ~ hashbrown[411b]::raw::{impl#14}::clone_from).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3284:39: 3284:45 (#0), res: Local(HirId(DefId(0:299 ~ hashbrown[411b]::raw::{impl#14}::clone_from).4)), segments: [PathSegment { ident: source#0, hir_id: HirId(DefId(0:299 ~ hashbrown[411b]::raw::{impl#14}::clone_from).85), res: Local(HirId(DefId(0:299 ~ hashbrown[411b]::raw::{impl#14}::clone_from).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3284:39: 3284:45 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3284:46: 3284:55 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3284:39: 3284:55 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:221 ~ hashbrown[411b]::raw::{impl#9}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:221 ~ hashbrown[411b]::raw::{impl#9}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:239 ~ hashbrown[411b]::raw::{impl#13}::new_uninitialized)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:221 ~ hashbrown[411b]::raw::{impl#9}::buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1283 ~ core[7d5a]::hint::unreachable_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:276 ~ hashbrown[411b]::raw::{impl#13}::is_empty_singleton)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:289 ~ hashbrown[130f]::raw::{impl#13}::free_buckets)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:302 ~ hashbrown[411b]::raw::RawTableClone::clone_from_spec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1365 ~ hashbrown[411b]::scopeguard::{impl#0}::into_inner)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2379 ~ hashbrown[411b]::raw::{impl#15}::clone_from_spec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:309 ~ hashbrown[411b]::raw::{impl#16}::clone_from_impl)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:309 ~ hashbrown[411b]::raw::{impl#16}::clone_from_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2701 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::copy_to_nonoverlapping)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:275 ~ hashbrown[411b]::raw::{impl#13}::num_ctrl_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1359 ~ hashbrown[411b]::scopeguard::guard)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:222 ~ hashbrown[411b]::raw::{impl#9}::is_bucket_full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ hashbrown[130f]::raw::{impl#7}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:156 ~ hashbrown[130f]::raw::{impl#9}::bucket)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ hashbrown[130f]::raw::{impl#9}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:155 ~ hashbrown[130f]::raw::{impl#9}::bucket_index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:156 ~ hashbrown[411b]::raw::{impl#9}::bucket)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ hashbrown[411b]::raw::{impl#7}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ hashbrown[411b]::raw::{impl#7}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:309 ~ hashbrown[411b]::raw::{impl#16}::clone_from_impl).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3380:23: 3380:28 (#0), res: Local(HirId(DefId(0:309 ~ hashbrown[411b]::raw::{impl#16}::clone_from_impl).123)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:309 ~ hashbrown[411b]::raw::{impl#16}::clone_from_impl).151), res: Local(HirId(DefId(0:309 ~ hashbrown[411b]::raw::{impl#16}::clone_from_impl).123)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3380:23: 3380:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:309 ~ hashbrown[411b]::raw::{impl#16}::clone_from_impl).152), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3380:31: 3380:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3380:31: 3380:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2154 ~ core[7d5a]::mem::forget)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:314 ~ hashbrown[130f]::raw::{impl#17}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:149 ~ hashbrown[130f]::raw::{impl#9}::new_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:318 ~ hashbrown[130f]::raw::{impl#18}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:257 ~ hashbrown[411b]::raw::{impl#13}::drop_inner_table)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:324 ~ hashbrown[130f]::raw::{impl#19}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ hashbrown[130f]::raw::{impl#9}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:227 ~ hashbrown[130f]::raw::{impl#9}::into_iter_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:333 ~ hashbrown[411b]::raw::{impl#20}::new).24), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:333 ~ hashbrown[411b]::raw::{impl#20}::new).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#133), res: Local(HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).17)), segments: [PathSegment { ident: left_val#133, hir_id: HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).26), res: Local(HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#133) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:20: 102:29 (#133) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).27), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#133), res: Local(HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).18)), segments: [PathSegment { ident: right_val#133, hir_id: HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).29), res: Local(HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#133) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:33: 102:43 (#133) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).74), kind: Cast(Expr { hir_id: HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3494:26: 3494:30 (#0), res: Local(HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).2)), segments: [PathSegment { ident: ctrl#0, hir_id: HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).76), res: Local(HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3494:26: 3494:30 (#0) }, Ty { hir_id: HirId(DefId(0:333 ~ hashbrown[411b]::raw::{impl#20}::new).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3494:34: 3494:39 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).78), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3494:34: 3494:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3494:26: 3494:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).79), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:333 ~ hashbrown[411b]::raw::{impl#20}::new).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3494:42: 3494:47 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:333 ~ hashbrown[411b]::raw::{impl#20}::new).80), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3494:42: 3494:47 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).82), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3494:42: 3494:54 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).93), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:333 ~ hashbrown[411b]::raw::{impl#20}::new).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#136), res: Local(HirId(DefId(0:333 ~ hashbrown[411b]::raw::{impl#20}::new).85)), segments: [PathSegment { ident: left_val#136, hir_id: HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).95), res: Local(HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).85)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#136) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#136) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:333 ~ hashbrown[411b]::raw::{impl#20}::new).96), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:333 ~ hashbrown[411b]::raw::{impl#20}::new).97), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#136), res: Local(HirId(DefId(0:333 ~ hashbrown[411b]::raw::{impl#20}::new).86)), segments: [PathSegment { ident: right_val#136, hir_id: HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).98), res: Local(HirId(DefId(0:333 ~ hashbrown[130f]::raw::{impl#20}::new).86)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#136) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#136) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2591 ~ core[7d5a]::ptr::const_ptr::{impl#0}::add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2321 ~ hashbrown[130f]::raw::neon::{impl#0}::match_full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2316 ~ hashbrown[130f]::raw::neon::{impl#0}::load_aligned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2560 ~ core[7d5a]::ptr::const_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2591 ~ core[7d5a]::ptr::const_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:122 ~ hashbrown[130f]::raw::{impl#7}::next_n)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:16: 3565:34 (#0), res: Def(ConstParam, DefId(0:335 ~ hashbrown[130f]::raw::{impl#20}::next_impl::DO_CHECK_PTR_RANGE)), segments: [PathSegment { ident: DO_CHECK_PTR_RANGE#0, hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).32), res: Def(ConstParam, DefId(0:335 ~ hashbrown[130f]::raw::{impl#20}::next_impl::DO_CHECK_PTR_RANGE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:16: 3565:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).33), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:53: 3565:55 (#0) }, Expr { hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).34), kind: Field(Expr { hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:38: 3565:42 (#0), res: Local(HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).36), res: Local(HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:38: 3565:42 (#0) }, next_ctrl#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:38: 3565:52 (#0) }, Expr { hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).37), kind: Field(Expr { hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:56: 3565:60 (#0), res: Local(HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).39), res: Local(HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:56: 3565:60 (#0) }, end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:56: 3565:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:38: 3565:64 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).34), kind: Field(Expr { hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:38: 3565:42 (#0), res: Local(HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).36), res: Local(HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:38: 3565:42 (#0) }, next_ctrl#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:38: 3565:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).37), kind: Field(Expr { hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:56: 3565:60 (#0), res: Local(HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).39), res: Local(HirId(DefId(0:334 ~ hashbrown[130f]::raw::{impl#20}::next_impl).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:56: 3565:60 (#0) }, end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3565:56: 3565:64 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2321 ~ hashbrown[411b]::raw::neon::{impl#0}::match_full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2560 ~ core[7d5a]::ptr::const_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:122 ~ hashbrown[411b]::raw::{impl#7}::next_n)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2591 ~ core[7d5a]::ptr::const_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3617:31: 3617:32 (#0), res: Local(HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).4)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).27), res: Local(HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3617:31: 3617:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).28), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3617:36: 3617:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3617:36: 3617:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:122 ~ hashbrown[130f]::raw::{impl#7}::next_n)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3619:23: 3619:24 (#0), res: Local(HirId(DefId(0:336 ~ hashbrown[130f]::raw::{impl#20}::fold_impl).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).57), res: Local(HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3619:23: 3619:24 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:336 ~ hashbrown[130f]::raw::{impl#20}::fold_impl).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3623:16: 3623:17 (#0), res: Local(HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).4)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).80), res: Local(HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3623:16: 3623:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).81), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3623:21: 3623:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3623:21: 3623:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2321 ~ hashbrown[411b]::raw::neon::{impl#0}::match_full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2560 ~ core[7d5a]::ptr::const_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:122 ~ hashbrown[130f]::raw::{impl#7}::next_n)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2591 ~ core[7d5a]::ptr::const_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:336 ~ hashbrown[130f]::raw::{impl#20}::fold_impl).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3619:23: 3619:24 (#0), res: Local(HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).57), res: Local(HirId(DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3619:23: 3619:24 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:345 ~ hashbrown[411b]::raw::{impl#23}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:349 ~ hashbrown[130f]::raw::{impl#24}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:334 ~ hashbrown[411b]::raw::{impl#20}::next_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).6), kind: Field(Expr { hir_id: HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3695:36: 3695:40 (#0), res: Local(HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).8), res: Local(HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3695:36: 3695:40 (#0) }, end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3695:36: 3695:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).9), kind: Field(Expr { hir_id: HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3695:47: 3695:51 (#0), res: Local(HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).11), res: Local(HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3695:47: 3695:51 (#0) }, next_ctrl#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3695:47: 3695:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ hashbrown[130f]::raw::offset_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).37), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3702:18: 3702:23 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[130f]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).38), res: Def(Struct, DefId(0:2324 ~ hashbrown[130f]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3702:18: 3702:23 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).40), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3702:18: 3702:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3702:33: 3702:50 (#0), res: Local(HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).30)), segments: [PathSegment { ident: remaining_buckets#0, hir_id: HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).42), res: Local(HirId(DefId(0:351 ~ hashbrown[130f]::raw::{impl#24}::size_hint).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3702:33: 3702:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ hashbrown[411b]::raw::{impl#26}::drop_elements)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:360 ~ hashbrown[411b]::raw::{impl#26}::drop_elements).5), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:360 ~ hashbrown[411b]::raw::{impl#26}::drop_elements).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:12: 3727:13 (#0), res: Def(TyParam, DefId(0:359 ~ hashbrown[411b]::raw::{impl#26}::T)), segments: [PathSegment { ident: T#0, hir_id: HirId(DefId(0:360 ~ hashbrown[411b]::raw::{impl#26}::drop_elements).6), res: Def(TyParam, DefId(0:359 ~ hashbrown[411b]::raw::{impl#26}::T)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:12: 3727:13 (#0) }, PathSegment { ident: NEEDS_DROP#0, hir_id: HirId(DefId(0:360 ~ hashbrown[411b]::raw::{impl#26}::drop_elements).8), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:12: 3727:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:360 ~ hashbrown[411b]::raw::{impl#26}::drop_elements).9), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:40: 3727:42 (#0) }, Expr { hir_id: HirId(DefId(0:360 ~ hashbrown[411b]::raw::{impl#26}::drop_elements).10), kind: Field(Expr { hir_id: HirId(DefId(0:360 ~ hashbrown[411b]::raw::{impl#26}::drop_elements).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:29: 3727:33 (#0), res: Local(HirId(DefId(0:360 ~ hashbrown[411b]::raw::{impl#26}::drop_elements).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:360 ~ hashbrown[411b]::raw::{impl#26}::drop_elements).12), res: Local(HirId(DefId(0:360 ~ hashbrown[411b]::raw::{impl#26}::drop_elements).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:29: 3727:33 (#0) }, items#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:29: 3727:39 (#0) }, Expr { hir_id: HirId(DefId(0:360 ~ hashbrown[130f]::raw::{impl#26}::drop_elements).13), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:43: 3727:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:43: 3727:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:29: 3727:44 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:360 ~ hashbrown[130f]::raw::{impl#26}::drop_elements).10), kind: Field(Expr { hir_id: HirId(DefId(0:360 ~ hashbrown[130f]::raw::{impl#26}::drop_elements).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:29: 3727:33 (#0), res: Local(HirId(DefId(0:360 ~ hashbrown[130f]::raw::{impl#26}::drop_elements).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:360 ~ hashbrown[130f]::raw::{impl#26}::drop_elements).12), res: Local(HirId(DefId(0:360 ~ hashbrown[130f]::raw::{impl#26}::drop_elements).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:29: 3727:33 (#0) }, items#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:29: 3727:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:360 ~ hashbrown[130f]::raw::{impl#26}::drop_elements).13), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:43: 3727:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3727:43: 3727:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ hashbrown[130f]::raw::{impl#7}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ hashbrown[130f]::raw::{impl#27}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ hashbrown[130f]::raw::{impl#28}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:253 ~ hashbrown[130f]::raw::{impl#13}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:370 ~ hashbrown[130f]::raw::{impl#29}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:370 ~ hashbrown[130f]::raw::{impl#29}::next).5), kind: Field(Expr { hir_id: HirId(DefId(0:370 ~ hashbrown[130f]::raw::{impl#29}::next).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3759:12: 3759:16 (#0), res: Local(HirId(DefId(0:370 ~ hashbrown[130f]::raw::{impl#29}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:370 ~ hashbrown[130f]::raw::{impl#29}::next).7), res: Local(HirId(DefId(0:370 ~ hashbrown[130f]::raw::{impl#29}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3759:12: 3759:16 (#0) }, items#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3759:12: 3759:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:370 ~ hashbrown[411b]::raw::{impl#29}::next).8), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3759:26: 3759:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3759:26: 3759:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:334 ~ hashbrown[411b]::raw::{impl#20}::next_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:372 ~ hashbrown[411b]::raw::{impl#29}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:373 ~ hashbrown[411b]::raw::{impl#29}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:336 ~ hashbrown[411b]::raw::{impl#20}::fold_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:386 ~ hashbrown[411b]::raw::{impl#32}::next_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:386 ~ hashbrown[130f]::raw::{impl#32}::next_impl).19), kind: Field(Expr { hir_id: HirId(DefId(0:386 ~ hashbrown[130f]::raw::{impl#32}::next_impl).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3841:29: 3841:33 (#0), res: Local(HirId(DefId(0:386 ~ hashbrown[130f]::raw::{impl#32}::next_impl).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:386 ~ hashbrown[130f]::raw::{impl#32}::next_impl).21), res: Local(HirId(DefId(0:386 ~ hashbrown[130f]::raw::{impl#32}::next_impl).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3841:29: 3841:33 (#0) }, group_first_index#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3841:29: 3841:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:386 ~ hashbrown[130f]::raw::{impl#32}::next_impl).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3841:54: 3841:59 (#0), res: Local(HirId(DefId(0:386 ~ hashbrown[411b]::raw::{impl#32}::next_impl).7)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:386 ~ hashbrown[411b]::raw::{impl#32}::next_impl).23), res: Local(HirId(DefId(0:386 ~ hashbrown[411b]::raw::{impl#32}::next_impl).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3841:54: 3841:59 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2388 ~ core[7d5a]::ptr::non_null::{impl#3}::new_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2689 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2321 ~ hashbrown[411b]::raw::neon::{impl#0}::match_full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2316 ~ hashbrown[411b]::raw::neon::{impl#0}::load_aligned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:389 ~ hashbrown[411b]::raw::{impl#33}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:389 ~ hashbrown[411b]::raw::{impl#33}::next).5), kind: Field(Expr { hir_id: HirId(DefId(0:389 ~ hashbrown[411b]::raw::{impl#33}::next).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3885:12: 3885:16 (#0), res: Local(HirId(DefId(0:389 ~ hashbrown[411b]::raw::{impl#33}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:389 ~ hashbrown[411b]::raw::{impl#33}::next).7), res: Local(HirId(DefId(0:389 ~ hashbrown[411b]::raw::{impl#33}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3885:12: 3885:16 (#0) }, items#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3885:12: 3885:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:389 ~ hashbrown[411b]::raw::{impl#33}::next).8), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3885:26: 3885:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:3885:26: 3885:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:386 ~ hashbrown[411b]::raw::{impl#32}::next_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:390 ~ hashbrown[411b]::raw::{impl#33}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:402 ~ hashbrown[130f]::raw::{impl#36}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:412 ~ hashbrown[411b]::raw::{impl#39}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ hashbrown[411b]::raw::{impl#26}::drop_elements)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:38 ~ hashbrown[411b]::raw::alloc::inner::Allocator::deallocate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:416 ~ hashbrown[130f]::raw::{impl#40}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:421 ~ hashbrown[130f]::raw::{impl#41}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ hashbrown[130f]::raw::{impl#7}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ hashbrown[130f]::raw::{impl#41}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:440 ~ hashbrown[130f]::raw::{impl#44}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:450 ~ hashbrown[130f]::raw::{impl#47}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ hashbrown[130f]::raw::{impl#26}::drop_elements)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:293 ~ hashbrown[130f]::raw::{impl#13}::clear_no_drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2703 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::copy_from_nonoverlapping)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:455 ~ hashbrown[130f]::raw::{impl#48}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ hashbrown[411b]::raw::{impl#7}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:456 ~ hashbrown[411b]::raw::{impl#48}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2388 ~ hashbrown[130f]::raw::{impl#69}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:469 ~ hashbrown[130f]::raw::{impl#51}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:478 ~ hashbrown[411b]::raw::{impl#54}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:473 ~ hashbrown[130f]::raw::{impl#52}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:476 ~ hashbrown[411b]::raw::{impl#53}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:478 ~ hashbrown[411b]::raw::{impl#54}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:478 ~ hashbrown[411b]::raw::{impl#54}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ hashbrown[411b]::raw::{impl#2}::full)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:265 ~ hashbrown[411b]::raw::{impl#13}::probe_seq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2315 ~ hashbrown[411b]::raw::neon::{impl#0}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ hashbrown[411b]::raw::{impl#13}::ctrl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2318 ~ hashbrown[411b]::raw::neon::{impl#0}::match_tag)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:482 ~ hashbrown[411b]::raw::{impl#55}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:482 ~ hashbrown[411b]::raw::{impl#55}::next).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4169:35: 4169:40 (#0), res: Local(HirId(DefId(0:482 ~ hashbrown[411b]::raw::{impl#55}::next).11)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:482 ~ hashbrown[411b]::raw::{impl#55}::next).22), res: Local(HirId(DefId(0:482 ~ hashbrown[411b]::raw::{impl#55}::next).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4169:35: 4169:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:482 ~ hashbrown[411b]::raw::{impl#55}::next).23), kind: Field(Expr { hir_id: HirId(DefId(0:482 ~ hashbrown[411b]::raw::{impl#55}::next).24), kind: Field(Expr { hir_id: HirId(DefId(0:482 ~ hashbrown[411b]::raw::{impl#55}::next).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4169:44: 4169:48 (#0), res: Local(HirId(DefId(0:482 ~ hashbrown[130f]::raw::{impl#55}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:482 ~ hashbrown[130f]::raw::{impl#55}::next).26), res: Local(HirId(DefId(0:482 ~ hashbrown[411b]::raw::{impl#55}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4169:44: 4169:48 (#0) }, inner#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4169:44: 4169:54 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4169:44: 4169:66 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ hashbrown[411b]::raw::{impl#7}::from_base_index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2401 ~ core[7d5a]::ptr::non_null::{impl#3}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:53: 4186:54 (#0) }, Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).18), kind: Field(Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).19), kind: Field(Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:34: 4186:38 (#0), res: Local(HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).21), res: Local(HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:34: 4186:38 (#0) }, probe_seq#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:34: 4186:48 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:34: 4186:52 (#0) }, Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:55: 4186:58 (#0), res: Local(HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).8)), segments: [PathSegment { ident: bit#0, hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).23), res: Local(HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:55: 4186:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:33: 4186:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).24), kind: Field(Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:62: 4186:66 (#0), res: Local(HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).26), res: Local(HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:62: 4186:66 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:62: 4186:78 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).18), kind: Field(Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).19), kind: Field(Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:34: 4186:38 (#0), res: Local(HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).21), res: Local(HirId(DefId(0:485 ~ hashbrown[130f]::raw::{impl#56}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:34: 4186:38 (#0) }, probe_seq#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:34: 4186:48 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:34: 4186:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:55: 4186:58 (#0), res: Local(HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).8)), segments: [PathSegment { ident: bit#0, hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).23), res: Local(HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4186:55: 4186:58 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3153 ~ core[7d5a]::convert::identity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:60 ~ hashbrown[411b]::raw::bitmask::{impl#0}::any_bit_set)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2319 ~ hashbrown[411b]::raw::neon::{impl#0}::match_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:99 ~ hashbrown[411b]::raw::{impl#3}::move_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:31: 4197:36 (#0), res: Local(HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).73)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).81), res: Local(HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).73)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:31: 4197:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).82), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:60: 4197:61 (#0) }, Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).83), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:56: 4197:57 (#0) }, Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).84), kind: Field(Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:39: 4197:43 (#0), res: Local(HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).86), res: Local(HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:39: 4197:43 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:39: 4197:55 (#0) }, Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).87), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:58: 4197:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:58: 4197:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:39: 4197:59 (#0) }, Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).88), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:62: 4197:67 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).89), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:62: 4197:67 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).91), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:62: 4197:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:39: 4197:74 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).83), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:56: 4197:57 (#0) }, Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).84), kind: Field(Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:39: 4197:43 (#0), res: Local(HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).86), res: Local(HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:39: 4197:43 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:39: 4197:55 (#0) }, Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).87), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:58: 4197:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:58: 4197:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:39: 4197:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).88), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:62: 4197:67 (#0), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), segments: [PathSegment { ident: Group#0, hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).89), res: Def(Struct, DefId(0:2324 ~ hashbrown[411b]::raw::neon::Group)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:62: 4197:67 (#0) }, PathSegment { ident: WIDTH#0, hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).91), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:62: 4197:74 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).84), kind: Field(Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:39: 4197:43 (#0), res: Local(HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).86), res: Local(HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:39: 4197:43 (#0) }, bucket_mask#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:39: 4197:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:485 ~ hashbrown[411b]::raw::{impl#56}::next).87), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:58: 4197:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4197:58: 4197:59 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2689 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2315 ~ hashbrown[411b]::raw::neon::{impl#0}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2318 ~ hashbrown[411b]::raw::neon::{impl#0}::match_tag)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:495 ~ hashbrown[411b]::raw::{impl#57}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:495 ~ hashbrown[411b]::raw::{impl#57}::next).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4220:20: 4220:21 (#0), res: Local(HirId(DefId(0:495 ~ hashbrown[411b]::raw::{impl#57}::next).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:495 ~ hashbrown[130f]::raw::{impl#57}::next).20), res: Local(HirId(DefId(0:495 ~ hashbrown[130f]::raw::{impl#57}::next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4220:20: 4220:21 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:159 ~ hashbrown[411b]::raw::{impl#9}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:495 ~ hashbrown[411b]::raw::{impl#57}::next).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4220:20: 4220:21 (#0), res: Local(HirId(DefId(0:495 ~ hashbrown[411b]::raw::{impl#57}::next).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:495 ~ hashbrown[411b]::raw::{impl#57}::next).20), res: Local(HirId(DefId(0:495 ~ hashbrown[411b]::raw::{impl#57}::next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/raw/mod.rs:4220:20: 4220:21 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:535 ~ hashbrown[411b]::map::{impl#0}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:536 ~ hashbrown[411b]::map::{impl#0}::clone_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2920 ~ core[7d5a]::clone::Clone::clone_from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2920 ~ core[7d5a]::clone::Clone::clone_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:537 ~ hashbrown[130f]::map::make_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ hashbrown[130f]::map::make_hash)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:543 ~ hashbrown[130f]::map::equivalent_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2288 ~ hashbrown[130f]::Equivalent::equivalent)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:549 ~ hashbrown[130f]::map::equivalent)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2288 ~ hashbrown[130f]::Equivalent::equivalent)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ hashbrown[130f]::map::make_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11401 ~ core[7d5a]::hash::BuildHasher::build_hasher)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11365 ~ core[7d5a]::hash::Hasher::finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:562 ~ hashbrown[130f]::map::{impl#1}::with_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ hashbrown[130f]::raw::{impl#8}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:563 ~ hashbrown[130f]::map::{impl#1}::with_capacity_and_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:144 ~ hashbrown[411b]::raw::{impl#8}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:569 ~ hashbrown[411b]::map::{impl#2}::allocator)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:152 ~ hashbrown[411b]::raw::{impl#9}::allocator)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:570 ~ hashbrown[411b]::map::{impl#2}::with_hasher_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:149 ~ hashbrown[130f]::raw::{impl#9}::new_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:571 ~ hashbrown[130f]::map::{impl#2}::with_capacity_and_hasher_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:151 ~ hashbrown[130f]::raw::{impl#9}::with_capacity_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:572 ~ hashbrown[130f]::map::{impl#2}::hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:573 ~ hashbrown[130f]::map::{impl#2}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:218 ~ hashbrown[130f]::raw::{impl#9}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:574 ~ hashbrown[130f]::map::{impl#2}::keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:577 ~ hashbrown[130f]::map::{impl#2}::iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:575 ~ hashbrown[130f]::map::{impl#2}::values)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:577 ~ hashbrown[130f]::map::{impl#2}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:576 ~ hashbrown[130f]::map::{impl#2}::values_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:578 ~ hashbrown[130f]::map::{impl#2}::iter_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:577 ~ hashbrown[130f]::map::{impl#2}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ hashbrown[130f]::raw::{impl#9}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:578 ~ hashbrown[130f]::map::{impl#2}::iter_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ hashbrown[130f]::raw::{impl#9}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:579 ~ hashbrown[130f]::map::{impl#2}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ hashbrown[130f]::raw::{impl#9}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:580 ~ hashbrown[130f]::map::{impl#2}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:580 ~ hashbrown[130f]::map::{impl#2}::is_empty).4), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:580 ~ hashbrown[130f]::map::{impl#2}::is_empty).5), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:580 ~ hashbrown[130f]::map::{impl#2}::is_empty).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:844:9: 844:13 (#0), res: Local(HirId(DefId(0:580 ~ hashbrown[130f]::map::{impl#2}::is_empty).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:580 ~ hashbrown[130f]::map::{impl#2}::is_empty).7), res: Local(HirId(DefId(0:580 ~ hashbrown[130f]::map::{impl#2}::is_empty).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:844:9: 844:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:844:14: 844:19 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:844:9: 844:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:580 ~ hashbrown[411b]::map::{impl#2}::is_empty).8), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:844:23: 844:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:844:23: 844:24 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:579 ~ hashbrown[411b]::map::{impl#2}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:581 ~ hashbrown[411b]::map::{impl#2}::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:225 ~ hashbrown[130f]::raw::{impl#9}::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:582 ~ hashbrown[130f]::map::{impl#2}::retain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ hashbrown[411b]::raw::{impl#9}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[130f]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:582 ~ hashbrown[411b]::map::{impl#2}::retain).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:923:21: 923:22 (#0), res: Local(HirId(DefId(0:582 ~ hashbrown[411b]::map::{impl#2}::retain).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:582 ~ hashbrown[411b]::map::{impl#2}::retain).32), res: Local(HirId(DefId(0:582 ~ hashbrown[130f]::map::{impl#2}::retain).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:923:21: 923:22 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:158 ~ hashbrown[130f]::raw::{impl#9}::erase)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:584 ~ hashbrown[130f]::map::{impl#2}::extract_if)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ hashbrown[130f]::raw::{impl#9}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:586 ~ hashbrown[130f]::map::{impl#2}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:163 ~ hashbrown[130f]::raw::{impl#9}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:587 ~ hashbrown[411b]::map::{impl#2}::into_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:588 ~ hashbrown[130f]::map::{impl#2}::into_values)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:582 ~ hashbrown[411b]::map::{impl#2}::retain).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:923:21: 923:22 (#0), res: Local(HirId(DefId(0:582 ~ hashbrown[411b]::map::{impl#2}::retain).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:582 ~ hashbrown[411b]::map::{impl#2}::retain).32), res: Local(HirId(DefId(0:582 ~ hashbrown[411b]::map::{impl#2}::retain).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:923:21: 923:22 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:594 ~ hashbrown[130f]::map::{impl#3}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:167 ~ hashbrown[130f]::raw::{impl#9}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:537 ~ hashbrown[130f]::map::make_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:595 ~ hashbrown[130f]::map::{impl#3}::try_reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:169 ~ hashbrown[130f]::raw::{impl#9}::try_reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:537 ~ hashbrown[130f]::map::make_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:596 ~ hashbrown[130f]::map::{impl#3}::shrink_to_fit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:165 ~ hashbrown[130f]::raw::{impl#9}::shrink_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:537 ~ hashbrown[130f]::map::make_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:597 ~ hashbrown[130f]::map::{impl#3}::shrink_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:165 ~ hashbrown[130f]::raw::{impl#9}::shrink_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:537 ~ hashbrown[130f]::map::make_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:598 ~ hashbrown[130f]::map::{impl#3}::entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ hashbrown[411b]::map::make_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ hashbrown[411b]::raw::{impl#9}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:543 ~ hashbrown[411b]::map::equivalent_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:599 ~ hashbrown[411b]::map::{impl#3}::entry_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ hashbrown[411b]::map::make_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ hashbrown[411b]::raw::{impl#9}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:543 ~ hashbrown[411b]::map::equivalent_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:603 ~ hashbrown[411b]::map::{impl#3}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:607 ~ hashbrown[411b]::map::{impl#3}::get_inner)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:605 ~ hashbrown[411b]::map::{impl#3}::get_key_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:607 ~ hashbrown[411b]::map::{impl#3}::get_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:607 ~ hashbrown[411b]::map::{impl#3}::get_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:220 ~ hashbrown[411b]::raw::{impl#9}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ hashbrown[411b]::map::make_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:192 ~ hashbrown[411b]::raw::{impl#9}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:543 ~ hashbrown[411b]::map::equivalent_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:609 ~ hashbrown[411b]::map::{impl#3}::get_key_value_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:615 ~ hashbrown[411b]::map::{impl#3}::get_inner_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:611 ~ hashbrown[411b]::map::{impl#3}::contains_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:607 ~ hashbrown[411b]::map::{impl#3}::get_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:613 ~ hashbrown[411b]::map::{impl#3}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:615 ~ hashbrown[411b]::map::{impl#3}::get_inner_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:615 ~ hashbrown[130f]::map::{impl#3}::get_inner_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:220 ~ hashbrown[130f]::raw::{impl#9}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ hashbrown[130f]::map::make_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:194 ~ hashbrown[130f]::raw::{impl#9}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:543 ~ hashbrown[130f]::map::equivalent_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:617 ~ hashbrown[130f]::map::{impl#3}::get_many_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:4571 ~ core[7d5a]::array::{impl#23}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:645 ~ hashbrown[411b]::map::{impl#3}::get_many_mut_inner)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:624 ~ hashbrown[411b]::map::{impl#3}::get_many_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:4571 ~ core[7d5a]::array::{impl#23}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:651 ~ hashbrown[411b]::map::{impl#3}::get_many_unchecked_mut_inner)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:631 ~ hashbrown[130f]::map::{impl#3}::get_many_key_value_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:4571 ~ core[7d5a]::array::{impl#23}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:645 ~ hashbrown[130f]::map::{impl#3}::get_many_mut_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:638 ~ hashbrown[411b]::map::{impl#3}::get_many_key_value_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:4571 ~ core[7d5a]::array::{impl#23}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:651 ~ hashbrown[411b]::map::{impl#3}::get_many_unchecked_mut_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:645 ~ hashbrown[130f]::map::{impl#3}::get_many_mut_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:657 ~ hashbrown[411b]::map::{impl#3}::build_hashes_inner)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:196 ~ hashbrown[411b]::raw::{impl#9}::get_many_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2288 ~ hashbrown[411b]::Equivalent::equivalent)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:651 ~ hashbrown[130f]::map::{impl#3}::get_many_unchecked_mut_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:657 ~ hashbrown[130f]::map::{impl#3}::build_hashes_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:203 ~ hashbrown[130f]::raw::{impl#9}::get_many_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2288 ~ hashbrown[130f]::Equivalent::equivalent)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:657 ~ hashbrown[130f]::map::{impl#3}::build_hashes_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ hashbrown[411b]::map::make_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:663 ~ hashbrown[411b]::map::{impl#3}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ hashbrown[411b]::map::make_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:664 ~ hashbrown[411b]::map::{impl#3}::find_or_find_insert_slot)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[411b]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ hashbrown[411b]::raw::{impl#9}::insert_in_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:664 ~ hashbrown[130f]::map::{impl#3}::find_or_find_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:184 ~ hashbrown[130f]::raw::{impl#9}::find_or_find_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:543 ~ hashbrown[130f]::map::equivalent_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:537 ~ hashbrown[130f]::map::make_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:666 ~ hashbrown[130f]::map::{impl#3}::insert_unique_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ hashbrown[130f]::map::make_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:537 ~ hashbrown[130f]::map::make_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[130f]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:667 ~ hashbrown[130f]::map::{impl#3}::try_insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:598 ~ hashbrown[130f]::map::{impl#3}::entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1243 ~ hashbrown[130f]::map::{impl#77}::insert)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:668 ~ hashbrown[130f]::map::{impl#3}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:670 ~ hashbrown[130f]::map::{impl#3}::remove_entry)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:670 ~ hashbrown[130f]::map::{impl#3}::remove_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ hashbrown[130f]::map::make_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ hashbrown[130f]::raw::{impl#9}::remove_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:543 ~ hashbrown[130f]::map::equivalent_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:672 ~ hashbrown[130f]::map::{impl#3}::allocation_size)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:154 ~ hashbrown[411b]::raw::{impl#9}::allocation_size)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2018:12: 2018:16 (#0), res: Local(HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).10), res: Local(HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2018:12: 2018:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2018:17: 2018:22 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2018:12: 2018:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).11), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2018:26: 2018:31 (#0), res: Local(HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).14), res: Local(HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2018:26: 2018:31 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2018:32: 2018:37 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2018:26: 2018:37 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:579 ~ hashbrown[130f]::map::{impl#2}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:579 ~ hashbrown[130f]::map::{impl#2}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9008 ~ core[7d5a]::iter::traits::iterator::Iterator::all)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:577 ~ hashbrown[130f]::map::{impl#2}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9681 ~ core[7d5a]::option::{impl#0}::map_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:603 ~ hashbrown[130f]::map::{impl#3}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).46), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2023:67: 2023:72 (#0), res: Local(HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).31)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).48), res: Local(HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).31)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2023:67: 2023:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2023:66: 2023:72 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).49), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2023:77: 2023:78 (#0), res: Local(HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).44)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).51), res: Local(HirId(DefId(0:678 ~ hashbrown[130f]::map::{impl#4}::eq).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2023:77: 2023:78 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2023:76: 2023:78 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Specific({"hashbrown"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:691 ~ hashbrown[411b]::map::{impl#6}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10906 ~ core[7d5a]::fmt::builders::{impl#8}::finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:10900 ~ core[7d5a]::fmt::builders::{impl#8}::entries)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11226 ~ core[7d5a]::fmt::{impl#9}::debug_map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:577 ~ hashbrown[411b]::map::{impl#2}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:697 ~ hashbrown[411b]::map::{impl#7}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:570 ~ hashbrown[411b]::map::{impl#2}::with_hasher_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:705 ~ hashbrown[411b]::map::{impl#8}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:603 ~ hashbrown[411b]::map::{impl#3}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:715 ~ hashbrown[411b]::map::{impl#9}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:719 ~ hashbrown[411b]::map::{impl#10}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:732 ~ hashbrown[411b]::map::{impl#12}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:742 ~ hashbrown[411b]::map::{impl#13}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:402 ~ hashbrown[411b]::raw::{impl#36}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:752 ~ hashbrown[411b]::map::{impl#14}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:758 ~ hashbrown[411b]::map::{impl#15}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:760 ~ hashbrown[411b]::map::{impl#15}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:761 ~ hashbrown[411b]::map::{impl#15}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:761 ~ hashbrown[411b]::map::{impl#15}::fold).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2327:45: 2327:46 (#0), res: Local(HirId(DefId(0:761 ~ hashbrown[130f]::map::{impl#15}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:761 ~ hashbrown[130f]::map::{impl#15}::fold).23), res: Local(HirId(DefId(0:761 ~ hashbrown[130f]::map::{impl#15}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2327:45: 2327:46 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:761 ~ hashbrown[411b]::map::{impl#15}::fold).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2327:45: 2327:46 (#0), res: Local(HirId(DefId(0:761 ~ hashbrown[411b]::map::{impl#15}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:761 ~ hashbrown[411b]::map::{impl#15}::fold).23), res: Local(HirId(DefId(0:761 ~ hashbrown[411b]::map::{impl#15}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2327:45: 2327:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:769 ~ hashbrown[411b]::map::{impl#16}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:778 ~ hashbrown[411b]::map::{impl#18}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:742 ~ hashbrown[411b]::map::{impl#13}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:789 ~ hashbrown[411b]::map::{impl#19}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:795 ~ hashbrown[411b]::map::{impl#20}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:797 ~ hashbrown[411b]::map::{impl#20}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:798 ~ hashbrown[411b]::map::{impl#20}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:798 ~ hashbrown[411b]::map::{impl#20}::fold).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2405:45: 2405:46 (#0), res: Local(HirId(DefId(0:798 ~ hashbrown[411b]::map::{impl#20}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:798 ~ hashbrown[130f]::map::{impl#20}::fold).23), res: Local(HirId(DefId(0:798 ~ hashbrown[130f]::map::{impl#20}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2405:45: 2405:46 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:798 ~ hashbrown[411b]::map::{impl#20}::fold).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2405:45: 2405:46 (#0), res: Local(HirId(DefId(0:798 ~ hashbrown[411b]::map::{impl#20}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:798 ~ hashbrown[130f]::map::{impl#20}::fold).23), res: Local(HirId(DefId(0:798 ~ hashbrown[130f]::map::{impl#20}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2405:45: 2405:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:806 ~ hashbrown[411b]::map::{impl#21}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:815 ~ hashbrown[411b]::map::{impl#23}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:742 ~ hashbrown[411b]::map::{impl#13}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:825 ~ hashbrown[411b]::map::{impl#24}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:829 ~ hashbrown[130f]::map::{impl#25}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:838 ~ hashbrown[411b]::map::{impl#26}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:842 ~ hashbrown[411b]::map::{impl#27}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:853 ~ hashbrown[411b]::map::{impl#28}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:440 ~ hashbrown[411b]::raw::{impl#44}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:868 ~ hashbrown[130f]::map::{impl#29}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:495 ~ hashbrown[411b]::raw::{impl#57}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:868 ~ hashbrown[411b]::map::{impl#29}::next).15), kind: Field(Expr { hir_id: HirId(DefId(0:868 ~ hashbrown[130f]::map::{impl#29}::next).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2614:52: 2614:56 (#0), res: Local(HirId(DefId(0:868 ~ hashbrown[130f]::map::{impl#29}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:868 ~ hashbrown[130f]::map::{impl#29}::next).17), res: Local(HirId(DefId(0:868 ~ hashbrown[130f]::map::{impl#29}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2614:52: 2614:56 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2614:51: 2614:59 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:870 ~ hashbrown[130f]::map::{impl#29}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:868 ~ hashbrown[411b]::map::{impl#29}::next).15), kind: Field(Expr { hir_id: HirId(DefId(0:868 ~ hashbrown[130f]::map::{impl#29}::next).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2614:52: 2614:56 (#0), res: Local(HirId(DefId(0:868 ~ hashbrown[130f]::map::{impl#29}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:868 ~ hashbrown[411b]::map::{impl#29}::next).17), res: Local(HirId(DefId(0:868 ~ hashbrown[411b]::map::{impl#29}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2614:52: 2614:56 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:2614:51: 2614:59 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:897 ~ hashbrown[411b]::map::{impl#31}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10817 ~ core[7d5a]::fmt::builders::{impl#4}::finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11208 ~ core[7d5a]::fmt::{impl#9}::debug_tuple)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:10817 ~ core[7d5a]::fmt::builders::{impl#4}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11208 ~ core[7d5a]::fmt::{impl#9}::debug_tuple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:922 ~ hashbrown[130f]::map::{impl#34}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1225 ~ hashbrown[130f]::map::{impl#76}::key)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1227 ~ hashbrown[130f]::map::{impl#76}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:937 ~ hashbrown[130f]::map::{impl#35}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10817 ~ core[7d5a]::fmt::builders::{impl#4}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11208 ~ core[7d5a]::fmt::{impl#9}::debug_tuple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1241 ~ hashbrown[130f]::map::{impl#77}::key)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:958 ~ hashbrown[130f]::map::{impl#36}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10817 ~ core[7d5a]::fmt::builders::{impl#4}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11208 ~ core[7d5a]::fmt::{impl#9}::debug_tuple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10817 ~ core[7d5a]::fmt::builders::{impl#4}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11208 ~ core[7d5a]::fmt::{impl#9}::debug_tuple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:976 ~ hashbrown[130f]::map::{impl#37}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10817 ~ core[7d5a]::fmt::builders::{impl#4}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11208 ~ core[7d5a]::fmt::{impl#9}::debug_tuple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1279 ~ hashbrown[130f]::map::{impl#80}::key)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:990 ~ hashbrown[130f]::map::{impl#38}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1225 ~ hashbrown[411b]::map::{impl#76}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1227 ~ hashbrown[411b]::map::{impl#76}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:996 ~ hashbrown[411b]::map::{impl#39}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1225 ~ hashbrown[411b]::map::{impl#76}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1227 ~ hashbrown[130f]::map::{impl#76}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1005 ~ hashbrown[130f]::map::{impl#40}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:577 ~ hashbrown[130f]::map::{impl#2}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1014 ~ hashbrown[130f]::map::{impl#41}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:578 ~ hashbrown[130f]::map::{impl#2}::iter_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1022 ~ hashbrown[130f]::map::{impl#42}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1026 ~ hashbrown[130f]::map::{impl#43}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1032 ~ hashbrown[130f]::map::{impl#44}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ hashbrown[130f]::raw::{impl#7}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1033 ~ hashbrown[130f]::map::{impl#44}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1034 ~ hashbrown[130f]::map::{impl#44}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ hashbrown[130f]::raw::{impl#7}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1034 ~ hashbrown[130f]::map::{impl#44}::fold).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3191:13: 3191:14 (#0), res: Local(HirId(DefId(0:1034 ~ hashbrown[130f]::map::{impl#44}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1034 ~ hashbrown[130f]::map::{impl#44}::fold).31), res: Local(HirId(DefId(0:1034 ~ hashbrown[130f]::map::{impl#44}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3191:13: 3191:14 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1034 ~ hashbrown[130f]::map::{impl#44}::fold).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3191:13: 3191:14 (#0), res: Local(HirId(DefId(0:1034 ~ hashbrown[130f]::map::{impl#44}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1034 ~ hashbrown[130f]::map::{impl#44}::fold).31), res: Local(HirId(DefId(0:1034 ~ hashbrown[130f]::map::{impl#44}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3191:13: 3191:14 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1041 ~ hashbrown[130f]::map::{impl#45}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1048 ~ hashbrown[130f]::map::{impl#47}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1054 ~ hashbrown[411b]::map::{impl#48}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[411b]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1055 ~ hashbrown[411b]::map::{impl#48}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1056 ~ hashbrown[130f]::map::{impl#48}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[130f]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1056 ~ hashbrown[130f]::map::{impl#48}::fold).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3239:13: 3239:14 (#0), res: Local(HirId(DefId(0:1056 ~ hashbrown[411b]::map::{impl#48}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1056 ~ hashbrown[411b]::map::{impl#48}::fold).31), res: Local(HirId(DefId(0:1056 ~ hashbrown[130f]::map::{impl#48}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3239:13: 3239:14 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1056 ~ hashbrown[411b]::map::{impl#48}::fold).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3239:13: 3239:14 (#0), res: Local(HirId(DefId(0:1056 ~ hashbrown[411b]::map::{impl#48}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1056 ~ hashbrown[411b]::map::{impl#48}::fold).31), res: Local(HirId(DefId(0:1056 ~ hashbrown[411b]::map::{impl#48}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3239:13: 3239:14 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1063 ~ hashbrown[411b]::map::{impl#49}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1070 ~ hashbrown[411b]::map::{impl#51}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:732 ~ hashbrown[411b]::map::{impl#12}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1075 ~ hashbrown[411b]::map::{impl#52}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1081 ~ hashbrown[411b]::map::{impl#53}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1082 ~ hashbrown[130f]::map::{impl#53}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1083 ~ hashbrown[130f]::map::{impl#53}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1090 ~ hashbrown[411b]::map::{impl#54}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1099 ~ hashbrown[411b]::map::{impl#56}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:742 ~ hashbrown[411b]::map::{impl#13}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1103 ~ hashbrown[411b]::map::{impl#57}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1109 ~ hashbrown[411b]::map::{impl#58}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1110 ~ hashbrown[130f]::map::{impl#58}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1111 ~ hashbrown[130f]::map::{impl#58}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1111 ~ hashbrown[411b]::map::{impl#58}::fold).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3332:45: 3332:46 (#0), res: Local(HirId(DefId(0:1111 ~ hashbrown[130f]::map::{impl#58}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1111 ~ hashbrown[130f]::map::{impl#58}::fold).23), res: Local(HirId(DefId(0:1111 ~ hashbrown[411b]::map::{impl#58}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3332:45: 3332:46 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1111 ~ hashbrown[130f]::map::{impl#58}::fold).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3332:45: 3332:46 (#0), res: Local(HirId(DefId(0:1111 ~ hashbrown[130f]::map::{impl#58}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1111 ~ hashbrown[411b]::map::{impl#58}::fold).23), res: Local(HirId(DefId(0:1111 ~ hashbrown[411b]::map::{impl#58}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3332:45: 3332:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1118 ~ hashbrown[411b]::map::{impl#59}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1125 ~ hashbrown[130f]::map::{impl#61}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1131 ~ hashbrown[130f]::map::{impl#62}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1132 ~ hashbrown[130f]::map::{impl#62}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1133 ~ hashbrown[130f]::map::{impl#62}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1133 ~ hashbrown[411b]::map::{impl#62}::fold).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3372:45: 3372:46 (#0), res: Local(HirId(DefId(0:1133 ~ hashbrown[411b]::map::{impl#62}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1133 ~ hashbrown[411b]::map::{impl#62}::fold).23), res: Local(HirId(DefId(0:1133 ~ hashbrown[411b]::map::{impl#62}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3372:45: 3372:46 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1133 ~ hashbrown[411b]::map::{impl#62}::fold).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3372:45: 3372:46 (#0), res: Local(HirId(DefId(0:1133 ~ hashbrown[411b]::map::{impl#62}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1133 ~ hashbrown[411b]::map::{impl#62}::fold).23), res: Local(HirId(DefId(0:1133 ~ hashbrown[411b]::map::{impl#62}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3372:45: 3372:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1140 ~ hashbrown[411b]::map::{impl#63}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1147 ~ hashbrown[411b]::map::{impl#65}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1153 ~ hashbrown[411b]::map::{impl#66}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1154 ~ hashbrown[411b]::map::{impl#66}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1155 ~ hashbrown[130f]::map::{impl#66}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1155 ~ hashbrown[411b]::map::{impl#66}::fold).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3412:45: 3412:46 (#0), res: Local(HirId(DefId(0:1155 ~ hashbrown[411b]::map::{impl#66}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1155 ~ hashbrown[411b]::map::{impl#66}::fold).23), res: Local(HirId(DefId(0:1155 ~ hashbrown[411b]::map::{impl#66}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3412:45: 3412:46 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1155 ~ hashbrown[411b]::map::{impl#66}::fold).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3412:45: 3412:46 (#0), res: Local(HirId(DefId(0:1155 ~ hashbrown[411b]::map::{impl#66}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1155 ~ hashbrown[411b]::map::{impl#66}::fold).23), res: Local(HirId(DefId(0:1155 ~ hashbrown[411b]::map::{impl#66}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3412:45: 3412:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1162 ~ hashbrown[411b]::map::{impl#67}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1169 ~ hashbrown[411b]::map::{impl#69}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:732 ~ hashbrown[411b]::map::{impl#12}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:1176 ~ hashbrown[411b]::map::{impl#70}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1177 ~ hashbrown[130f]::map::{impl#70}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1178 ~ hashbrown[411b]::map::{impl#70}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1185 ~ hashbrown[130f]::map::{impl#71}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1194 ~ hashbrown[130f]::map::{impl#73}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:853 ~ hashbrown[130f]::map::{impl#28}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1201 ~ hashbrown[130f]::map::{impl#74}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1230 ~ hashbrown[130f]::map::{impl#76}::insert)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1244 ~ hashbrown[130f]::map::{impl#77}::insert_entry)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1202 ~ hashbrown[130f]::map::{impl#74}::or_insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1229 ~ hashbrown[130f]::map::{impl#76}::into_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1243 ~ hashbrown[130f]::map::{impl#77}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1203 ~ hashbrown[130f]::map::{impl#74}::or_insert_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1229 ~ hashbrown[130f]::map::{impl#76}::into_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1243 ~ hashbrown[130f]::map::{impl#77}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1203 ~ hashbrown[130f]::map::{impl#74}::or_insert_with).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3554:50: 3554:57 (#0), res: Local(HirId(DefId(0:1203 ~ hashbrown[130f]::map::{impl#74}::or_insert_with).4)), segments: [PathSegment { ident: default#0, hir_id: HirId(DefId(0:1203 ~ hashbrown[130f]::map::{impl#74}::or_insert_with).28), res: Local(HirId(DefId(0:1203 ~ hashbrown[130f]::map::{impl#74}::or_insert_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3554:50: 3554:57 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1205 ~ hashbrown[130f]::map::{impl#74}::or_insert_with_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1229 ~ hashbrown[130f]::map::{impl#76}::into_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1205 ~ hashbrown[130f]::map::{impl#74}::or_insert_with_key).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3589:29: 3589:36 (#0), res: Local(HirId(DefId(0:1205 ~ hashbrown[130f]::map::{impl#74}::or_insert_with_key).4)), segments: [PathSegment { ident: default#0, hir_id: HirId(DefId(0:1205 ~ hashbrown[130f]::map::{impl#74}::or_insert_with_key).26), res: Local(HirId(DefId(0:1205 ~ hashbrown[130f]::map::{impl#74}::or_insert_with_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3589:29: 3589:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1243 ~ hashbrown[130f]::map::{impl#77}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1207 ~ hashbrown[130f]::map::{impl#74}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1225 ~ hashbrown[130f]::map::{impl#76}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1241 ~ hashbrown[130f]::map::{impl#77}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1208 ~ hashbrown[130f]::map::{impl#74}::and_modify)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1208 ~ hashbrown[411b]::map::{impl#74}::and_modify).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3644:17: 3644:18 (#0), res: Local(HirId(DefId(0:1208 ~ hashbrown[130f]::map::{impl#74}::and_modify).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1208 ~ hashbrown[130f]::map::{impl#74}::and_modify).16), res: Local(HirId(DefId(0:1208 ~ hashbrown[130f]::map::{impl#74}::and_modify).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3644:17: 3644:18 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1210 ~ hashbrown[411b]::map::{impl#74}::and_replace_entry_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1232 ~ hashbrown[411b]::map::{impl#76}::replace_entry_with)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1203 ~ hashbrown[411b]::map::{impl#74}::or_insert_with).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3554:50: 3554:57 (#0), res: Local(HirId(DefId(0:1203 ~ hashbrown[130f]::map::{impl#74}::or_insert_with).4)), segments: [PathSegment { ident: default#0, hir_id: HirId(DefId(0:1203 ~ hashbrown[130f]::map::{impl#74}::or_insert_with).28), res: Local(HirId(DefId(0:1203 ~ hashbrown[411b]::map::{impl#74}::or_insert_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3554:50: 3554:57 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1205 ~ hashbrown[411b]::map::{impl#74}::or_insert_with_key).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3589:29: 3589:36 (#0), res: Local(HirId(DefId(0:1205 ~ hashbrown[130f]::map::{impl#74}::or_insert_with_key).4)), segments: [PathSegment { ident: default#0, hir_id: HirId(DefId(0:1205 ~ hashbrown[411b]::map::{impl#74}::or_insert_with_key).26), res: Local(HirId(DefId(0:1205 ~ hashbrown[411b]::map::{impl#74}::or_insert_with_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3589:29: 3589:36 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1208 ~ hashbrown[411b]::map::{impl#74}::and_modify).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3644:17: 3644:18 (#0), res: Local(HirId(DefId(0:1208 ~ hashbrown[130f]::map::{impl#74}::and_modify).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1208 ~ hashbrown[130f]::map::{impl#74}::and_modify).16), res: Local(HirId(DefId(0:1208 ~ hashbrown[130f]::map::{impl#74}::and_modify).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3644:17: 3644:18 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1218 ~ hashbrown[130f]::map::{impl#75}::or_default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1229 ~ hashbrown[411b]::map::{impl#76}::into_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1243 ~ hashbrown[411b]::map::{impl#77}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1225 ~ hashbrown[411b]::map::{impl#76}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ hashbrown[411b]::raw::{impl#7}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1226 ~ hashbrown[411b]::map::{impl#76}::remove_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:159 ~ hashbrown[411b]::raw::{impl#9}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1227 ~ hashbrown[411b]::map::{impl#76}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ hashbrown[411b]::raw::{impl#7}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1228 ~ hashbrown[411b]::map::{impl#76}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[411b]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1229 ~ hashbrown[411b]::map::{impl#76}::into_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[411b]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1230 ~ hashbrown[411b]::map::{impl#76}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1228 ~ hashbrown[411b]::map::{impl#76}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1231 ~ hashbrown[411b]::map::{impl#76}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1226 ~ hashbrown[411b]::map::{impl#76}::remove_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1232 ~ hashbrown[411b]::map::{impl#76}::replace_entry_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:182 ~ hashbrown[411b]::raw::{impl#9}::replace_bucket_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1232 ~ hashbrown[130f]::map::{impl#76}::replace_entry_with).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3993:46: 3993:47 (#0), res: Local(HirId(DefId(0:1232 ~ hashbrown[411b]::map::{impl#76}::replace_entry_with).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1232 ~ hashbrown[130f]::map::{impl#76}::replace_entry_with).35), res: Local(HirId(DefId(0:1232 ~ hashbrown[130f]::map::{impl#76}::replace_entry_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3993:46: 3993:47 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1232 ~ hashbrown[130f]::map::{impl#76}::replace_entry_with).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3993:46: 3993:47 (#0), res: Local(HirId(DefId(0:1232 ~ hashbrown[130f]::map::{impl#76}::replace_entry_with).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1232 ~ hashbrown[130f]::map::{impl#76}::replace_entry_with).35), res: Local(HirId(DefId(0:1232 ~ hashbrown[130f]::map::{impl#76}::replace_entry_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:3993:46: 3993:47 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:1241 ~ hashbrown[411b]::map::{impl#77}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1242 ~ hashbrown[411b]::map::{impl#77}::into_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1243 ~ hashbrown[411b]::map::{impl#77}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:180 ~ hashbrown[411b]::raw::{impl#9}::insert_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:537 ~ hashbrown[411b]::map::make_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1244 ~ hashbrown[130f]::map::{impl#77}::insert_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:537 ~ hashbrown[130f]::map::make_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1253 ~ hashbrown[411b]::map::{impl#78}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1230 ~ hashbrown[130f]::map::{impl#76}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1281 ~ hashbrown[411b]::map::{impl#80}::insert_entry)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1254 ~ hashbrown[130f]::map::{impl#78}::or_insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1229 ~ hashbrown[130f]::map::{impl#76}::into_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1280 ~ hashbrown[130f]::map::{impl#80}::insert)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1255 ~ hashbrown[130f]::map::{impl#78}::or_insert_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1229 ~ hashbrown[411b]::map::{impl#76}::into_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1280 ~ hashbrown[411b]::map::{impl#80}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1255 ~ hashbrown[411b]::map::{impl#78}::or_insert_with).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4200:53: 4200:60 (#0), res: Local(HirId(DefId(0:1255 ~ hashbrown[411b]::map::{impl#78}::or_insert_with).4)), segments: [PathSegment { ident: default#0, hir_id: HirId(DefId(0:1255 ~ hashbrown[411b]::map::{impl#78}::or_insert_with).28), res: Local(HirId(DefId(0:1255 ~ hashbrown[411b]::map::{impl#78}::or_insert_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4200:53: 4200:60 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1257 ~ hashbrown[411b]::map::{impl#78}::or_insert_with_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1229 ~ hashbrown[411b]::map::{impl#76}::into_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1257 ~ hashbrown[411b]::map::{impl#78}::or_insert_with_key).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4232:29: 4232:36 (#0), res: Local(HirId(DefId(0:1257 ~ hashbrown[411b]::map::{impl#78}::or_insert_with_key).4)), segments: [PathSegment { ident: default#0, hir_id: HirId(DefId(0:1257 ~ hashbrown[411b]::map::{impl#78}::or_insert_with_key).26), res: Local(HirId(DefId(0:1257 ~ hashbrown[411b]::map::{impl#78}::or_insert_with_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4232:29: 4232:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1280 ~ hashbrown[411b]::map::{impl#80}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1259 ~ hashbrown[411b]::map::{impl#78}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2868 ~ core[7d5a]::borrow::Borrow::borrow)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1225 ~ hashbrown[411b]::map::{impl#76}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1279 ~ hashbrown[411b]::map::{impl#80}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1260 ~ hashbrown[411b]::map::{impl#78}::and_modify)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1260 ~ hashbrown[411b]::map::{impl#78}::and_modify).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4290:17: 4290:18 (#0), res: Local(HirId(DefId(0:1260 ~ hashbrown[411b]::map::{impl#78}::and_modify).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1260 ~ hashbrown[411b]::map::{impl#78}::and_modify).16), res: Local(HirId(DefId(0:1260 ~ hashbrown[411b]::map::{impl#78}::and_modify).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4290:17: 4290:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1255 ~ hashbrown[411b]::map::{impl#78}::or_insert_with).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4200:53: 4200:60 (#0), res: Local(HirId(DefId(0:1255 ~ hashbrown[411b]::map::{impl#78}::or_insert_with).4)), segments: [PathSegment { ident: default#0, hir_id: HirId(DefId(0:1255 ~ hashbrown[411b]::map::{impl#78}::or_insert_with).28), res: Local(HirId(DefId(0:1255 ~ hashbrown[411b]::map::{impl#78}::or_insert_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4200:53: 4200:60 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1257 ~ hashbrown[411b]::map::{impl#78}::or_insert_with_key).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4232:29: 4232:36 (#0), res: Local(HirId(DefId(0:1257 ~ hashbrown[411b]::map::{impl#78}::or_insert_with_key).4)), segments: [PathSegment { ident: default#0, hir_id: HirId(DefId(0:1257 ~ hashbrown[411b]::map::{impl#78}::or_insert_with_key).26), res: Local(HirId(DefId(0:1257 ~ hashbrown[411b]::map::{impl#78}::or_insert_with_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4232:29: 4232:36 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1260 ~ hashbrown[411b]::map::{impl#78}::and_modify).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4290:17: 4290:18 (#0), res: Local(HirId(DefId(0:1260 ~ hashbrown[411b]::map::{impl#78}::and_modify).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1260 ~ hashbrown[411b]::map::{impl#78}::and_modify).16), res: Local(HirId(DefId(0:1260 ~ hashbrown[411b]::map::{impl#78}::and_modify).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4290:17: 4290:18 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1270 ~ hashbrown[411b]::map::{impl#79}::or_default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1229 ~ hashbrown[411b]::map::{impl#76}::into_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1280 ~ hashbrown[411b]::map::{impl#80}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1279 ~ hashbrown[411b]::map::{impl#80}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1280 ~ hashbrown[411b]::map::{impl#80}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:180 ~ hashbrown[411b]::raw::{impl#9}::insert_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:537 ~ hashbrown[411b]::map::make_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1281 ~ hashbrown[411b]::map::{impl#80}::insert_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:178 ~ hashbrown[130f]::raw::{impl#9}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:537 ~ hashbrown[130f]::map::make_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1287 ~ hashbrown[130f]::map::{impl#81}::from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:571 ~ hashbrown[130f]::map::{impl#2}::with_capacity_and_hasher_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8913 ~ core[7d5a]::iter::traits::iterator::Iterator::for_each)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:663 ~ hashbrown[411b]::map::{impl#3}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:1295 ~ hashbrown[130f]::map::{impl#82}::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:580 ~ hashbrown[130f]::map::{impl#2}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1295 ~ hashbrown[130f]::map::{impl#82}::extend).28), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:33: 4487:34 (#0) }, Expr { hir_id: HirId(DefId(0:1295 ~ hashbrown[411b]::map::{impl#82}::extend).29), kind: Field(Expr { hir_id: HirId(DefId(0:1295 ~ hashbrown[130f]::map::{impl#82}::extend).30), kind: MethodCall(PathSegment { ident: size_hint#0, hir_id: HirId(DefId(0:1295 ~ hashbrown[130f]::map::{impl#82}::extend).31), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1295 ~ hashbrown[130f]::map::{impl#82}::extend).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:14: 4487:18 (#0), res: Local(HirId(DefId(0:1295 ~ hashbrown[130f]::map::{impl#82}::extend).11)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:1295 ~ hashbrown[130f]::map::{impl#82}::extend).33), res: Local(HirId(DefId(0:1295 ~ hashbrown[130f]::map::{impl#82}::extend).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:14: 4487:18 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:19: 4487:30 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:14: 4487:30 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:14: 4487:32 (#0) }, Expr { hir_id: HirId(DefId(0:1295 ~ hashbrown[130f]::map::{impl#82}::extend).34), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:35: 4487:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:35: 4487:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:13: 4487:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1295 ~ hashbrown[411b]::map::{impl#82}::extend).35), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:40: 4487:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:40: 4487:41 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1295 ~ hashbrown[411b]::map::{impl#82}::extend).29), kind: Field(Expr { hir_id: HirId(DefId(0:1295 ~ hashbrown[411b]::map::{impl#82}::extend).30), kind: MethodCall(PathSegment { ident: size_hint#0, hir_id: HirId(DefId(0:1295 ~ hashbrown[411b]::map::{impl#82}::extend).31), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1295 ~ hashbrown[411b]::map::{impl#82}::extend).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:14: 4487:18 (#0), res: Local(HirId(DefId(0:1295 ~ hashbrown[411b]::map::{impl#82}::extend).11)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:1295 ~ hashbrown[411b]::map::{impl#82}::extend).33), res: Local(HirId(DefId(0:1295 ~ hashbrown[411b]::map::{impl#82}::extend).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:14: 4487:18 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:19: 4487:30 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:14: 4487:30 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:14: 4487:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1295 ~ hashbrown[411b]::map::{impl#82}::extend).34), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:35: 4487:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/map.rs:4487:35: 4487:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"hashbrown"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:594 ~ hashbrown[411b]::map::{impl#3}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8913 ~ core[7d5a]::iter::traits::iterator::Iterator::for_each)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:663 ~ hashbrown[411b]::map::{impl#3}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:1304 ~ hashbrown[130f]::map::{impl#83}::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:1313 ~ hashbrown[130f]::map::{impl#84}::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:1316 ~ hashbrown[130f]::map::assert_covariance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1317 ~ hashbrown[130f]::map::assert_covariance::map_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1319 ~ hashbrown[130f]::map::assert_covariance::map_val)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1321 ~ hashbrown[130f]::map::assert_covariance::iter_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1324 ~ hashbrown[130f]::map::assert_covariance::iter_val)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1327 ~ hashbrown[411b]::map::assert_covariance::into_iter_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1330 ~ hashbrown[411b]::map::assert_covariance::into_iter_val)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1333 ~ hashbrown[130f]::map::assert_covariance::keys_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1336 ~ hashbrown[411b]::map::assert_covariance::keys_val)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1339 ~ hashbrown[130f]::map::assert_covariance::values_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1342 ~ hashbrown[130f]::map::assert_covariance::values_val)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1345 ~ hashbrown[130f]::map::assert_covariance::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1317 ~ hashbrown[130f]::map::assert_covariance::map_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1319 ~ hashbrown[411b]::map::assert_covariance::map_val)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1321 ~ hashbrown[411b]::map::assert_covariance::iter_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1324 ~ hashbrown[411b]::map::assert_covariance::iter_val)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1327 ~ hashbrown[411b]::map::assert_covariance::into_iter_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1330 ~ hashbrown[411b]::map::assert_covariance::into_iter_val)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1333 ~ hashbrown[411b]::map::assert_covariance::keys_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1336 ~ hashbrown[411b]::map::assert_covariance::keys_val)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1339 ~ hashbrown[411b]::map::assert_covariance::values_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1342 ~ hashbrown[411b]::map::assert_covariance::values_val)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1345 ~ hashbrown[411b]::map::assert_covariance::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1359 ~ hashbrown[411b]::scopeguard::guard)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1365 ~ hashbrown[130f]::scopeguard::{impl#0}::into_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2013 ~ core[7d5a]::mem::manually_drop::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2785 ~ core[7d5a]::ptr::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2785 ~ core[7d5a]::ptr::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1370 ~ hashbrown[130f]::scopeguard::{impl#1}::deref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1374 ~ hashbrown[130f]::scopeguard::{impl#2}::deref_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1378 ~ hashbrown[411b]::scopeguard::{impl#3}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1378 ~ hashbrown[411b]::scopeguard::{impl#3}::drop).4), kind: Field(Expr { hir_id: HirId(DefId(0:1378 ~ hashbrown[411b]::scopeguard::{impl#3}::drop).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/scopeguard.rs:70:10: 70:14 (#0), res: Local(HirId(DefId(0:1378 ~ hashbrown[130f]::scopeguard::{impl#3}::drop).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1378 ~ hashbrown[130f]::scopeguard::{impl#3}::drop).6), res: Local(HirId(DefId(0:1378 ~ hashbrown[130f]::scopeguard::{impl#3}::drop).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/scopeguard.rs:70:10: 70:14 (#0) }, dropfn#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/scopeguard.rs:70:9: 70:22 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1378 ~ hashbrown[411b]::scopeguard::{impl#3}::drop).4), kind: Field(Expr { hir_id: HirId(DefId(0:1378 ~ hashbrown[130f]::scopeguard::{impl#3}::drop).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/scopeguard.rs:70:10: 70:14 (#0), res: Local(HirId(DefId(0:1378 ~ hashbrown[411b]::scopeguard::{impl#3}::drop).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1378 ~ hashbrown[411b]::scopeguard::{impl#3}::drop).6), res: Local(HirId(DefId(0:1378 ~ hashbrown[411b]::scopeguard::{impl#3}::drop).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/scopeguard.rs:70:10: 70:14 (#0) }, dropfn#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/scopeguard.rs:70:9: 70:22 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1420 ~ hashbrown[411b]::set::{impl#0}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1421 ~ hashbrown[411b]::set::{impl#0}::clone_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2920 ~ core[7d5a]::clone::Clone::clone_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1426 ~ hashbrown[411b]::set::{impl#1}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:573 ~ hashbrown[411b]::map::{impl#2}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1427 ~ hashbrown[411b]::set::{impl#1}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:574 ~ hashbrown[411b]::map::{impl#2}::keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1428 ~ hashbrown[411b]::set::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:579 ~ hashbrown[411b]::map::{impl#2}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1429 ~ hashbrown[411b]::set::{impl#1}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:580 ~ hashbrown[411b]::map::{impl#2}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1430 ~ hashbrown[411b]::set::{impl#1}::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:581 ~ hashbrown[411b]::map::{impl#2}::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1431 ~ hashbrown[411b]::set::{impl#1}::retain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:582 ~ hashbrown[411b]::map::{impl#2}::retain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1431 ~ hashbrown[411b]::set::{impl#1}::retain).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:372:32: 372:33 (#0), res: Local(HirId(DefId(0:1431 ~ hashbrown[411b]::set::{impl#1}::retain).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1431 ~ hashbrown[411b]::set::{impl#1}::retain).17), res: Local(HirId(DefId(0:1431 ~ hashbrown[411b]::set::{impl#1}::retain).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:372:32: 372:33 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1434 ~ hashbrown[411b]::set::{impl#1}::extract_if)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ hashbrown[411b]::raw::{impl#9}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1436 ~ hashbrown[411b]::set::{impl#1}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:586 ~ hashbrown[411b]::map::{impl#2}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1431 ~ hashbrown[411b]::set::{impl#1}::retain).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:372:32: 372:33 (#0), res: Local(HirId(DefId(0:1431 ~ hashbrown[411b]::set::{impl#1}::retain).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1431 ~ hashbrown[130f]::set::{impl#1}::retain).17), res: Local(HirId(DefId(0:1431 ~ hashbrown[130f]::set::{impl#1}::retain).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:372:32: 372:33 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1440 ~ hashbrown[411b]::set::{impl#2}::with_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:562 ~ hashbrown[411b]::map::{impl#1}::with_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1441 ~ hashbrown[130f]::set::{impl#2}::with_capacity_and_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:563 ~ hashbrown[411b]::map::{impl#1}::with_capacity_and_hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1446 ~ hashbrown[411b]::set::{impl#3}::allocator)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:569 ~ hashbrown[411b]::map::{impl#2}::allocator)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1447 ~ hashbrown[130f]::set::{impl#3}::with_hasher_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:570 ~ hashbrown[130f]::map::{impl#2}::with_hasher_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1448 ~ hashbrown[411b]::set::{impl#3}::with_capacity_and_hasher_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:571 ~ hashbrown[411b]::map::{impl#2}::with_capacity_and_hasher_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1449 ~ hashbrown[411b]::set::{impl#3}::hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:572 ~ hashbrown[411b]::map::{impl#2}::hasher)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1454 ~ hashbrown[130f]::set::{impl#4}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:594 ~ hashbrown[130f]::map::{impl#3}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1455 ~ hashbrown[130f]::set::{impl#4}::try_reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:595 ~ hashbrown[130f]::map::{impl#3}::try_reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1456 ~ hashbrown[411b]::set::{impl#4}::shrink_to_fit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:596 ~ hashbrown[130f]::map::{impl#3}::shrink_to_fit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1457 ~ hashbrown[130f]::set::{impl#4}::shrink_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:597 ~ hashbrown[411b]::map::{impl#3}::shrink_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1458 ~ hashbrown[411b]::set::{impl#4}::difference)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1427 ~ hashbrown[411b]::set::{impl#1}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1460 ~ hashbrown[130f]::set::{impl#4}::symmetric_difference)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8903 ~ core[7d5a]::iter::traits::iterator::Iterator::chain)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1458 ~ hashbrown[130f]::set::{impl#4}::difference)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1458 ~ hashbrown[130f]::set::{impl#4}::difference)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1462 ~ hashbrown[130f]::set::{impl#4}::intersection)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1462 ~ hashbrown[130f]::set::{impl#4}::intersection).8), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1462 ~ hashbrown[130f]::set::{impl#4}::intersection).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1462 ~ hashbrown[130f]::set::{impl#4}::intersection).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:798:36: 798:40 (#0), res: Local(HirId(DefId(0:1462 ~ hashbrown[130f]::set::{impl#4}::intersection).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1462 ~ hashbrown[130f]::set::{impl#4}::intersection).11), res: Local(HirId(DefId(0:1462 ~ hashbrown[130f]::set::{impl#4}::intersection).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:798:36: 798:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:798:41: 798:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:798:36: 798:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1462 ~ hashbrown[130f]::set::{impl#4}::intersection).12), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1462 ~ hashbrown[130f]::set::{impl#4}::intersection).13), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1462 ~ hashbrown[130f]::set::{impl#4}::intersection).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:798:50: 798:55 (#0), res: Local(HirId(DefId(0:1462 ~ hashbrown[130f]::set::{impl#4}::intersection).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:1462 ~ hashbrown[130f]::set::{impl#4}::intersection).15), res: Local(HirId(DefId(0:1462 ~ hashbrown[130f]::set::{impl#4}::intersection).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:798:50: 798:55 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:798:56: 798:61 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:798:50: 798:61 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1428 ~ hashbrown[130f]::set::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1428 ~ hashbrown[130f]::set::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1427 ~ hashbrown[130f]::set::{impl#1}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1464 ~ hashbrown[130f]::set::{impl#4}::union)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1464 ~ hashbrown[130f]::set::{impl#4}::union).8), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1464 ~ hashbrown[411b]::set::{impl#4}::union).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1464 ~ hashbrown[411b]::set::{impl#4}::union).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:831:36: 831:40 (#0), res: Local(HirId(DefId(0:1464 ~ hashbrown[411b]::set::{impl#4}::union).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1464 ~ hashbrown[411b]::set::{impl#4}::union).11), res: Local(HirId(DefId(0:1464 ~ hashbrown[411b]::set::{impl#4}::union).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:831:36: 831:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:831:41: 831:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:831:36: 831:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1464 ~ hashbrown[411b]::set::{impl#4}::union).12), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1464 ~ hashbrown[411b]::set::{impl#4}::union).13), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1464 ~ hashbrown[411b]::set::{impl#4}::union).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:831:50: 831:55 (#0), res: Local(HirId(DefId(0:1464 ~ hashbrown[411b]::set::{impl#4}::union).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:1464 ~ hashbrown[411b]::set::{impl#4}::union).15), res: Local(HirId(DefId(0:1464 ~ hashbrown[411b]::set::{impl#4}::union).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:831:50: 831:55 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:831:56: 831:61 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:831:50: 831:61 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1428 ~ hashbrown[411b]::set::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1428 ~ hashbrown[411b]::set::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8903 ~ core[7d5a]::iter::traits::iterator::Iterator::chain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1427 ~ hashbrown[411b]::set::{impl#1}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1458 ~ hashbrown[411b]::set::{impl#4}::difference)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1466 ~ hashbrown[411b]::set::{impl#4}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:611 ~ hashbrown[411b]::map::{impl#3}::contains_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1468 ~ hashbrown[130f]::set::{impl#4}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:605 ~ hashbrown[411b]::map::{impl#3}::get_key_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1470 ~ hashbrown[411b]::set::{impl#4}::get_or_insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ hashbrown[411b]::map::make_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:664 ~ hashbrown[130f]::map::{impl#3}::find_or_find_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ hashbrown[130f]::raw::{impl#9}::insert_in_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ hashbrown[130f]::raw::{impl#7}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1471 ~ hashbrown[411b]::set::{impl#4}::get_or_insert_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ hashbrown[411b]::map::make_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:664 ~ hashbrown[411b]::map::{impl#3}::find_or_find_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1471 ~ hashbrown[411b]::set::{impl#4}::get_or_insert_with).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:956:27: 956:28 (#0), res: Local(HirId(DefId(0:1471 ~ hashbrown[411b]::set::{impl#4}::get_or_insert_with).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1471 ~ hashbrown[411b]::set::{impl#4}::get_or_insert_with).45), res: Local(HirId(DefId(0:1471 ~ hashbrown[411b]::set::{impl#4}::get_or_insert_with).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:956:27: 956:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2288 ~ hashbrown[411b]::Equivalent::equivalent)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ hashbrown[411b]::raw::{impl#9}::insert_in_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ hashbrown[411b]::raw::{impl#7}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1474 ~ hashbrown[411b]::set::{impl#4}::entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:598 ~ hashbrown[411b]::map::{impl#3}::entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1475 ~ hashbrown[411b]::set::{impl#4}::is_disjoint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1462 ~ hashbrown[411b]::set::{impl#4}::intersection)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).6), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:20: 1044:22 (#0) }, Expr { hir_id: HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:9: 1044:13 (#0), res: Local(HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).10), res: Local(HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:9: 1044:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:14: 1044:19 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:9: 1044:19 (#0) }, Expr { hir_id: HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).11), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:23: 1044:28 (#0), res: Local(HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).14), res: Local(HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:23: 1044:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:29: 1044:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:23: 1044:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:9: 1044:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).15), kind: MethodCall(PathSegment { ident: all#0, hir_id: HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).16), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).17), kind: MethodCall(PathSegment { ident: iter#0, hir_id: HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).18), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:38: 1044:42 (#0), res: Local(HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).20), res: Local(HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:38: 1044:42 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:43: 1044:49 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:38: 1044:49 (#0) }, [Expr { hir_id: HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).21), kind: Closure(Closure { def_id: DefId(0:1477 ~ hashbrown[130f]::set::{impl#4}::is_subset::{closure#0}), binder: Default, constness: NotConst, capture_clause: Ref, bound_generic_params: [], fn_decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).30), kind: Infer, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:55: 1044:56 (#0) }], output: DefaultReturn(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:57: 1044:57 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, body: BodyId { hir_id: HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).24) }, fn_decl_span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:54: 1044:57 (#0), fn_arg_span: Some(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:54: 1044:57 (#0)), kind: Closure }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:54: 1044:75 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:50: 1044:76 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:38: 1044:76 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:9: 1044:13 (#0), res: Local(HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).10), res: Local(HirId(DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:9: 1044:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:14: 1044:19 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:9: 1044:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).11), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:23: 1044:28 (#0), res: Local(HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).14), res: Local(HirId(DefId(0:1476 ~ hashbrown[130f]::set::{impl#4}::is_subset).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:23: 1044:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:29: 1044:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1044:23: 1044:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1428 ~ hashbrown[130f]::set::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1428 ~ hashbrown[130f]::set::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9008 ~ core[7d5a]::iter::traits::iterator::Iterator::all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1427 ~ hashbrown[411b]::set::{impl#1}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1466 ~ hashbrown[411b]::set::{impl#4}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1478 ~ hashbrown[411b]::set::{impl#4}::is_superset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1476 ~ hashbrown[411b]::set::{impl#4}::is_subset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1479 ~ hashbrown[130f]::set::{impl#4}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:663 ~ hashbrown[411b]::map::{impl#3}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1480 ~ hashbrown[411b]::set::{impl#4}::insert_unique_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:666 ~ hashbrown[411b]::map::{impl#3}::insert_unique_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1481 ~ hashbrown[411b]::set::{impl#4}::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ hashbrown[411b]::map::make_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:664 ~ hashbrown[411b]::map::{impl#3}::find_or_find_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[411b]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ hashbrown[411b]::raw::{impl#9}::insert_in_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1482 ~ hashbrown[411b]::set::{impl#4}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:668 ~ hashbrown[411b]::map::{impl#3}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1484 ~ hashbrown[411b]::set::{impl#4}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:670 ~ hashbrown[130f]::map::{impl#3}::remove_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1486 ~ hashbrown[130f]::set::{impl#4}::allocation_size)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:672 ~ hashbrown[130f]::map::{impl#3}::allocation_size)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1471 ~ hashbrown[130f]::set::{impl#4}::get_or_insert_with).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:956:27: 956:28 (#0), res: Local(HirId(DefId(0:1471 ~ hashbrown[411b]::set::{impl#4}::get_or_insert_with).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1471 ~ hashbrown[130f]::set::{impl#4}::get_or_insert_with).45), res: Local(HirId(DefId(0:1471 ~ hashbrown[130f]::set::{impl#4}::get_or_insert_with).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:956:27: 956:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1491 ~ hashbrown[411b]::set::{impl#5}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1491 ~ hashbrown[130f]::set::{impl#5}::eq).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1491 ~ hashbrown[130f]::set::{impl#5}::eq).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1491 ~ hashbrown[411b]::set::{impl#5}::eq).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1228:12: 1228:16 (#0), res: Local(HirId(DefId(0:1491 ~ hashbrown[411b]::set::{impl#5}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1491 ~ hashbrown[411b]::set::{impl#5}::eq).10), res: Local(HirId(DefId(0:1491 ~ hashbrown[130f]::set::{impl#5}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1228:12: 1228:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1228:17: 1228:22 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1228:12: 1228:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1491 ~ hashbrown[130f]::set::{impl#5}::eq).11), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1491 ~ hashbrown[130f]::set::{impl#5}::eq).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1491 ~ hashbrown[411b]::set::{impl#5}::eq).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1228:26: 1228:31 (#0), res: Local(HirId(DefId(0:1491 ~ hashbrown[411b]::set::{impl#5}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:1491 ~ hashbrown[411b]::set::{impl#5}::eq).14), res: Local(HirId(DefId(0:1491 ~ hashbrown[411b]::set::{impl#5}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1228:26: 1228:31 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1228:32: 1228:37 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1228:26: 1228:37 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1428 ~ hashbrown[411b]::set::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1428 ~ hashbrown[411b]::set::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9008 ~ core[7d5a]::iter::traits::iterator::Iterator::all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1427 ~ hashbrown[411b]::set::{impl#1}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1466 ~ hashbrown[411b]::set::{impl#4}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1501 ~ hashbrown[411b]::set::{impl#7}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10852 ~ core[7d5a]::fmt::builders::{impl#6}::finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:10847 ~ core[7d5a]::fmt::builders::{impl#6}::entries)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11224 ~ core[7d5a]::fmt::{impl#9}::debug_set)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1427 ~ hashbrown[411b]::set::{impl#1}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1506 ~ hashbrown[130f]::set::{impl#8}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1511 ~ hashbrown[130f]::set::{impl#9}::from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1447 ~ hashbrown[411b]::set::{impl#3}::with_hasher_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1517 ~ hashbrown[411b]::set::{impl#10}::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1525 ~ hashbrown[130f]::set::{impl#11}::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9109 ~ core[7d5a]::iter::traits::iterator::Iterator::copied)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1531 ~ hashbrown[130f]::set::{impl#12}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1537 ~ hashbrown[130f]::set::{impl#13}::bitor)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:9112 ~ core[7d5a]::iter::traits::iterator::Iterator::cloned)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1464 ~ hashbrown[130f]::set::{impl#4}::union)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1543 ~ hashbrown[130f]::set::{impl#14}::bitand)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9112 ~ core[7d5a]::iter::traits::iterator::Iterator::cloned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1462 ~ hashbrown[130f]::set::{impl#4}::intersection)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1549 ~ hashbrown[130f]::set::{impl#15}::bitxor)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9112 ~ core[7d5a]::iter::traits::iterator::Iterator::cloned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1460 ~ hashbrown[411b]::set::{impl#4}::symmetric_difference)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1555 ~ hashbrown[411b]::set::{impl#16}::sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9112 ~ core[7d5a]::iter::traits::iterator::Iterator::cloned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1458 ~ hashbrown[411b]::set::{impl#4}::difference)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1560 ~ hashbrown[130f]::set::{impl#17}::bitor_assign)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1466 ~ hashbrown[130f]::set::{impl#4}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1479 ~ hashbrown[130f]::set::{impl#4}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1565 ~ hashbrown[130f]::set::{impl#18}::bitand_assign)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1431 ~ hashbrown[130f]::set::{impl#1}::retain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1466 ~ hashbrown[130f]::set::{impl#4}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1571 ~ hashbrown[130f]::set::{impl#19}::bitxor_assign)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ hashbrown[130f]::map::make_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:664 ~ hashbrown[130f]::map::{impl#3}::find_or_find_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:159 ~ hashbrown[130f]::raw::{impl#9}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ hashbrown[130f]::raw::{impl#9}::insert_in_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1576 ~ hashbrown[130f]::set::{impl#20}::sub_assign)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1576 ~ hashbrown[130f]::set::{impl#20}::sub_assign).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1576 ~ hashbrown[130f]::set::{impl#20}::sub_assign).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1576 ~ hashbrown[130f]::set::{impl#20}::sub_assign).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1628:12: 1628:15 (#0), res: Local(HirId(DefId(0:1576 ~ hashbrown[130f]::set::{impl#20}::sub_assign).4)), segments: [PathSegment { ident: rhs#0, hir_id: HirId(DefId(0:1576 ~ hashbrown[130f]::set::{impl#20}::sub_assign).10), res: Local(HirId(DefId(0:1576 ~ hashbrown[130f]::set::{impl#20}::sub_assign).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1628:12: 1628:15 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1628:16: 1628:21 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1628:12: 1628:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1576 ~ hashbrown[130f]::set::{impl#20}::sub_assign).11), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1576 ~ hashbrown[130f]::set::{impl#20}::sub_assign).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1576 ~ hashbrown[411b]::set::{impl#20}::sub_assign).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1628:24: 1628:28 (#0), res: Local(HirId(DefId(0:1576 ~ hashbrown[411b]::set::{impl#20}::sub_assign).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1576 ~ hashbrown[411b]::set::{impl#20}::sub_assign).14), res: Local(HirId(DefId(0:1576 ~ hashbrown[411b]::set::{impl#20}::sub_assign).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1628:24: 1628:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1628:29: 1628:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1628:24: 1628:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1428 ~ hashbrown[411b]::set::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1428 ~ hashbrown[411b]::set::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1482 ~ hashbrown[411b]::set::{impl#4}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1431 ~ hashbrown[411b]::set::{impl#1}::retain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1466 ~ hashbrown[411b]::set::{impl#4}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1631 ~ hashbrown[411b]::set::{impl#21}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1427 ~ hashbrown[130f]::set::{impl#1}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1638 ~ hashbrown[130f]::set::{impl#22}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1641 ~ hashbrown[130f]::set::{impl#23}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1644 ~ hashbrown[130f]::set::{impl#24}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1649 ~ hashbrown[130f]::set::{impl#25}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1650 ~ hashbrown[130f]::set::{impl#25}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1651 ~ hashbrown[130f]::set::{impl#25}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1656 ~ hashbrown[130f]::set::{impl#26}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1661 ~ hashbrown[130f]::set::{impl#28}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1665 ~ hashbrown[130f]::set::{impl#29}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1670 ~ hashbrown[130f]::set::{impl#30}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1671 ~ hashbrown[130f]::set::{impl#30}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1672 ~ hashbrown[130f]::set::{impl#30}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1672 ~ hashbrown[130f]::set::{impl#30}::fold).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1858:45: 1858:46 (#0), res: Local(HirId(DefId(0:1672 ~ hashbrown[130f]::set::{impl#30}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1672 ~ hashbrown[130f]::set::{impl#30}::fold).23), res: Local(HirId(DefId(0:1672 ~ hashbrown[130f]::set::{impl#30}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1858:45: 1858:46 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1672 ~ hashbrown[130f]::set::{impl#30}::fold).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1858:45: 1858:46 (#0), res: Local(HirId(DefId(0:1672 ~ hashbrown[130f]::set::{impl#30}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1672 ~ hashbrown[130f]::set::{impl#30}::fold).23), res: Local(HirId(DefId(0:1672 ~ hashbrown[130f]::set::{impl#30}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1858:45: 1858:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1679 ~ hashbrown[411b]::set::{impl#31}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1686 ~ hashbrown[130f]::set::{impl#33}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:742 ~ hashbrown[411b]::map::{impl#13}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:1692 ~ hashbrown[130f]::set::{impl#34}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1693 ~ hashbrown[411b]::set::{impl#34}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1694 ~ hashbrown[411b]::set::{impl#34}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1694 ~ hashbrown[411b]::set::{impl#34}::fold).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1897:45: 1897:46 (#0), res: Local(HirId(DefId(0:1694 ~ hashbrown[411b]::set::{impl#34}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1694 ~ hashbrown[411b]::set::{impl#34}::fold).23), res: Local(HirId(DefId(0:1694 ~ hashbrown[411b]::set::{impl#34}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1897:45: 1897:46 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1694 ~ hashbrown[411b]::set::{impl#34}::fold).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1897:45: 1897:46 (#0), res: Local(HirId(DefId(0:1694 ~ hashbrown[411b]::set::{impl#34}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1694 ~ hashbrown[411b]::set::{impl#34}::fold).23), res: Local(HirId(DefId(0:1694 ~ hashbrown[411b]::set::{impl#34}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1897:45: 1897:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1701 ~ hashbrown[411b]::set::{impl#35}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1708 ~ hashbrown[411b]::set::{impl#37}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:853 ~ hashbrown[411b]::map::{impl#28}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:1715 ~ hashbrown[130f]::set::{impl#38}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:495 ~ hashbrown[130f]::raw::{impl#57}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1715 ~ hashbrown[130f]::set::{impl#38}::next).17), kind: Field(Expr { hir_id: HirId(DefId(0:1715 ~ hashbrown[130f]::set::{impl#38}::next).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1924:39: 1924:43 (#0), res: Local(HirId(DefId(0:1715 ~ hashbrown[130f]::set::{impl#38}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1715 ~ hashbrown[130f]::set::{impl#38}::next).19), res: Local(HirId(DefId(0:1715 ~ hashbrown[130f]::set::{impl#38}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1924:39: 1924:43 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1924:38: 1924:46 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:1718 ~ hashbrown[130f]::set::{impl#38}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1715 ~ hashbrown[411b]::set::{impl#38}::next).17), kind: Field(Expr { hir_id: HirId(DefId(0:1715 ~ hashbrown[411b]::set::{impl#38}::next).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1924:39: 1924:43 (#0), res: Local(HirId(DefId(0:1715 ~ hashbrown[411b]::set::{impl#38}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1715 ~ hashbrown[411b]::set::{impl#38}::next).19), res: Local(HirId(DefId(0:1715 ~ hashbrown[411b]::set::{impl#38}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1924:39: 1924:43 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1924:38: 1924:46 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:1727 ~ hashbrown[130f]::set::{impl#40}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1734 ~ hashbrown[130f]::set::{impl#41}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1466 ~ hashbrown[411b]::set::{impl#4}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1735 ~ hashbrown[411b]::set::{impl#41}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1736 ~ hashbrown[130f]::set::{impl#41}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1466 ~ hashbrown[411b]::set::{impl#4}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1736 ~ hashbrown[130f]::set::{impl#41}::fold).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1978:17: 1978:18 (#0), res: Local(HirId(DefId(0:1736 ~ hashbrown[411b]::set::{impl#41}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1736 ~ hashbrown[411b]::set::{impl#41}::fold).31), res: Local(HirId(DefId(0:1736 ~ hashbrown[130f]::set::{impl#41}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1978:17: 1978:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1736 ~ hashbrown[130f]::set::{impl#41}::fold).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1978:17: 1978:18 (#0), res: Local(HirId(DefId(0:1736 ~ hashbrown[411b]::set::{impl#41}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1736 ~ hashbrown[411b]::set::{impl#41}::fold).31), res: Local(HirId(DefId(0:1736 ~ hashbrown[411b]::set::{impl#41}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:1978:17: 1978:18 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1744 ~ hashbrown[130f]::set::{impl#42}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1753 ~ hashbrown[130f]::set::{impl#44}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1760 ~ hashbrown[411b]::set::{impl#45}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1466 ~ hashbrown[411b]::set::{impl#4}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1761 ~ hashbrown[130f]::set::{impl#45}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1428 ~ hashbrown[411b]::set::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1762 ~ hashbrown[130f]::set::{impl#45}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1466 ~ hashbrown[411b]::set::{impl#4}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1762 ~ hashbrown[411b]::set::{impl#45}::fold).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:2049:17: 2049:18 (#0), res: Local(HirId(DefId(0:1762 ~ hashbrown[411b]::set::{impl#45}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1762 ~ hashbrown[411b]::set::{impl#45}::fold).36), res: Local(HirId(DefId(0:1762 ~ hashbrown[411b]::set::{impl#45}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:2049:17: 2049:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1762 ~ hashbrown[411b]::set::{impl#45}::fold).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:2049:17: 2049:18 (#0), res: Local(HirId(DefId(0:1762 ~ hashbrown[411b]::set::{impl#45}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1762 ~ hashbrown[411b]::set::{impl#45}::fold).36), res: Local(HirId(DefId(0:1762 ~ hashbrown[411b]::set::{impl#45}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/set.rs:2049:17: 2049:18 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1774 ~ hashbrown[411b]::set::{impl#47}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1779 ~ hashbrown[411b]::set::{impl#48}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1786 ~ hashbrown[411b]::set::{impl#49}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1787 ~ hashbrown[411b]::set::{impl#49}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1788 ~ hashbrown[411b]::set::{impl#49}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1799 ~ hashbrown[411b]::set::{impl#51}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1804 ~ hashbrown[411b]::set::{impl#52}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1813 ~ hashbrown[130f]::set::{impl#54}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1820 ~ hashbrown[130f]::set::{impl#55}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1821 ~ hashbrown[130f]::set::{impl#55}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1822 ~ hashbrown[411b]::set::{impl#55}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1840 ~ hashbrown[411b]::set::{impl#56}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10817 ~ core[7d5a]::fmt::builders::{impl#4}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11208 ~ core[7d5a]::fmt::{impl#9}::debug_tuple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10817 ~ core[7d5a]::fmt::builders::{impl#4}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11208 ~ core[7d5a]::fmt::{impl#9}::debug_tuple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1851 ~ hashbrown[130f]::set::{impl#57}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1875 ~ hashbrown[411b]::set::{impl#60}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1862 ~ hashbrown[411b]::set::{impl#58}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10817 ~ core[7d5a]::fmt::builders::{impl#4}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11208 ~ core[7d5a]::fmt::{impl#9}::debug_tuple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1882 ~ hashbrown[411b]::set::{impl#61}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1868 ~ hashbrown[411b]::set::{impl#59}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1884 ~ hashbrown[130f]::set::{impl#61}::insert)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1869 ~ hashbrown[130f]::set::{impl#59}::or_insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1884 ~ hashbrown[130f]::set::{impl#61}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1870 ~ hashbrown[130f]::set::{impl#59}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1875 ~ hashbrown[130f]::set::{impl#60}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1882 ~ hashbrown[130f]::set::{impl#61}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1875 ~ hashbrown[130f]::set::{impl#60}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1225 ~ hashbrown[130f]::map::{impl#76}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1876 ~ hashbrown[130f]::set::{impl#60}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1226 ~ hashbrown[130f]::map::{impl#76}::remove_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1882 ~ hashbrown[130f]::set::{impl#61}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1241 ~ hashbrown[411b]::map::{impl#77}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1883 ~ hashbrown[130f]::set::{impl#61}::into_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1242 ~ hashbrown[130f]::map::{impl#77}::into_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1884 ~ hashbrown[130f]::set::{impl#61}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1244 ~ hashbrown[411b]::map::{impl#77}::insert_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1885 ~ hashbrown[411b]::set::assert_covariance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1886 ~ hashbrown[411b]::set::assert_covariance::set)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1888 ~ hashbrown[130f]::set::assert_covariance::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1891 ~ hashbrown[130f]::set::assert_covariance::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1894 ~ hashbrown[130f]::set::assert_covariance::difference)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1898 ~ hashbrown[130f]::set::assert_covariance::symmetric_difference)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1902 ~ hashbrown[130f]::set::assert_covariance::intersection)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1906 ~ hashbrown[130f]::set::assert_covariance::union)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1910 ~ hashbrown[130f]::set::assert_covariance::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1886 ~ hashbrown[130f]::set::assert_covariance::set)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1888 ~ hashbrown[130f]::set::assert_covariance::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1891 ~ hashbrown[130f]::set::assert_covariance::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1894 ~ hashbrown[130f]::set::assert_covariance::difference)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1898 ~ hashbrown[411b]::set::assert_covariance::symmetric_difference)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1902 ~ hashbrown[411b]::set::assert_covariance::intersection)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1906 ~ hashbrown[130f]::set::assert_covariance::union)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1910 ~ hashbrown[411b]::set::assert_covariance::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1937 ~ hashbrown[130f]::table::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ hashbrown[411b]::raw::{impl#8}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1938 ~ hashbrown[411b]::table::{impl#0}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:144 ~ hashbrown[411b]::raw::{impl#8}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1942 ~ hashbrown[130f]::table::{impl#1}::new_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:149 ~ hashbrown[130f]::raw::{impl#9}::new_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1943 ~ hashbrown[130f]::table::{impl#1}::with_capacity_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:151 ~ hashbrown[130f]::raw::{impl#9}::with_capacity_in)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1944 ~ hashbrown[130f]::table::{impl#1}::allocator)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:152 ~ hashbrown[130f]::raw::{impl#9}::allocator)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1945 ~ hashbrown[130f]::table::{impl#1}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:192 ~ hashbrown[130f]::raw::{impl#9}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1947 ~ hashbrown[130f]::table::{impl#1}::find_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:194 ~ hashbrown[130f]::raw::{impl#9}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1949 ~ hashbrown[130f]::table::{impl#1}::find_entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ hashbrown[130f]::raw::{impl#9}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1951 ~ hashbrown[411b]::table::{impl#1}::entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:184 ~ hashbrown[130f]::raw::{impl#9}::find_or_find_insert_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1954 ~ hashbrown[130f]::table::{impl#1}::insert_unique)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:178 ~ hashbrown[411b]::raw::{impl#9}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1956 ~ hashbrown[411b]::table::{impl#1}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:163 ~ hashbrown[411b]::raw::{impl#9}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1957 ~ hashbrown[411b]::table::{impl#1}::shrink_to_fit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:165 ~ hashbrown[130f]::raw::{impl#9}::shrink_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1966 ~ hashbrown[411b]::table::{impl#1}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1959 ~ hashbrown[130f]::table::{impl#1}::shrink_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:165 ~ hashbrown[411b]::raw::{impl#9}::shrink_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1961 ~ hashbrown[130f]::table::{impl#1}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:167 ~ hashbrown[130f]::raw::{impl#9}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1963 ~ hashbrown[411b]::table::{impl#1}::try_reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:169 ~ hashbrown[130f]::raw::{impl#9}::try_reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1965 ~ hashbrown[130f]::table::{impl#1}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:218 ~ hashbrown[130f]::raw::{impl#9}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1966 ~ hashbrown[130f]::table::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ hashbrown[130f]::raw::{impl#9}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1967 ~ hashbrown[130f]::table::{impl#1}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:220 ~ hashbrown[130f]::raw::{impl#9}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1968 ~ hashbrown[130f]::table::{impl#1}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ hashbrown[411b]::raw::{impl#9}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1969 ~ hashbrown[411b]::table::{impl#1}::iter_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ hashbrown[411b]::raw::{impl#9}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1970 ~ hashbrown[411b]::table::{impl#1}::iter_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:224 ~ hashbrown[411b]::raw::{impl#9}::iter_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1971 ~ hashbrown[130f]::table::{impl#1}::iter_hash_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:224 ~ hashbrown[130f]::raw::{impl#9}::iter_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1972 ~ hashbrown[411b]::table::{impl#1}::retain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ hashbrown[130f]::raw::{impl#9}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1972 ~ hashbrown[411b]::table::{impl#1}::retain).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:866:21: 866:22 (#0), res: Local(HirId(DefId(0:1972 ~ hashbrown[130f]::table::{impl#1}::retain).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1972 ~ hashbrown[130f]::table::{impl#1}::retain).22), res: Local(HirId(DefId(0:1972 ~ hashbrown[130f]::table::{impl#1}::retain).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:866:21: 866:22 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:158 ~ hashbrown[130f]::raw::{impl#9}::erase)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1974 ~ hashbrown[411b]::table::{impl#1}::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:225 ~ hashbrown[130f]::raw::{impl#9}::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1975 ~ hashbrown[130f]::table::{impl#1}::extract_if)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ hashbrown[130f]::raw::{impl#9}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1977 ~ hashbrown[411b]::table::{impl#1}::get_many_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:196 ~ hashbrown[130f]::raw::{impl#9}::get_many_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1982 ~ hashbrown[411b]::table::{impl#1}::get_many_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:203 ~ hashbrown[411b]::raw::{impl#9}::get_many_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1987 ~ hashbrown[411b]::table::{impl#1}::allocation_size)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:154 ~ hashbrown[411b]::raw::{impl#9}::allocation_size)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1972 ~ hashbrown[130f]::table::{impl#1}::retain).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:866:21: 866:22 (#0), res: Local(HirId(DefId(0:1972 ~ hashbrown[411b]::table::{impl#1}::retain).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1972 ~ hashbrown[411b]::table::{impl#1}::retain).22), res: Local(HirId(DefId(0:1972 ~ hashbrown[411b]::table::{impl#1}::retain).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:866:21: 866:22 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1993 ~ hashbrown[130f]::table::{impl#2}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2000 ~ hashbrown[130f]::table::{impl#3}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1968 ~ hashbrown[130f]::table::{impl#1}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2007 ~ hashbrown[130f]::table::{impl#4}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1969 ~ hashbrown[130f]::table::{impl#1}::iter_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2011 ~ hashbrown[130f]::table::{impl#5}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2015 ~ hashbrown[130f]::table::{impl#6}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2019 ~ hashbrown[411b]::table::{impl#7}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10852 ~ core[7d5a]::fmt::builders::{impl#6}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10847 ~ core[7d5a]::fmt::builders::{impl#6}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11224 ~ core[7d5a]::fmt::{impl#9}::debug_set)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1968 ~ hashbrown[130f]::table::{impl#1}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2033 ~ hashbrown[411b]::table::{impl#8}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10817 ~ core[7d5a]::fmt::builders::{impl#4}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11208 ~ core[7d5a]::fmt::{impl#9}::debug_tuple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10817 ~ core[7d5a]::fmt::builders::{impl#4}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11208 ~ core[7d5a]::fmt::{impl#9}::debug_tuple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2038 ~ hashbrown[411b]::table::{impl#9}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2067 ~ hashbrown[411b]::table::{impl#13}::get_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2085 ~ hashbrown[411b]::table::{impl#15}::insert)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2039 ~ hashbrown[411b]::table::{impl#9}::or_insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2085 ~ hashbrown[411b]::table::{impl#15}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2040 ~ hashbrown[130f]::table::{impl#9}::or_insert_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2085 ~ hashbrown[130f]::table::{impl#15}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2040 ~ hashbrown[130f]::table::{impl#9}::or_insert_with).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:1436:50: 1436:57 (#0), res: Local(HirId(DefId(0:2040 ~ hashbrown[130f]::table::{impl#9}::or_insert_with).4)), segments: [PathSegment { ident: default#0, hir_id: HirId(DefId(0:2040 ~ hashbrown[130f]::table::{impl#9}::or_insert_with).26), res: Local(HirId(DefId(0:2040 ~ hashbrown[130f]::table::{impl#9}::or_insert_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:1436:50: 1436:57 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2042 ~ hashbrown[130f]::table::{impl#9}::and_modify)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2042 ~ hashbrown[130f]::table::{impl#9}::and_modify).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:1489:17: 1489:18 (#0), res: Local(HirId(DefId(0:2042 ~ hashbrown[130f]::table::{impl#9}::and_modify).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2042 ~ hashbrown[130f]::table::{impl#9}::and_modify).16), res: Local(HirId(DefId(0:2042 ~ hashbrown[130f]::table::{impl#9}::and_modify).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:1489:17: 1489:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2040 ~ hashbrown[130f]::table::{impl#9}::or_insert_with).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:1436:50: 1436:57 (#0), res: Local(HirId(DefId(0:2040 ~ hashbrown[130f]::table::{impl#9}::or_insert_with).4)), segments: [PathSegment { ident: default#0, hir_id: HirId(DefId(0:2040 ~ hashbrown[130f]::table::{impl#9}::or_insert_with).26), res: Local(HirId(DefId(0:2040 ~ hashbrown[130f]::table::{impl#9}::or_insert_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:1436:50: 1436:57 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2042 ~ hashbrown[130f]::table::{impl#9}::and_modify).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:1489:17: 1489:18 (#0), res: Local(HirId(DefId(0:2042 ~ hashbrown[130f]::table::{impl#9}::and_modify).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2042 ~ hashbrown[130f]::table::{impl#9}::and_modify).16), res: Local(HirId(DefId(0:2042 ~ hashbrown[130f]::table::{impl#9}::and_modify).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:1489:17: 1489:18 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2060 ~ hashbrown[130f]::table::{impl#12}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2066 ~ hashbrown[411b]::table::{impl#13}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2065 ~ hashbrown[411b]::table::{impl#13}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:159 ~ hashbrown[411b]::raw::{impl#9}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2066 ~ hashbrown[411b]::table::{impl#13}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ hashbrown[411b]::raw::{impl#7}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2067 ~ hashbrown[411b]::table::{impl#13}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[411b]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2068 ~ hashbrown[130f]::table::{impl#13}::into_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[130f]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2069 ~ hashbrown[411b]::table::{impl#13}::into_table)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2080 ~ hashbrown[411b]::table::{impl#14}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2085 ~ hashbrown[411b]::table::{impl#15}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ hashbrown[411b]::raw::{impl#9}::insert_in_slot)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2086 ~ hashbrown[411b]::table::{impl#15}::into_table)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2095 ~ hashbrown[411b]::table::{impl#16}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2100 ~ hashbrown[411b]::table::{impl#17}::into_table)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2108 ~ hashbrown[130f]::table::{impl#18}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2113 ~ hashbrown[130f]::table::{impl#19}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ hashbrown[411b]::raw::{impl#7}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2114 ~ hashbrown[411b]::table::{impl#19}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2115 ~ hashbrown[411b]::table::{impl#19}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2115 ~ hashbrown[411b]::table::{impl#19}::fold).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:1992:48: 1992:49 (#0), res: Local(HirId(DefId(0:2115 ~ hashbrown[130f]::table::{impl#19}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2115 ~ hashbrown[130f]::table::{impl#19}::fold).22), res: Local(HirId(DefId(0:2115 ~ hashbrown[130f]::table::{impl#19}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:1992:48: 1992:49 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2115 ~ hashbrown[411b]::table::{impl#19}::fold).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:1992:48: 1992:49 (#0), res: Local(HirId(DefId(0:2115 ~ hashbrown[411b]::table::{impl#19}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2115 ~ hashbrown[411b]::table::{impl#19}::fold).22), res: Local(HirId(DefId(0:2115 ~ hashbrown[411b]::table::{impl#19}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:1992:48: 1992:49 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2121 ~ hashbrown[411b]::table::{impl#20}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2127 ~ hashbrown[130f]::table::{impl#22}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2130 ~ hashbrown[411b]::table::{impl#23}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2138 ~ hashbrown[411b]::table::{impl#24}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2143 ~ hashbrown[411b]::table::{impl#25}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[411b]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2144 ~ hashbrown[411b]::table::{impl#25}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2145 ~ hashbrown[411b]::table::{impl#25}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2145 ~ hashbrown[411b]::table::{impl#25}::fold).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2064:48: 2064:49 (#0), res: Local(HirId(DefId(0:2145 ~ hashbrown[130f]::table::{impl#25}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2145 ~ hashbrown[130f]::table::{impl#25}::fold).22), res: Local(HirId(DefId(0:2145 ~ hashbrown[130f]::table::{impl#25}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2064:48: 2064:49 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2145 ~ hashbrown[130f]::table::{impl#25}::fold).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2064:48: 2064:49 (#0), res: Local(HirId(DefId(0:2145 ~ hashbrown[411b]::table::{impl#25}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2145 ~ hashbrown[411b]::table::{impl#25}::fold).22), res: Local(HirId(DefId(0:2145 ~ hashbrown[411b]::table::{impl#25}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2064:48: 2064:49 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2151 ~ hashbrown[411b]::table::{impl#26}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2156 ~ hashbrown[411b]::table::{impl#28}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2164 ~ hashbrown[130f]::table::{impl#29}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2169 ~ hashbrown[130f]::table::{impl#30}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ hashbrown[130f]::raw::{impl#7}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2170 ~ hashbrown[411b]::table::{impl#30}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2170 ~ hashbrown[411b]::table::{impl#30}::fold).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2130:48: 2130:49 (#0), res: Local(HirId(DefId(0:2170 ~ hashbrown[130f]::table::{impl#30}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2170 ~ hashbrown[130f]::table::{impl#30}::fold).22), res: Local(HirId(DefId(0:2170 ~ hashbrown[130f]::table::{impl#30}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2130:48: 2130:49 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2170 ~ hashbrown[130f]::table::{impl#30}::fold).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2130:48: 2130:49 (#0), res: Local(HirId(DefId(0:2170 ~ hashbrown[130f]::table::{impl#30}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2170 ~ hashbrown[130f]::table::{impl#30}::fold).22), res: Local(HirId(DefId(0:2170 ~ hashbrown[130f]::table::{impl#30}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2130:48: 2130:49 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2179 ~ hashbrown[130f]::table::{impl#32}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2182 ~ hashbrown[411b]::table::{impl#33}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2190 ~ hashbrown[130f]::table::{impl#34}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2195 ~ hashbrown[130f]::table::{impl#35}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ hashbrown[130f]::raw::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2196 ~ hashbrown[130f]::table::{impl#35}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2196 ~ hashbrown[411b]::table::{impl#35}::fold).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2196:48: 2196:49 (#0), res: Local(HirId(DefId(0:2196 ~ hashbrown[411b]::table::{impl#35}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2196 ~ hashbrown[411b]::table::{impl#35}::fold).22), res: Local(HirId(DefId(0:2196 ~ hashbrown[411b]::table::{impl#35}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2196:48: 2196:49 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2196 ~ hashbrown[411b]::table::{impl#35}::fold).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2196:48: 2196:49 (#0), res: Local(HirId(DefId(0:2196 ~ hashbrown[411b]::table::{impl#35}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2196 ~ hashbrown[411b]::table::{impl#35}::fold).22), res: Local(HirId(DefId(0:2196 ~ hashbrown[411b]::table::{impl#35}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2196:48: 2196:49 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2204 ~ hashbrown[411b]::table::{impl#37}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2212 ~ hashbrown[411b]::table::{impl#38}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2217 ~ hashbrown[411b]::table::{impl#39}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2218 ~ hashbrown[130f]::table::{impl#39}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2219 ~ hashbrown[130f]::table::{impl#39}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2225 ~ hashbrown[130f]::table::{impl#40}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2232 ~ hashbrown[130f]::table::{impl#42}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:402 ~ hashbrown[130f]::raw::{impl#36}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2242 ~ hashbrown[130f]::table::{impl#43}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2243 ~ hashbrown[130f]::table::{impl#43}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2244 ~ hashbrown[130f]::table::{impl#43}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2250 ~ hashbrown[411b]::table::{impl#44}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2257 ~ hashbrown[130f]::table::{impl#46}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10873 ~ core[7d5a]::fmt::builders::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10868 ~ core[7d5a]::fmt::builders::{impl#7}::entries)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11222 ~ core[7d5a]::fmt::{impl#9}::debug_list)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:440 ~ hashbrown[130f]::raw::{impl#44}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2270 ~ hashbrown[130f]::table::{impl#47}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:495 ~ hashbrown[411b]::raw::{impl#57}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2270 ~ hashbrown[411b]::table::{impl#47}::next).12), kind: Field(Expr { hir_id: HirId(DefId(0:2270 ~ hashbrown[411b]::table::{impl#47}::next).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2362:32: 2362:36 (#0), res: Local(HirId(DefId(0:2270 ~ hashbrown[130f]::table::{impl#47}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2270 ~ hashbrown[130f]::table::{impl#47}::next).14), res: Local(HirId(DefId(0:2270 ~ hashbrown[130f]::table::{impl#47}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2362:32: 2362:36 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2362:31: 2362:39 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2272 ~ hashbrown[411b]::table::{impl#47}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2270 ~ hashbrown[130f]::table::{impl#47}::next).12), kind: Field(Expr { hir_id: HirId(DefId(0:2270 ~ hashbrown[130f]::table::{impl#47}::next).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2362:32: 2362:36 (#0), res: Local(HirId(DefId(0:2270 ~ hashbrown[130f]::table::{impl#47}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2270 ~ hashbrown[130f]::table::{impl#47}::next).14), res: Local(HirId(DefId(0:2270 ~ hashbrown[130f]::table::{impl#47}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2362:32: 2362:36 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/table.rs:2362:31: 2362:39 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2292 ~ hashbrown[130f]::{impl#0}::equivalent)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2292 ~ hashbrown[130f]::{impl#0}::equivalent).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:159:9: 159:13 (#0), res: Local(HirId(DefId(0:2292 ~ hashbrown[130f]::{impl#0}::equivalent).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2292 ~ hashbrown[130f]::{impl#0}::equivalent).7), res: Local(HirId(DefId(0:2292 ~ hashbrown[130f]::{impl#0}::equivalent).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:159:9: 159:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2292 ~ hashbrown[130f]::{impl#0}::equivalent).8), kind: MethodCall(PathSegment { ident: borrow#0, hir_id: HirId(DefId(0:2292 ~ hashbrown[130f]::{impl#0}::equivalent).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:2292 ~ hashbrown[130f]::{impl#0}::equivalent).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:159:17: 159:20 (#0), res: Local(HirId(DefId(0:2292 ~ hashbrown[130f]::{impl#0}::equivalent).4)), segments: [PathSegment { ident: key#0, hir_id: HirId(DefId(0:2292 ~ hashbrown[130f]::{impl#0}::equivalent).11), res: Local(HirId(DefId(0:2292 ~ hashbrown[130f]::{impl#0}::equivalent).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:159:17: 159:20 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:159:21: 159:29 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:159:17: 159:29 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:2868 ~ core[7d5a]::borrow::Borrow::borrow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2395 ~ hashbrown[130f]::{impl#1}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).26), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165) }, Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165), res: Local(HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).14)), segments: [PathSegment { ident: __self_discr#165, hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).28), res: Local(HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165) }, Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165), res: Local(HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).24)), segments: [PathSegment { ident: __arg1_discr#165, hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).30), res: Local(HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).31), kind: Match(Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).32), kind: Tup([Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:17 (#165), res: Local(HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).34), res: Local(HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165) }, Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165), res: Local(HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).4)), segments: [PathSegment { ident: other#165, hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).36), res: Local(HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165) }, [Arm { hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165), pat: Pat { hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).47), kind: Tuple([Pat { hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).41), kind: Struct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:171:5: 171:5 (#165), res: Def(Variant, DefId(0:2392 ~ hashbrown[130f]::TryReserveError::AllocError)), segments: [PathSegment { ident: TryReserveError#0, hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).37), res: Def(Enum, DefId(0:2389 ~ hashbrown[130f]::TryReserveError)), args: None, infer_args: true }, PathSegment { ident: AllocError#0, hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).38), res: Def(Variant, DefId(0:2392 ~ hashbrown[130f]::TryReserveError::AllocError)), args: None, infer_args: true }] }), [PatField { hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).39), ident: layout#0, pat: Pat { hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).40), kind: Binding(BindingMode(No, Not), HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).40), __self_0#165, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:173:9: 173:37 (#165), default_binding_modes: true }, is_shorthand: false, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:173:9: 173:37 (#165) }], false), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).46), kind: Struct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:171:5: 171:5 (#165), res: Def(Variant, DefId(0:2392 ~ hashbrown[130f]::TryReserveError::AllocError)), segments: [PathSegment { ident: TryReserveError#0, hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).42), res: Def(Enum, DefId(0:2389 ~ hashbrown[411b]::TryReserveError)), args: None, infer_args: true }, PathSegment { ident: AllocError#0, hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).43), res: Def(Variant, DefId(0:2392 ~ hashbrown[411b]::TryReserveError::AllocError)), args: None, infer_args: true }] }), [PatField { hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).44), ident: layout#0, pat: Pat { hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).45), kind: Binding(BindingMode(No, Not), HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).45), __arg1_0#165, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:173:9: 173:37 (#165), default_binding_modes: true }, is_shorthand: false, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:173:9: 173:37 (#165) }], false), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).49), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:173:9: 173:37 (#165) }, Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:173:9: 173:37 (#165), res: Local(HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).40)), segments: [PathSegment { ident: __self_0#165, hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).51), res: Local(HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).40)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:173:9: 173:37 (#165) }, Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:173:9: 173:37 (#165), res: Local(HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).45)), segments: [PathSegment { ident: __arg1_0#165, hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).53), res: Local(HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:173:9: 173:37 (#165) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:173:9: 173:37 (#165) } }, Arm { hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).55), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165), pat: Pat { hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).54), kind: Wild, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).56), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165) } }], Normal), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165), res: Local(HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).14)), segments: [PathSegment { ident: __self_discr#165, hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).28), res: Local(HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165), res: Local(HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).24)), segments: [PathSegment { ident: __arg1_discr#165, hir_id: HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).30), res: Local(HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:164:17: 164:26 (#165) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:173:9: 173:37 (#165), res: Local(HirId(DefId(0:2398 ~ hashbrown[411b]::{impl#3}::eq).40)), segments: [PathSegment { ident: __self_0#165, hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).51), res: Local(HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).40)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:173:9: 173:37 (#165) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:173:9: 173:37 (#165), res: Local(HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).45)), segments: [PathSegment { ident: __arg1_0#165, hir_id: HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).53), res: Local(HirId(DefId(0:2398 ~ hashbrown[130f]::{impl#3}::eq).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.1/src/lib.rs:173:9: 173:37 (#165) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2400 ~ hashbrown[130f]::{impl#4}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2402 ~ hashbrown[411b]::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
