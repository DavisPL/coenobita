[DEBUG] Trying to get func ty of defid DefId(0:231 ~ siphasher[0a55]::sip::{impl#11}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:233 ~ siphasher[0a55]::sip::{impl#12}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ siphasher[0a55]::sip::{impl#14}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:240 ~ siphasher[0a55]::sip::{impl#15}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:242 ~ siphasher[0a55]::sip::{impl#16}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:245 ~ siphasher[0a55]::sip::{impl#18}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:250 ~ siphasher[0a55]::sip::{impl#19}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:252 ~ siphasher[0a55]::sip::{impl#20}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:255 ~ siphasher[0a55]::sip::{impl#22}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:267 ~ siphasher[0a55]::sip::{impl#23}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11206 ~ core[7d5a]::fmt::{impl#9}::debug_struct_fields_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:270 ~ siphasher[0a55]::sip::{impl#24}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:279 ~ siphasher[0a55]::sip::{impl#26}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11202 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field4_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:281 ~ siphasher[0a55]::sip::{impl#27}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:127:19: 127:22 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).6)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).14), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:127:19: 127:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).15), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:127:25: 127:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:127:25: 127:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).39), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:130:10: 130:11 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:130:8: 130:9 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).41), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:130:8: 130:9 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).42), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:130:12: 130:13 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:130:12: 130:13 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:130:8: 130:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:130:16: 130:19 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).6)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).44), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:130:16: 130:19 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:130:8: 130:9 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).41), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:130:8: 130:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).42), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:130:12: 130:13 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:130:12: 130:13 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"siphasher"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).57), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:26: 109:27 (#25) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).58), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:39: 131:40 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:33: 131:38 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).60), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:33: 131:38 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:41: 131:42 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).62), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:41: 131:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:33: 131:42 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).63), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:51 (#25), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#25, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).65), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#25, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).68), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:43: 109:43 (#25), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).67), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:43: 109:50 (#25) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:42: 109:51 (#25) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:51 (#25) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:53 (#25) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:23: 109:53 (#25) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).69), kind: MethodCall(PathSegment { ident: len#25, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).70), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:28: 131:31 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).2)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).72), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:28: 131:31 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:62: 109:67 (#25)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:57: 109:67 (#25) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).58), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:39: 131:40 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:33: 131:38 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).60), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:33: 131:38 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:41: 131:42 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).62), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:41: 131:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:33: 131:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).63), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:51 (#25), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#25, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).65), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#25, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).68), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:43: 109:43 (#25), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).67), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:43: 109:50 (#25) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:42: 109:51 (#25) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:51 (#25) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:53 (#25) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:33: 131:38 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).60), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:33: 131:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:41: 131:42 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).62), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:41: 131:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2591 ~ core[7d5a]::ptr::const_ptr::{impl#0}::add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:33: 131:38 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).105), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:33: 131:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).106), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:41: 131:42 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).107), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:131:41: 131:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25013 ~ core[7d5a]::num::{impl#8}::to_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).143), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:134:10: 134:11 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).144), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:134:8: 134:9 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).145), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:134:8: 134:9 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).146), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:134:12: 134:13 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:134:12: 134:13 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:134:8: 134:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).147), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:134:16: 134:19 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).6)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).148), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:134:16: 134:19 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).144), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:134:8: 134:9 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).145), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:134:8: 134:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).146), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:134:12: 134:13 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:134:12: 134:13 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).154), kind: Cast(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).155), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).190), kind: Semi(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).156), kind: If(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).158), kind: DropTemps(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).157), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:334:12: 334:42 (#32) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:334:12: 334:42 (#32) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:334:12: 334:42 (#166) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).189), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).187), kind: Semi(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).159), kind: If(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).178), kind: DropTemps(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).160), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).161), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:54: 109:56 (#30) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).162), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:26: 109:27 (#30) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).163), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:41: 135:42 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:40 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).165), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:40 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:43: 135:44 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).167), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:43: 135:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:44 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).168), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:51 (#30), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).170), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).173), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:43: 109:43 (#30), res: PrimTy(Uint(U16)), segments: [PathSegment { ident: u16#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).172), res: PrimTy(Uint(U16)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:43: 109:50 (#30) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:42: 109:51 (#30) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:51 (#30) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:53 (#30) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:23: 109:53 (#30) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).174), kind: MethodCall(PathSegment { ident: len#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).175), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).176), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:30: 135:33 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).2)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).177), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:30: 135:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:62: 109:67 (#30)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:57: 109:67 (#30) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:23: 109:67 (#30) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#33) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#169) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).186), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).179), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:13 (#33), res: Def(Fn, DefId(1:10023 ~ core[7d5a]::panicking::panic)), segments: [PathSegment { ident: $crate#34, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).181), res: Err, args: None, infer_args: true }, PathSegment { ident: panicking#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).182), res: Def(Mod, DefId(1:10010 ~ core[7d5a]::panicking)), args: None, infer_args: true }, PathSegment { ident: panic#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).183), res: Def(Fn, DefId(1:10023 ~ core[7d5a]::panicking::panic)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#33) }, [Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).184), kind: Lit(Spanned { node: Str("assertion failed: start + i + mem::size_of::<u16>() <= buf.len()", Cooked), span: no-location (#0) }), span: no-location (#0) }]), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#33) }), hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).185), rules: DefaultBlock, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#33), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#33) }, None), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#33) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#33) }], expr: None, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).188), rules: DefaultBlock, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:334:43: 336:10 (#31), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:334:43: 336:10 (#31) }, None), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:334:9: 336:10 (#31) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:334:9: 336:10 (#31) }, Stmt { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).191), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).197), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).197), data#30, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:110:13: 110:21 (#30), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).192), kind: Cast(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).193), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:110:24: 110:25 (#30) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:110:24: 110:25 (#30) }, Ty { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).194), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:110:29: 110:29 (#30), res: PrimTy(Uint(U16)), segments: [PathSegment { ident: u16#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).195), res: PrimTy(Uint(U16)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:110:29: 110:36 (#30) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:110:24: 110:36 (#30) }), els: None, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).196), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:110:9: 110:37 (#30), source: Normal }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:110:9: 110:37 (#30) }, Stmt { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).229), kind: Semi(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).198), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:111:9: 111:33 (#30), res: Def(Fn, DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)), segments: [PathSegment { ident: ptr#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).200), res: Def(Mod, DefId(1:2224 ~ core[7d5a]::ptr)), args: None, infer_args: true }, PathSegment { ident: copy_nonoverlapping#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).201), res: Def(Fn, DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:111:9: 111:33 (#30) }, [Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).202), kind: MethodCall(PathSegment { ident: add#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).203), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).204), kind: MethodCall(PathSegment { ident: as_ptr#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).205), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).206), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:30: 135:33 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).2)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).207), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:30: 135:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:112:18: 112:26 (#30)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:112:13: 112:26 (#30) }, [Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).208), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:41: 135:42 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:40 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).210), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:40 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).211), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:43: 135:44 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).212), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:43: 135:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:44 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:112:27: 112:34 (#30)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:112:13: 112:34 (#30) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).213), kind: Cast(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).214), kind: Cast(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).215), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).216), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:113:18: 113:22 (#30), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).197)), segments: [PathSegment { ident: data#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).217), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).197)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:113:18: 113:22 (#30) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:113:13: 113:22 (#30) }, Ty { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).219), kind: Ptr(MutTy { ty: Ty { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).218), kind: Infer, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:113:31: 113:32 (#30) }, mutbl: Mut }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:113:26: 113:32 (#30) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:113:13: 113:32 (#30) }, Ty { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).222), kind: Ptr(MutTy { ty: Ty { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).220), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:113:41: 113:43 (#30), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).221), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:113:41: 113:43 (#30) }, mutbl: Mut }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:113:36: 113:43 (#30) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:113:13: 113:43 (#30) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).223), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).224), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:114:13: 114:36 (#30), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).225), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).228), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).226), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:114:28: 114:28 (#30), res: PrimTy(Uint(U16)), segments: [PathSegment { ident: u16#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).227), res: PrimTy(Uint(U16)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:114:28: 114:35 (#30) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:114:27: 114:36 (#30) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:114:13: 114:36 (#30) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:114:13: 114:38 (#30) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:111:9: 115:10 (#30) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:111:9: 115:11 (#30) }], expr: Some(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).230), kind: MethodCall(PathSegment { ident: to_le#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).231), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).232), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:116:9: 116:13 (#30), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).197)), segments: [PathSegment { ident: data#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).233), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).197)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:116:9: 116:13 (#30) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:116:14: 116:21 (#30)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:116:9: 116:21 (#30) }), hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).234), rules: DefaultBlock, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:108:45: 117:6 (#30), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:108:45: 117:6 (#30) }, Ty { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).235), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:54: 135:57 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).236), res: Def(Mod, DefId(1:76 ~ core[7d5a]::u64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:54: 135:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:16: 135:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).237), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:65: 135:66 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).238), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:63: 135:64 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).239), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:63: 135:64 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).240), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:67: 135:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:67: 135:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:62: 135:69 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"siphasher"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).162), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:26: 109:27 (#30) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).163), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:41: 135:42 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:40 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).165), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:40 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:43: 135:44 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).167), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:43: 135:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:44 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).168), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:51 (#30), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).170), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).173), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:43: 109:43 (#30), res: PrimTy(Uint(U16)), segments: [PathSegment { ident: u16#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).172), res: PrimTy(Uint(U16)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:43: 109:50 (#30) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:42: 109:51 (#30) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:51 (#30) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:53 (#30) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:23: 109:53 (#30) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).174), kind: MethodCall(PathSegment { ident: len#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).175), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).176), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:30: 135:33 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).2)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).177), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:30: 135:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:62: 109:67 (#30)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:57: 109:67 (#30) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).163), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:41: 135:42 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:40 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).165), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:40 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:43: 135:44 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).167), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:43: 135:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).168), kind: Call(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:51 (#30), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).170), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#30, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).173), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:43: 109:43 (#30), res: PrimTy(Uint(U16)), segments: [PathSegment { ident: u16#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).172), res: PrimTy(Uint(U16)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:43: 109:50 (#30) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:42: 109:51 (#30) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:51 (#30) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:53 (#30) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:40 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).165), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:43: 135:44 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).167), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:43: 135:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2591 ~ core[7d5a]::ptr::const_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:40 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).210), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:35: 135:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).211), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:43: 135:44 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).212), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:43: 135:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:24887 ~ core[7d5a]::num::{impl#7}::to_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).238), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:63: 135:64 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).239), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:63: 135:64 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).240), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:67: 135:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:135:67: 135:68 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).251), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:138:8: 138:9 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).252), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:138:8: 138:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).253), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:138:12: 138:15 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).6)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).254), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:138:12: 138:15 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).260), kind: Cast(Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).261), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).262), kind: MethodCall(PathSegment { ident: get_unchecked#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).263), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).264), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:18: 139:21 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).2)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).265), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:18: 139:21 (#0) }, [Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).266), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:42: 139:43 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).267), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:36: 139:41 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).268), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:36: 139:41 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).269), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:44: 139:45 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).270), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:44: 139:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:36: 139:45 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:22: 139:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:18: 139:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:17: 139:46 (#0) }, Ty { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).271), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:50: 139:53 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).272), res: Def(Mod, DefId(1:76 ~ core[7d5a]::u64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:50: 139:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:16: 139:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).273), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:61: 139:62 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).274), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:59: 139:60 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).275), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:59: 139:60 (#0) }, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).276), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:63: 139:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:63: 139:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:58: 139:65 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).267), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:36: 139:41 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).268), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:36: 139:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).269), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:44: 139:45 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).270), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:44: 139:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).274), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:59: 139:60 (#0), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).275), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:59: 139:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).276), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:63: 139:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:139:63: 139:64 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).305), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).306), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#37), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).297)), segments: [PathSegment { ident: left_val#37, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).307), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).297)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#37) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#37) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).308), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).309), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#37), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).298)), segments: [PathSegment { ident: right_val#37, hir_id: HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).310), res: Local(HirId(DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le).298)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#37) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#37) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:16 ~ siphasher[0a55]::sip::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:17 ~ siphasher[0a55]::sip::{impl#0}::new_with_keys)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:17 ~ siphasher[0a55]::sip::{impl#0}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ siphasher[0a55]::sip::{impl#2}::new_with_keys)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:18 ~ siphasher[0a55]::sip::{impl#0}::new_with_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25234 ~ core[7d5a]::num::{impl#9}::from_le_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25234 ~ core[7d5a]::num::{impl#9}::from_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:17 ~ siphasher[0a55]::sip::{impl#0}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:22 ~ siphasher[0a55]::sip::{impl#0}::keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:23 ~ siphasher[0a55]::sip::{impl#0}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25228 ~ core[7d5a]::num::{impl#9}::to_le_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25228 ~ core[7d5a]::num::{impl#9}::to_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:26 ~ siphasher[0a55]::sip::{impl#0}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11366 ~ core[7d5a]::hash::Hasher::write)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11365 ~ core[7d5a]::hash::Hasher::finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:28 ~ siphasher[0a55]::sip::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ siphasher[0a55]::sip::{impl#1}::new_with_keys)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ siphasher[0a55]::sip::{impl#1}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:53 ~ siphasher[0a55]::sip::{impl#3}::new_with_keys)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:30 ~ siphasher[0a55]::sip::{impl#1}::new_with_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25234 ~ core[7d5a]::num::{impl#9}::from_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25234 ~ core[7d5a]::num::{impl#9}::from_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ siphasher[0a55]::sip::{impl#1}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:34 ~ siphasher[0a55]::sip::{impl#1}::keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:35 ~ siphasher[0a55]::sip::{impl#1}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25228 ~ core[7d5a]::num::{impl#9}::to_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25228 ~ core[7d5a]::num::{impl#9}::to_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:38 ~ siphasher[0a55]::sip::{impl#1}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11366 ~ core[7d5a]::hash::Hasher::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11365 ~ core[7d5a]::hash::Hasher::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ siphasher[0a55]::sip::{impl#2}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ siphasher[0a55]::sip::{impl#2}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ siphasher[0a55]::sip::{impl#2}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:53 ~ siphasher[0a55]::sip::{impl#3}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ siphasher[0a55]::sip::{impl#2}::new_with_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25234 ~ core[7d5a]::num::{impl#9}::from_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25234 ~ core[7d5a]::num::{impl#9}::from_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ siphasher[0a55]::sip::{impl#2}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ siphasher[0a55]::sip::{impl#2}::keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ siphasher[0a55]::sip::{impl#2}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25228 ~ core[7d5a]::num::{impl#9}::to_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25228 ~ core[7d5a]::num::{impl#9}::to_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ siphasher[0a55]::sip::{impl#2}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11366 ~ core[7d5a]::hash::Hasher::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11365 ~ core[7d5a]::hash::Hasher::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:53 ~ siphasher[0a55]::sip::{impl#3}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).15), kind: Field(Expr { hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:312:25: 312:29 (#0), res: Local(HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).17), res: Local(HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:312:25: 312:29 (#0) }, k0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:312:25: 312:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).18), kind: Lit(Spanned { node: Int(Pu128(8317987319222330741), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:312:35: 312:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:312:35: 312:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).26), kind: Field(Expr { hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:313:25: 313:29 (#0), res: Local(HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).28), res: Local(HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:313:25: 313:29 (#0) }, k1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:313:25: 313:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).29), kind: Lit(Spanned { node: Int(Pu128(7237128888997146477), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:313:35: 313:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:313:35: 313:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).37), kind: Field(Expr { hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:314:25: 314:29 (#0), res: Local(HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).39), res: Local(HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:314:25: 314:29 (#0) }, k0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:314:25: 314:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).40), kind: Lit(Spanned { node: Int(Pu128(7816392313619706465), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:314:35: 314:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:314:35: 314:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).48), kind: Field(Expr { hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:315:25: 315:29 (#0), res: Local(HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).50), res: Local(HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:315:25: 315:29 (#0) }, k1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:315:25: 315:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:54 ~ siphasher[0a55]::sip::{impl#3}::reset).51), kind: Lit(Spanned { node: Int(Pu128(8387220255154660723), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:315:35: 315:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:315:35: 315:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:26: 336:30 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).15)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).31), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:26: 336:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).32), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:33: 336:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:33: 336:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).35), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:39: 336:41 (#0) }, Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:37: 336:38 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).6)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).37), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:37: 336:38 (#0) }, Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).38), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:45: 336:46 (#0) }, Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).39), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:43: 336:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:43: 336:44 (#0) }, Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:47: 336:51 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).15)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).41), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:47: 336:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:42: 336:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:37: 336:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).42), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:56: 336:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:56: 336:57 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:37: 336:38 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).6)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).37), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:37: 336:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).38), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:45: 336:46 (#0) }, Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).39), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:43: 336:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:43: 336:44 (#0) }, Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:47: 336:51 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).15)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).41), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:47: 336:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:42: 336:52 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).39), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:43: 336:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:43: 336:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:47: 336:51 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).15)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).41), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:336:47: 336:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).63), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:339:22: 339:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:339:22: 339:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).64), kind: Field(Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:339:26: 339:30 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).66), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:339:26: 339:30 (#0) }, ntail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:339:26: 339:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:341:22: 341:23 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).6)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).75), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:341:22: 341:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).76), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:341:30: 341:31 (#0) }, Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).77), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:341:28: 341:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:341:28: 341:29 (#0) }, Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).78), kind: Field(Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:341:32: 341:36 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).80), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:341:32: 341:36 (#0) }, ntail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:341:32: 341:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:341:27: 341:43 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).77), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:341:28: 341:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:341:28: 341:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).78), kind: Field(Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:341:32: 341:36 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).80), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:341:32: 341:36 (#0) }, ntail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:341:32: 341:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:342:12: 342:16 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).15)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).85), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:342:12: 342:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:342:19: 342:25 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).68)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).87), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).68)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:342:19: 342:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ siphasher[0a55]::sip::Sip::c_rounds)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:352:22: 352:26 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).15)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).135), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:352:22: 352:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:352:29: 352:35 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).68)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).137), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).68)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:352:29: 352:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).145), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:24: 353:30 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).68)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).146), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).68)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:24: 353:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).147), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:33: 353:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:33: 353:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:37: 353:38 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).6)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).151), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:37: 353:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).152), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:45: 353:46 (#0) }, Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).153), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:43: 353:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:43: 353:44 (#0) }, Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).154), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:47: 353:53 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).68)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).155), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).68)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:47: 353:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:42: 353:54 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).153), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:43: 353:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:43: 353:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).154), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:47: 353:53 (#0), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).68)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).155), res: Local(HirId(DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write).68)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:353:47: 353:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:58 ~ siphasher[0a55]::sip::{impl#4}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11366 ~ core[7d5a]::hash::Hasher::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ siphasher[0a55]::sip::{impl#4}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11365 ~ core[7d5a]::hash::Hasher::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:60 ~ siphasher[0a55]::sip::{impl#4}::write_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11372 ~ core[7d5a]::hash::Hasher::write_usize)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:61 ~ siphasher[0a55]::sip::{impl#4}::write_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11367 ~ core[7d5a]::hash::Hasher::write_u8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:62 ~ siphasher[0a55]::sip::{impl#4}::write_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11368 ~ core[7d5a]::hash::Hasher::write_u16)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:63 ~ siphasher[0a55]::sip::{impl#4}::write_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11369 ~ core[7d5a]::hash::Hasher::write_u32)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:64 ~ siphasher[0a55]::sip::{impl#4}::write_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11370 ~ core[7d5a]::hash::Hasher::write_u64)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:66 ~ siphasher[0a55]::sip::{impl#5}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11366 ~ core[7d5a]::hash::Hasher::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:67 ~ siphasher[0a55]::sip::{impl#5}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11365 ~ core[7d5a]::hash::Hasher::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:68 ~ siphasher[0a55]::sip::{impl#5}::write_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11372 ~ core[7d5a]::hash::Hasher::write_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:69 ~ siphasher[0a55]::sip::{impl#5}::write_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11367 ~ core[7d5a]::hash::Hasher::write_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:70 ~ siphasher[0a55]::sip::{impl#5}::write_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11368 ~ core[7d5a]::hash::Hasher::write_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:71 ~ siphasher[0a55]::sip::{impl#5}::write_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11369 ~ core[7d5a]::hash::Hasher::write_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:72 ~ siphasher[0a55]::sip::{impl#5}::write_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11370 ~ core[7d5a]::hash::Hasher::write_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:74 ~ siphasher[0a55]::sip::{impl#6}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11366 ~ core[7d5a]::hash::Hasher::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:75 ~ siphasher[0a55]::sip::{impl#6}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11365 ~ core[7d5a]::hash::Hasher::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:76 ~ siphasher[0a55]::sip::{impl#6}::write_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11372 ~ core[7d5a]::hash::Hasher::write_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:77 ~ siphasher[0a55]::sip::{impl#6}::write_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11367 ~ core[7d5a]::hash::Hasher::write_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:78 ~ siphasher[0a55]::sip::{impl#6}::write_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11368 ~ core[7d5a]::hash::Hasher::write_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ siphasher[0a55]::sip::{impl#6}::write_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11369 ~ core[7d5a]::hash::Hasher::write_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:80 ~ siphasher[0a55]::sip::{impl#6}::write_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11370 ~ core[7d5a]::hash::Hasher::write_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ siphasher[0a55]::sip::{impl#7}::write_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25389 ~ core[7d5a]::num::{impl#11}::to_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ siphasher[0a55]::sip::{impl#7}::write_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:85 ~ siphasher[0a55]::sip::{impl#7}::write_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25013 ~ core[7d5a]::num::{impl#8}::to_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:86 ~ siphasher[0a55]::sip::{impl#7}::write_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:55 ~ siphasher[0a55]::sip::{impl#3}::short_write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25139 ~ core[7d5a]::num::{impl#9}::to_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).25), kind: Field(Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:496:12: 496:16 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).27), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:496:12: 496:16 (#0) }, ntail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:496:12: 496:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).28), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:496:26: 496:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:496:26: 496:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:497:22: 497:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:497:22: 497:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).35), kind: Field(Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:497:26: 497:30 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).37), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:497:26: 497:30 (#0) }, ntail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:497:26: 497:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).44), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).45), kind: Call(Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:35: 498:44 (#0), res: Def(Fn, DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le)), segments: [PathSegment { ident: u8to64_le#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).47), res: Def(Fn, DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:35: 498:44 (#0) }, [Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:45: 498:48 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).4)), segments: [PathSegment { ident: msg#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).49), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:45: 498:48 (#0) }, Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).50), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:50: 498:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:50: 498:51 (#0) }, Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).51), kind: Call(Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:53: 498:61 (#0), res: Def(Fn, DefId(1:3014 ~ core[7d5a]::cmp::min)), segments: [PathSegment { ident: cmp#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).53), res: Def(Mod, DefId(1:2955 ~ core[7d5a]::cmp)), args: None, infer_args: true }, PathSegment { ident: min#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).54), res: Def(Fn, DefId(1:3014 ~ core[7d5a]::cmp::min)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:53: 498:61 (#0) }, [Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:62: 498:68 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).11)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).56), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:62: 498:68 (#0) }, Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:70: 498:76 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).22)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).58), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:70: 498:76 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:53: 498:77 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:35: 498:78 (#0) }), hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).59), rules: UnsafeBlock(UserProvided), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:26: 498:80 (#0), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:26: 498:80 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).60), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:87: 498:88 (#0) }, Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).61), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:85: 498:86 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:85: 498:86 (#0) }, Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).62), kind: Field(Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:89: 498:93 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).64), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:89: 498:93 (#0) }, ntail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:89: 498:99 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:84: 498:100 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).61), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:85: 498:86 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:85: 498:86 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).62), kind: Field(Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:89: 498:93 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).64), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:89: 498:93 (#0) }, ntail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:498:89: 498:99 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:499:16: 499:22 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).11)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).69), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:499:16: 499:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:499:25: 499:31 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).22)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).71), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:499:25: 499:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ siphasher[0a55]::sip::Sip::c_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:511:19: 511:25 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).11)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).126), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:511:19: 511:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:511:28: 511:34 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).22)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).128), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:511:28: 511:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:512:20: 512:23 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).130)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).134), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:512:20: 512:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).135), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:512:26: 512:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:512:26: 512:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).145), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:515:15: 515:16 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).142)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).146), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).142)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:515:15: 515:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).147), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:515:23: 515:24 (#0) }, Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:515:19: 515:22 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).130)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).149), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:515:19: 515:22 (#0) }, Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:515:25: 515:29 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).137)), segments: [PathSegment { ident: left#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).151), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).137)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:515:25: 515:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:515:19: 515:29 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:515:19: 515:22 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).130)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).149), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:515:19: 515:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:515:25: 515:29 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).137)), segments: [PathSegment { ident: left#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).151), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).137)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:515:25: 515:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"siphasher"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).162), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:26: 109:27 (#42) }, Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).163), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:516:49: 516:50 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).142)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).164), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).142)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:516:49: 516:50 (#0) }, Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).165), kind: Call(Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:51 (#42), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#42, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).167), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#42, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).170), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).168), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:43: 109:43 (#42), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).169), res: Def(Mod, DefId(1:76 ~ core[7d5a]::u64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:43: 109:50 (#42) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:42: 109:51 (#42) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:51 (#42) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:53 (#42) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:23: 109:53 (#42) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).171), kind: MethodCall(PathSegment { ident: len#42, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).172), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).173), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:516:44: 516:47 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).4)), segments: [PathSegment { ident: msg#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).174), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:516:44: 516:47 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:62: 109:67 (#42)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:57: 109:67 (#42) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).163), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:516:49: 516:50 (#0), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).142)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).164), res: Local(HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).142)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:516:49: 516:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).165), kind: Call(Expr { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:51 (#42), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#42, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).167), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#42, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).170), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).168), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:43: 109:43 (#42), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:87 ~ siphasher[0a55]::sip::{impl#7}::write).169), res: Def(Mod, DefId(1:76 ~ core[7d5a]::u64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:43: 109:50 (#42) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:42: 109:51 (#42) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:51 (#42) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:109:28: 109:53 (#42) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2591 ~ core[7d5a]::ptr::const_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25139 ~ core[7d5a]::num::{impl#9}::to_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ siphasher[0a55]::sip::Sip::c_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:14 ~ siphasher[0a55]::sip::u8to64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).13), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:51: 533:53 (#0) }, Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).14), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:43: 533:44 (#0) }, Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).15), kind: Cast(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).16), kind: Field(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:24: 533:28 (#0), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).18), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:24: 533:28 (#0) }, length#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:24: 533:35 (#0) }, Ty { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:39: 533:42 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).20), res: Def(Mod, DefId(1:76 ~ core[7d5a]::u64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:39: 533:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:24: 533:42 (#0) }, Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).21), kind: Lit(Spanned { node: Int(Pu128(255), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:45: 533:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:45: 533:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:23: 533:50 (#0) }, Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).22), kind: Lit(Spanned { node: Int(Pu128(56), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:54: 533:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:54: 533:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:22: 533:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).23), kind: Field(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:60: 533:64 (#0), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).25), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:60: 533:64 (#0) }, tail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:60: 533:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).14), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:43: 533:44 (#0) }, Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).15), kind: Cast(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).16), kind: Field(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:24: 533:28 (#0), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).18), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:24: 533:28 (#0) }, length#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:24: 533:35 (#0) }, Ty { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:39: 533:42 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).20), res: Def(Mod, DefId(1:76 ~ core[7d5a]::u64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:39: 533:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:24: 533:42 (#0) }, Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).21), kind: Lit(Spanned { node: Int(Pu128(255), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:45: 533:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:45: 533:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:23: 533:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).22), kind: Lit(Spanned { node: Int(Pu128(56), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:54: 533:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:54: 533:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).15), kind: Cast(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).16), kind: Field(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:24: 533:28 (#0), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).18), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:24: 533:28 (#0) }, length#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:24: 533:35 (#0) }, Ty { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:39: 533:42 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).20), res: Def(Mod, DefId(1:76 ~ core[7d5a]::u64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:39: 533:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:24: 533:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).21), kind: Lit(Spanned { node: Int(Pu128(255), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:45: 533:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:533:45: 533:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ siphasher[0a55]::sip::Sip::c_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ siphasher[0a55]::sip::Sip::d_rounds)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).67), kind: Binary(Spanned { node: BitXor, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:29: 542:30 (#0) }, Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).68), kind: Binary(Spanned { node: BitXor, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:18: 542:19 (#0) }, Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).69), kind: Field(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:9: 542:14 (#0), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).71), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:9: 542:14 (#0) }, v0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:9: 542:17 (#0) }, Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).72), kind: Field(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:20: 542:25 (#0), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).74), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:20: 542:25 (#0) }, v1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:20: 542:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:9: 542:28 (#0) }, Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).75), kind: Field(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:31: 542:36 (#0), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).77), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:31: 542:36 (#0) }, v2#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:31: 542:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:9: 542:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).78), kind: Field(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:42: 542:47 (#0), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).80), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:42: 542:47 (#0) }, v3#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:42: 542:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).68), kind: Binary(Spanned { node: BitXor, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:18: 542:19 (#0) }, Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).69), kind: Field(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:9: 542:14 (#0), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).71), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:9: 542:14 (#0) }, v0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:9: 542:17 (#0) }, Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).72), kind: Field(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:20: 542:25 (#0), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).74), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:20: 542:25 (#0) }, v1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:20: 542:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:9: 542:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).75), kind: Field(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:31: 542:36 (#0), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).77), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:31: 542:36 (#0) }, v2#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:31: 542:39 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).69), kind: Field(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:9: 542:14 (#0), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).71), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:9: 542:14 (#0) }, v0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:9: 542:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).72), kind: Field(Expr { hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:20: 542:25 (#0), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).74), res: Local(HirId(DefId(0:88 ~ siphasher[0a55]::sip::{impl#7}::finish).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:20: 542:25 (#0) }, v1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip.rs:542:20: 542:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:91 ~ siphasher[0a55]::sip::{impl#8}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:53 ~ siphasher[0a55]::sip::{impl#3}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:286 ~ siphasher[0a55]::sip::{impl#29}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:288 ~ siphasher[0a55]::sip::{impl#30}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:291 ~ siphasher[0a55]::sip::{impl#32}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ siphasher[0a55]::sip::{impl#9}::c_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ siphasher[0a55]::sip::{impl#9}::d_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:295 ~ siphasher[0a55]::sip::{impl#33}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:297 ~ siphasher[0a55]::sip::{impl#34}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:300 ~ siphasher[0a55]::sip::{impl#36}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:99 ~ siphasher[0a55]::sip::{impl#10}::c_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:100 ~ siphasher[0a55]::sip::{impl#10}::d_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:305 ~ siphasher[0a55]::sip128::{impl#19}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:307 ~ siphasher[0a55]::sip128::{impl#20}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:310 ~ siphasher[0a55]::sip128::{impl#22}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:110 ~ siphasher[0a55]::sip128::{impl#0}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:110 ~ siphasher[0a55]::sip128::{impl#0}::from).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:33:18: 33:19 (#0), res: Local(HirId(DefId(0:110 ~ siphasher[0a55]::sip128::{impl#0}::from).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:110 ~ siphasher[0a55]::sip128::{impl#0}::from).15), res: Local(HirId(DefId(0:110 ~ siphasher[0a55]::sip128::{impl#0}::from).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:33:18: 33:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:110 ~ siphasher[0a55]::sip128::{impl#0}::from).16), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:33:23: 33:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:33:23: 33:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).4), kind: Cast(Expr { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).5), kind: Field(Expr { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:10: 40:11 (#0), res: Local(HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).2)), segments: [PathSegment { ident: h#0, hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).7), res: Local(HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:10: 40:11 (#0) }, h1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:10: 40:14 (#0) }, Ty { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:18: 40:22 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).9), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:18: 40:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:9: 40:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).10), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:42: 40:44 (#0) }, Expr { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).11), kind: Cast(Expr { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).12), kind: Field(Expr { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:28: 40:29 (#0), res: Local(HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).2)), segments: [PathSegment { ident: h#0, hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).14), res: Local(HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:28: 40:29 (#0) }, h2#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:28: 40:32 (#0) }, Ty { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:36: 40:40 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).16), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:36: 40:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:27: 40:41 (#0) }, Expr { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).17), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:45: 40:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:45: 40:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:26: 40:48 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).11), kind: Cast(Expr { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).12), kind: Field(Expr { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:28: 40:29 (#0), res: Local(HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).2)), segments: [PathSegment { ident: h#0, hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).14), res: Local(HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:28: 40:29 (#0) }, h2#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:28: 40:32 (#0) }, Ty { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:36: 40:40 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).16), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:36: 40:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:27: 40:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:112 ~ siphasher[0a55]::sip128::{impl#1}::from).17), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:45: 40:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:40:45: 40:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:314 ~ siphasher[0a55]::sip128::{impl#23}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:316 ~ siphasher[0a55]::sip128::{impl#24}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:319 ~ siphasher[0a55]::sip128::{impl#26}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:323 ~ siphasher[0a55]::sip128::{impl#27}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:325 ~ siphasher[0a55]::sip128::{impl#28}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:328 ~ siphasher[0a55]::sip128::{impl#30}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:333 ~ siphasher[0a55]::sip128::{impl#31}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:335 ~ siphasher[0a55]::sip128::{impl#32}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:338 ~ siphasher[0a55]::sip128::{impl#34}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:350 ~ siphasher[0a55]::sip128::{impl#35}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11206 ~ core[7d5a]::fmt::{impl#9}::debug_struct_fields_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ siphasher[0a55]::sip128::{impl#37}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11202 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field4_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:361 ~ siphasher[0a55]::sip128::{impl#38}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:143:19: 143:22 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).6)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).14), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:143:19: 143:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).15), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:143:25: 143:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:143:25: 143:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).39), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:146:10: 146:11 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:146:8: 146:9 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).41), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:146:8: 146:9 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).42), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:146:12: 146:13 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:146:12: 146:13 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:146:8: 146:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:146:16: 146:19 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).6)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).44), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:146:16: 146:19 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:146:8: 146:9 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).41), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:146:8: 146:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).42), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:146:12: 146:13 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:146:12: 146:13 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"siphasher"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).57), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:26: 125:27 (#100) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).58), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:39: 147:40 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:33: 147:38 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).60), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:33: 147:38 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:41: 147:42 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).62), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:41: 147:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:33: 147:42 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).63), kind: Call(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:51 (#100), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#100, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).65), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#100, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).68), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:43: 125:43 (#100), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).67), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:43: 125:50 (#100) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:42: 125:51 (#100) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:51 (#100) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:53 (#100) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:23: 125:53 (#100) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).69), kind: MethodCall(PathSegment { ident: len#100, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).70), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:28: 147:31 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).2)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).72), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:28: 147:31 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:62: 125:67 (#100)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:57: 125:67 (#100) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).58), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:39: 147:40 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:33: 147:38 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).60), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:33: 147:38 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:41: 147:42 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).62), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:41: 147:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:33: 147:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).63), kind: Call(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:51 (#100), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#100, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).65), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#100, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).68), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:43: 125:43 (#100), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).67), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:43: 125:50 (#100) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:42: 125:51 (#100) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:51 (#100) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:53 (#100) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:33: 147:38 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).60), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:33: 147:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:41: 147:42 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).62), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:41: 147:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2591 ~ core[7d5a]::ptr::const_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:33: 147:38 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).105), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:33: 147:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).106), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:41: 147:42 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).107), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:147:41: 147:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25013 ~ core[7d5a]::num::{impl#8}::to_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).143), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:150:10: 150:11 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).144), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:150:8: 150:9 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).145), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:150:8: 150:9 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).146), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:150:12: 150:13 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:150:12: 150:13 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:150:8: 150:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).147), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:150:16: 150:19 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).6)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).148), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:150:16: 150:19 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).144), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:150:8: 150:9 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).145), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:150:8: 150:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).146), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:150:12: 150:13 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:150:12: 150:13 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).154), kind: Cast(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).155), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).190), kind: Semi(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).156), kind: If(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).158), kind: DropTemps(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).157), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:334:12: 334:42 (#107) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:334:12: 334:42 (#107) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:334:12: 334:42 (#205) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).189), kind: Block(Block { stmts: [Stmt { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).187), kind: Semi(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).159), kind: If(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).178), kind: DropTemps(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).160), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).161), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:54: 125:56 (#105) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).162), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:26: 125:27 (#105) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).163), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:41: 151:42 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:40 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).165), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:40 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:43: 151:44 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).167), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:43: 151:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:44 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).168), kind: Call(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:51 (#105), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).170), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).173), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:43: 125:43 (#105), res: PrimTy(Uint(U16)), segments: [PathSegment { ident: u16#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).172), res: PrimTy(Uint(U16)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:43: 125:50 (#105) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:42: 125:51 (#105) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:51 (#105) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:53 (#105) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:23: 125:53 (#105) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).174), kind: MethodCall(PathSegment { ident: len#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).175), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).176), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:30: 151:33 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).2)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).177), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:30: 151:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:62: 125:67 (#105)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:57: 125:67 (#105) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:23: 125:67 (#105) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#108) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#208) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).186), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).179), kind: Call(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:13 (#108), res: Def(Fn, DefId(1:10023 ~ core[7d5a]::panicking::panic)), segments: [PathSegment { ident: $crate#109, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).181), res: Err, args: None, infer_args: true }, PathSegment { ident: panicking#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).182), res: Def(Mod, DefId(1:10010 ~ core[7d5a]::panicking)), args: None, infer_args: true }, PathSegment { ident: panic#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).183), res: Def(Fn, DefId(1:10023 ~ core[7d5a]::panicking::panic)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#108) }, [Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).184), kind: Lit(Spanned { node: Str("assertion failed: start + i + mem::size_of::<u16>() <= buf.len()", Cooked), span: no-location (#0) }), span: no-location (#0) }]), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#108) }), hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).185), rules: DefaultBlock, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#108), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#108) }, None), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#108) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:335:13: 335:38 (#108) }], expr: None, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).188), rules: DefaultBlock, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:334:43: 336:10 (#106), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:334:43: 336:10 (#106) }, None), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:334:9: 336:10 (#106) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:334:9: 336:10 (#106) }, Stmt { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).191), kind: Let(LetStmt { pat: Pat { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).197), kind: Binding(BindingMode(No, Mut), HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).197), data#105, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:126:13: 126:21 (#105), default_binding_modes: true }, ty: None, init: Some(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).192), kind: Cast(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).193), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:126:24: 126:25 (#105) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:126:24: 126:25 (#105) }, Ty { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).194), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:126:29: 126:29 (#105), res: PrimTy(Uint(U16)), segments: [PathSegment { ident: u16#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).195), res: PrimTy(Uint(U16)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:126:29: 126:36 (#105) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:126:24: 126:36 (#105) }), els: None, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).196), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:126:9: 126:37 (#105), source: Normal }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:126:9: 126:37 (#105) }, Stmt { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).229), kind: Semi(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).198), kind: Call(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:127:9: 127:33 (#105), res: Def(Fn, DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)), segments: [PathSegment { ident: ptr#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).200), res: Def(Mod, DefId(1:2224 ~ core[7d5a]::ptr)), args: None, infer_args: true }, PathSegment { ident: copy_nonoverlapping#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).201), res: Def(Fn, DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:127:9: 127:33 (#105) }, [Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).202), kind: MethodCall(PathSegment { ident: add#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).203), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).204), kind: MethodCall(PathSegment { ident: as_ptr#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).205), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).206), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:30: 151:33 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).2)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).207), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:30: 151:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:128:18: 128:26 (#105)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:128:13: 128:26 (#105) }, [Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).208), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:41: 151:42 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:40 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).210), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:40 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).211), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:43: 151:44 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).212), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:43: 151:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:44 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:128:27: 128:34 (#105)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:128:13: 128:34 (#105) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).213), kind: Cast(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).214), kind: Cast(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).215), kind: AddrOf(Ref, Mut, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).216), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:129:18: 129:22 (#105), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).197)), segments: [PathSegment { ident: data#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).217), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).197)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:129:18: 129:22 (#105) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:129:13: 129:22 (#105) }, Ty { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).219), kind: Ptr(MutTy { ty: Ty { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).218), kind: Infer, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:129:31: 129:32 (#105) }, mutbl: Mut }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:129:26: 129:32 (#105) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:129:13: 129:32 (#105) }, Ty { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).222), kind: Ptr(MutTy { ty: Ty { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).220), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:129:41: 129:43 (#105), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).221), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:129:41: 129:43 (#105) }, mutbl: Mut }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:129:36: 129:43 (#105) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:129:13: 129:43 (#105) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).223), kind: Call(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).224), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:130:13: 130:36 (#105), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).225), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).228), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).226), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:130:28: 130:28 (#105), res: PrimTy(Uint(U16)), segments: [PathSegment { ident: u16#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).227), res: PrimTy(Uint(U16)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:130:28: 130:35 (#105) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:130:27: 130:36 (#105) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:130:13: 130:36 (#105) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:130:13: 130:38 (#105) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:127:9: 131:10 (#105) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:127:9: 131:11 (#105) }], expr: Some(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).230), kind: MethodCall(PathSegment { ident: to_le#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).231), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).232), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:132:9: 132:13 (#105), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).197)), segments: [PathSegment { ident: data#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).233), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).197)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:132:9: 132:13 (#105) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:132:14: 132:21 (#105)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:132:9: 132:21 (#105) }), hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).234), rules: DefaultBlock, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:124:45: 133:6 (#105), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:124:45: 133:6 (#105) }, Ty { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).235), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:54: 151:57 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).236), res: Def(Mod, DefId(1:76 ~ core[7d5a]::u64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:54: 151:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:16: 151:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).237), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:65: 151:66 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).238), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:63: 151:64 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).239), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:63: 151:64 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).240), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:67: 151:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:67: 151:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:62: 151:69 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"siphasher"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).162), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:26: 125:27 (#105) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).163), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:41: 151:42 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:40 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).165), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:40 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:43: 151:44 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).167), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:43: 151:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:44 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).168), kind: Call(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:51 (#105), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).170), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).173), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:43: 125:43 (#105), res: PrimTy(Uint(U16)), segments: [PathSegment { ident: u16#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).172), res: PrimTy(Uint(U16)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:43: 125:50 (#105) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:42: 125:51 (#105) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:51 (#105) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:53 (#105) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:23: 125:53 (#105) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).174), kind: MethodCall(PathSegment { ident: len#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).175), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).176), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:30: 151:33 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).2)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).177), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:30: 151:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:62: 125:67 (#105)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:57: 125:67 (#105) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).163), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:41: 151:42 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:40 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).165), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:40 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:43: 151:44 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).167), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:43: 151:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).168), kind: Call(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:51 (#105), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).170), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#105, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).173), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:43: 125:43 (#105), res: PrimTy(Uint(U16)), segments: [PathSegment { ident: u16#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).172), res: PrimTy(Uint(U16)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:43: 125:50 (#105) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:42: 125:51 (#105) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:51 (#105) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:53 (#105) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:40 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).165), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:43: 151:44 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).167), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:43: 151:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2591 ~ core[7d5a]::ptr::const_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:40 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).210), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:35: 151:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).211), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:43: 151:44 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).212), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:43: 151:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:24887 ~ core[7d5a]::num::{impl#7}::to_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).238), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:63: 151:64 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).239), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:63: 151:64 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).240), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:67: 151:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:151:67: 151:68 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).251), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:154:8: 154:9 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).252), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:154:8: 154:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).253), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:154:12: 154:15 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).6)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).254), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:154:12: 154:15 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).260), kind: Cast(Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).261), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).262), kind: MethodCall(PathSegment { ident: get_unchecked#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).263), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).264), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:18: 155:21 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).2)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).265), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:18: 155:21 (#0) }, [Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).266), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:42: 155:43 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).267), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:36: 155:41 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).268), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:36: 155:41 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).269), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:44: 155:45 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).270), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:44: 155:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:36: 155:45 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:22: 155:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:18: 155:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:17: 155:46 (#0) }, Ty { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).271), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:50: 155:53 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).272), res: Def(Mod, DefId(1:76 ~ core[7d5a]::u64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:50: 155:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:16: 155:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).273), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:61: 155:62 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).274), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:59: 155:60 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).275), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:59: 155:60 (#0) }, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).276), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:63: 155:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:63: 155:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:58: 155:65 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).267), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:36: 155:41 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).268), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:36: 155:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).269), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:44: 155:45 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).270), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:44: 155:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).274), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:59: 155:60 (#0), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).275), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:59: 155:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).276), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:63: 155:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:155:63: 155:64 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).305), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).306), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#112), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).297)), segments: [PathSegment { ident: left_val#112, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).307), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).297)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#112) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#112) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).308), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).309), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#112), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).298)), segments: [PathSegment { ident: right_val#112, hir_id: HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).310), res: Local(HirId(DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le).298)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#112) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#112) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:119 ~ siphasher[0a55]::sip128::{impl#2}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ siphasher[0a55]::sip128::{impl#2}::new_with_keys)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ siphasher[0a55]::sip128::{impl#2}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:148 ~ siphasher[0a55]::sip128::{impl#6}::new_with_keys)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ siphasher[0a55]::sip128::{impl#2}::new_with_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25234 ~ core[7d5a]::num::{impl#9}::from_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25234 ~ core[7d5a]::num::{impl#9}::from_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ siphasher[0a55]::sip128::{impl#2}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ siphasher[0a55]::sip128::{impl#2}::keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ siphasher[0a55]::sip128::{impl#2}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25228 ~ core[7d5a]::num::{impl#9}::to_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25228 ~ core[7d5a]::num::{impl#9}::to_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ siphasher[b4a4]::sip128::{impl#2}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11366 ~ core[7d5a]::hash::Hasher::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:131 ~ siphasher[b4a4]::sip128::{impl#3}::finish128)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:117 ~ siphasher[b4a4]::sip128::Hasher128::finish128)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:133 ~ siphasher[b4a4]::sip128::{impl#4}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:134 ~ siphasher[b4a4]::sip128::{impl#4}::new_with_keys)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:134 ~ siphasher[b4a4]::sip128::{impl#4}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:162 ~ siphasher[0a55]::sip128::{impl#8}::new_with_keys)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:135 ~ siphasher[0a55]::sip128::{impl#4}::new_with_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25234 ~ core[7d5a]::num::{impl#9}::from_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25234 ~ core[7d5a]::num::{impl#9}::from_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:134 ~ siphasher[b4a4]::sip128::{impl#4}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:139 ~ siphasher[0a55]::sip128::{impl#4}::keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:140 ~ siphasher[0a55]::sip128::{impl#4}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25228 ~ core[7d5a]::num::{impl#9}::to_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25228 ~ core[7d5a]::num::{impl#9}::to_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ siphasher[0a55]::sip128::{impl#4}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11366 ~ core[7d5a]::hash::Hasher::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:145 ~ siphasher[0a55]::sip128::{impl#5}::finish128)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:147 ~ siphasher[0a55]::sip128::{impl#6}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:148 ~ siphasher[b4a4]::sip128::{impl#6}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:148 ~ siphasher[0a55]::sip128::{impl#6}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:162 ~ siphasher[0a55]::sip128::{impl#8}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:149 ~ siphasher[0a55]::sip128::{impl#6}::new_with_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25234 ~ core[7d5a]::num::{impl#9}::from_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25234 ~ core[7d5a]::num::{impl#9}::from_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:148 ~ siphasher[0a55]::sip128::{impl#6}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:153 ~ siphasher[0a55]::sip128::{impl#6}::keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:154 ~ siphasher[0a55]::sip128::{impl#6}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25228 ~ core[7d5a]::num::{impl#9}::to_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25228 ~ core[7d5a]::num::{impl#9}::to_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:157 ~ siphasher[b4a4]::sip128::{impl#6}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11366 ~ core[7d5a]::hash::Hasher::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:159 ~ siphasher[0a55]::sip128::{impl#7}::finish128)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:162 ~ siphasher[0a55]::sip128::{impl#8}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset).15), kind: Field(Expr { hir_id: HirId(DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:357:25: 357:29 (#0), res: Local(HirId(DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset).17), res: Local(HirId(DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:357:25: 357:29 (#0) }, k0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:357:25: 357:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset).18), kind: Lit(Spanned { node: Int(Pu128(8317987319222330741), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:357:35: 357:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:357:35: 357:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset).26), kind: Field(Expr { hir_id: HirId(DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:358:25: 358:29 (#0), res: Local(HirId(DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset).28), res: Local(HirId(DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:358:25: 358:29 (#0) }, k1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:358:25: 358:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset).29), kind: Lit(Spanned { node: Int(Pu128(7237128888997146499), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:358:35: 358:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:358:35: 358:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ siphasher[b4a4]::sip128::{impl#8}::reset).37), kind: Field(Expr { hir_id: HirId(DefId(0:163 ~ siphasher[b4a4]::sip128::{impl#8}::reset).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:359:25: 359:29 (#0), res: Local(HirId(DefId(0:163 ~ siphasher[b4a4]::sip128::{impl#8}::reset).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:163 ~ siphasher[b4a4]::sip128::{impl#8}::reset).39), res: Local(HirId(DefId(0:163 ~ siphasher[b4a4]::sip128::{impl#8}::reset).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:359:25: 359:29 (#0) }, k0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:359:25: 359:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset).40), kind: Lit(Spanned { node: Int(Pu128(7816392313619706465), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:359:35: 359:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:359:35: 359:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ siphasher[0a55]::sip128::{impl#8}::reset).48), kind: Field(Expr { hir_id: HirId(DefId(0:163 ~ siphasher[b4a4]::sip128::{impl#8}::reset).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:360:25: 360:29 (#0), res: Local(HirId(DefId(0:163 ~ siphasher[b4a4]::sip128::{impl#8}::reset).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:163 ~ siphasher[b4a4]::sip128::{impl#8}::reset).50), res: Local(HirId(DefId(0:163 ~ siphasher[b4a4]::sip128::{impl#8}::reset).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:360:25: 360:29 (#0) }, k1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:360:25: 360:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ siphasher[b4a4]::sip128::{impl#8}::reset).51), kind: Lit(Spanned { node: Int(Pu128(8387220255154660723), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:360:35: 360:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:360:35: 360:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:26: 381:30 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).15)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).31), res: Local(HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:26: 381:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).32), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:33: 381:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:33: 381:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).35), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:39: 381:41 (#0) }, Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:37: 381:38 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).6)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).37), res: Local(HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:37: 381:38 (#0) }, Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).38), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:45: 381:46 (#0) }, Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).39), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:43: 381:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:43: 381:44 (#0) }, Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:47: 381:51 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).15)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).41), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:47: 381:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:42: 381:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:37: 381:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).42), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:56: 381:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:56: 381:57 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:37: 381:38 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).6)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).37), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:37: 381:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).38), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:45: 381:46 (#0) }, Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).39), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:43: 381:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:43: 381:44 (#0) }, Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:47: 381:51 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).15)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).41), res: Local(HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:47: 381:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:42: 381:52 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).39), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:43: 381:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:43: 381:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:47: 381:51 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).15)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).41), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:381:47: 381:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).63), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:384:22: 384:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:384:22: 384:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).64), kind: Field(Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:384:26: 384:30 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).66), res: Local(HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:384:26: 384:30 (#0) }, ntail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:384:26: 384:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:386:22: 386:23 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).6)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).75), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:386:22: 386:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).76), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:386:30: 386:31 (#0) }, Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).77), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:386:28: 386:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:386:28: 386:29 (#0) }, Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).78), kind: Field(Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:386:32: 386:36 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).80), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:386:32: 386:36 (#0) }, ntail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:386:32: 386:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:386:27: 386:43 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).77), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:386:28: 386:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:386:28: 386:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).78), kind: Field(Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:386:32: 386:36 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).80), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:386:32: 386:36 (#0) }, ntail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:386:32: 386:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:387:12: 387:16 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).15)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).85), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:387:12: 387:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:387:19: 387:25 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).68)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).87), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).68)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:387:19: 387:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:208 ~ siphasher[0a55]::sip128::Sip::c_rounds)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:397:22: 397:26 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).15)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).135), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:397:22: 397:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:397:29: 397:35 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).68)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).137), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).68)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:397:29: 397:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).145), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:24: 398:30 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).68)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).146), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).68)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:24: 398:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).147), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:33: 398:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:33: 398:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:37: 398:38 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).6)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).151), res: Local(HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:37: 398:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).152), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:45: 398:46 (#0) }, Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).153), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:43: 398:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:43: 398:44 (#0) }, Expr { hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).154), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:47: 398:53 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).68)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write).155), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).68)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:47: 398:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:42: 398:54 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).153), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:43: 398:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:43: 398:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).154), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:47: 398:53 (#0), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).68)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).155), res: Local(HirId(DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write).68)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:398:47: 398:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).13), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:51: 407:53 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).14), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:43: 407:44 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).15), kind: Cast(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).16), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:24: 407:28 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).18), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:24: 407:28 (#0) }, length#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:24: 407:35 (#0) }, Ty { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:39: 407:42 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).20), res: Def(Mod, DefId(1:76 ~ core[7d5a]::u64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:39: 407:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:24: 407:42 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).21), kind: Lit(Spanned { node: Int(Pu128(255), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:45: 407:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:45: 407:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:23: 407:50 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).22), kind: Lit(Spanned { node: Int(Pu128(56), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:54: 407:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:54: 407:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:22: 407:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).23), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:60: 407:64 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).25), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:60: 407:64 (#0) }, tail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:60: 407:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).14), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:43: 407:44 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).15), kind: Cast(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).16), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:24: 407:28 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).18), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:24: 407:28 (#0) }, length#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:24: 407:35 (#0) }, Ty { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:39: 407:42 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).20), res: Def(Mod, DefId(1:76 ~ core[7d5a]::u64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:39: 407:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:24: 407:42 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).21), kind: Lit(Spanned { node: Int(Pu128(255), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:45: 407:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:45: 407:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:23: 407:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).22), kind: Lit(Spanned { node: Int(Pu128(56), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:54: 407:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:54: 407:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).15), kind: Cast(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).16), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:24: 407:28 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).18), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:24: 407:28 (#0) }, length#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:24: 407:35 (#0) }, Ty { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:39: 407:42 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).20), res: Def(Mod, DefId(1:76 ~ core[7d5a]::u64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:39: 407:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:24: 407:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).21), kind: Lit(Spanned { node: Int(Pu128(255), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:45: 407:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:407:45: 407:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:208 ~ siphasher[b4a4]::sip128::Sip::c_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:209 ~ siphasher[b4a4]::sip128::Sip::d_rounds)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).68), kind: Binary(Spanned { node: BitXor, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:38: 415:39 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).69), kind: Binary(Spanned { node: BitXor, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:27: 415:28 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).70), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:18: 415:23 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).72), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:18: 415:23 (#0) }, v0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:18: 415:26 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).73), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:29: 415:34 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).75), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:29: 415:34 (#0) }, v1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:29: 415:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:18: 415:37 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).76), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:40: 415:45 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).78), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:40: 415:45 (#0) }, v2#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:40: 415:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:18: 415:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).79), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:51: 415:56 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).81), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:51: 415:56 (#0) }, v3#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:51: 415:59 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).69), kind: Binary(Spanned { node: BitXor, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:27: 415:28 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).70), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:18: 415:23 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).72), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:18: 415:23 (#0) }, v0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:18: 415:26 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).73), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:29: 415:34 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).75), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:29: 415:34 (#0) }, v1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:29: 415:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:18: 415:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).76), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:40: 415:45 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).78), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:40: 415:45 (#0) }, v2#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:40: 415:48 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).70), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:18: 415:23 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).72), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:18: 415:23 (#0) }, v0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:18: 415:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).73), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:29: 415:34 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).75), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:29: 415:34 (#0) }, v1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:415:29: 415:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:209 ~ siphasher[b4a4]::sip128::Sip::d_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).101), kind: Binary(Spanned { node: BitXor, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:38: 419:39 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).102), kind: Binary(Spanned { node: BitXor, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:27: 419:28 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).103), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:18: 419:23 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).105), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:18: 419:23 (#0) }, v0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:18: 419:26 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).106), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:29: 419:34 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).108), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:29: 419:34 (#0) }, v1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:29: 419:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:18: 419:37 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).109), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:40: 419:45 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).111), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:40: 419:45 (#0) }, v2#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:40: 419:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:18: 419:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).112), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:51: 419:56 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).114), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:51: 419:56 (#0) }, v3#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:51: 419:59 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).102), kind: Binary(Spanned { node: BitXor, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:27: 419:28 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).103), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:18: 419:23 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).105), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:18: 419:23 (#0) }, v0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:18: 419:26 (#0) }, Expr { hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).106), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:29: 419:34 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).108), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:29: 419:34 (#0) }, v1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:29: 419:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:18: 419:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).109), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:40: 419:45 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).111), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:40: 419:45 (#0) }, v2#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:40: 419:48 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).103), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:18: 419:23 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).105), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:18: 419:23 (#0) }, v0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:18: 419:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).106), kind: Field(Expr { hir_id: HirId(DefId(0:168 ~ siphasher[0a55]::sip128::{impl#9}::finish128).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:29: 419:34 (#0), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).108), res: Local(HirId(DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:29: 419:34 (#0) }, v1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:419:29: 419:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:170 ~ siphasher[b4a4]::sip128::{impl#10}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11366 ~ core[7d5a]::hash::Hasher::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:171 ~ siphasher[0a55]::sip128::{impl#10}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11365 ~ core[7d5a]::hash::Hasher::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:172 ~ siphasher[b4a4]::sip128::{impl#10}::write_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11372 ~ core[7d5a]::hash::Hasher::write_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:173 ~ siphasher[0a55]::sip128::{impl#10}::write_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11367 ~ core[7d5a]::hash::Hasher::write_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:174 ~ siphasher[0a55]::sip128::{impl#10}::write_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11368 ~ core[7d5a]::hash::Hasher::write_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:175 ~ siphasher[0a55]::sip128::{impl#10}::write_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11369 ~ core[7d5a]::hash::Hasher::write_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:176 ~ siphasher[b4a4]::sip128::{impl#10}::write_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11370 ~ core[7d5a]::hash::Hasher::write_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:178 ~ siphasher[0a55]::sip128::{impl#11}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11366 ~ core[7d5a]::hash::Hasher::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:179 ~ siphasher[0a55]::sip128::{impl#11}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11365 ~ core[7d5a]::hash::Hasher::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:180 ~ siphasher[b4a4]::sip128::{impl#11}::write_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11372 ~ core[7d5a]::hash::Hasher::write_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:181 ~ siphasher[0a55]::sip128::{impl#11}::write_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11367 ~ core[7d5a]::hash::Hasher::write_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:182 ~ siphasher[0a55]::sip128::{impl#11}::write_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11368 ~ core[7d5a]::hash::Hasher::write_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:183 ~ siphasher[0a55]::sip128::{impl#11}::write_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11369 ~ core[7d5a]::hash::Hasher::write_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:184 ~ siphasher[0a55]::sip128::{impl#11}::write_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11370 ~ core[7d5a]::hash::Hasher::write_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:186 ~ siphasher[b4a4]::sip128::{impl#12}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11366 ~ core[7d5a]::hash::Hasher::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:187 ~ siphasher[b4a4]::sip128::{impl#12}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11365 ~ core[7d5a]::hash::Hasher::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ siphasher[0a55]::sip128::{impl#12}::write_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11372 ~ core[7d5a]::hash::Hasher::write_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ siphasher[0a55]::sip128::{impl#12}::write_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11367 ~ core[7d5a]::hash::Hasher::write_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:190 ~ siphasher[0a55]::sip128::{impl#12}::write_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11368 ~ core[7d5a]::hash::Hasher::write_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ siphasher[0a55]::sip128::{impl#12}::write_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11369 ~ core[7d5a]::hash::Hasher::write_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:192 ~ siphasher[0a55]::sip128::{impl#12}::write_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11370 ~ core[7d5a]::hash::Hasher::write_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:195 ~ siphasher[0a55]::sip128::{impl#13}::write_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25389 ~ core[7d5a]::num::{impl#11}::to_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:196 ~ siphasher[0a55]::sip128::{impl#13}::write_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:164 ~ siphasher[0a55]::sip128::{impl#8}::short_write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:197 ~ siphasher[b4a4]::sip128::{impl#13}::write_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25013 ~ core[7d5a]::num::{impl#8}::to_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:198 ~ siphasher[b4a4]::sip128::{impl#13}::write_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:164 ~ siphasher[b4a4]::sip128::{impl#8}::short_write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25139 ~ core[7d5a]::num::{impl#9}::to_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).25), kind: Field(Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:564:12: 564:16 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).27), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:564:12: 564:16 (#0) }, ntail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:564:12: 564:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).28), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:564:26: 564:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:564:26: 564:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).34), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:565:22: 565:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:565:22: 565:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).35), kind: Field(Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:565:26: 565:30 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).37), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:565:26: 565:30 (#0) }, ntail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:565:26: 565:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).44), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).45), kind: Call(Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:35: 566:44 (#0), res: Def(Fn, DefId(0:115 ~ siphasher[b4a4]::sip128::u8to64_le)), segments: [PathSegment { ident: u8to64_le#0, hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).47), res: Def(Fn, DefId(0:115 ~ siphasher[b4a4]::sip128::u8to64_le)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:35: 566:44 (#0) }, [Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:45: 566:48 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).4)), segments: [PathSegment { ident: msg#0, hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).49), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:45: 566:48 (#0) }, Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).50), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:50: 566:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:50: 566:51 (#0) }, Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).51), kind: Call(Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:53: 566:61 (#0), res: Def(Fn, DefId(1:3014 ~ core[7d5a]::cmp::min)), segments: [PathSegment { ident: cmp#0, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).53), res: Def(Mod, DefId(1:2955 ~ core[7d5a]::cmp)), args: None, infer_args: true }, PathSegment { ident: min#0, hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).54), res: Def(Fn, DefId(1:3014 ~ core[7d5a]::cmp::min)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:53: 566:61 (#0) }, [Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:62: 566:68 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).11)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).56), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:62: 566:68 (#0) }, Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:70: 566:76 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).22)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).58), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:70: 566:76 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:53: 566:77 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:35: 566:78 (#0) }), hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).59), rules: UnsafeBlock(UserProvided), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:26: 566:80 (#0), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:26: 566:80 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).60), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:87: 566:88 (#0) }, Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).61), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:85: 566:86 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:85: 566:86 (#0) }, Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).62), kind: Field(Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:89: 566:93 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).64), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:89: 566:93 (#0) }, ntail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:89: 566:99 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:84: 566:100 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).61), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:85: 566:86 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:85: 566:86 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).62), kind: Field(Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:89: 566:93 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).64), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:89: 566:93 (#0) }, ntail#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:566:89: 566:99 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:567:16: 567:22 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).11)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).69), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:567:16: 567:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:567:25: 567:31 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).22)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).71), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:567:25: 567:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:208 ~ siphasher[b4a4]::sip128::Sip::c_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:579:19: 579:25 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).11)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).126), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:579:19: 579:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:579:28: 579:34 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).22)), segments: [PathSegment { ident: needed#0, hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).128), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:579:28: 579:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:580:20: 580:23 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).130)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).134), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:580:20: 580:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).135), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:580:26: 580:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:580:26: 580:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"siphasher"}), Specific({"siphasher"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).145), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:583:15: 583:16 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).142)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).146), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).142)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:583:15: 583:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).147), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:583:23: 583:24 (#0) }, Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:583:19: 583:22 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).130)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).149), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:583:19: 583:22 (#0) }, Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:583:25: 583:29 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).137)), segments: [PathSegment { ident: left#0, hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).151), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).137)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:583:25: 583:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:583:19: 583:29 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:583:19: 583:22 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).130)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).149), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:583:19: 583:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:583:25: 583:29 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).137)), segments: [PathSegment { ident: left#0, hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).151), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).137)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:583:25: 583:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"siphasher"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).162), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:26: 125:27 (#117) }, Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).163), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:584:49: 584:50 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).142)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).164), res: Local(HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).142)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:584:49: 584:50 (#0) }, Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).165), kind: Call(Expr { hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:51 (#117), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#117, hir_id: HirId(DefId(0:199 ~ siphasher[b4a4]::sip128::{impl#13}::write).167), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#117, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).170), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).168), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:43: 125:43 (#117), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).169), res: Def(Mod, DefId(1:76 ~ core[7d5a]::u64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:43: 125:50 (#117) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:42: 125:51 (#117) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:51 (#117) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:53 (#117) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:23: 125:53 (#117) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).171), kind: MethodCall(PathSegment { ident: len#117, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).172), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).173), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:584:44: 584:47 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).4)), segments: [PathSegment { ident: msg#0, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).174), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:584:44: 584:47 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:62: 125:67 (#117)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:57: 125:67 (#117) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).163), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:584:49: 584:50 (#0), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).142)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).164), res: Local(HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).142)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:584:49: 584:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).165), kind: Call(Expr { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:51 (#117), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#117, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).167), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#117, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).170), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).168), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:43: 125:43 (#117), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:199 ~ siphasher[0a55]::sip128::{impl#13}::write).169), res: Def(Mod, DefId(1:76 ~ core[7d5a]::u64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:43: 125:50 (#117) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:42: 125:51 (#117) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:51 (#117) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:125:28: 125:53 (#117) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2591 ~ core[7d5a]::ptr::const_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25139 ~ core[7d5a]::num::{impl#9}::to_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:208 ~ siphasher[0a55]::sip128::Sip::c_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ siphasher[0a55]::sip128::u8to64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:200 ~ siphasher[0a55]::sip128::{impl#13}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:168 ~ siphasher[b4a4]::sip128::{impl#9}::finish128)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:203 ~ siphasher[0a55]::sip128::{impl#14}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:206 ~ siphasher[0a55]::sip128::{impl#15}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:162 ~ siphasher[0a55]::sip128::{impl#8}::new_with_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ siphasher[0a55]::sip128::{impl#40}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:368 ~ siphasher[0a55]::sip128::{impl#41}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:371 ~ siphasher[0a55]::sip128::{impl#43}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:211 ~ siphasher[0a55]::sip128::{impl#16}::c_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:212 ~ siphasher[0a55]::sip128::{impl#16}::d_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:375 ~ siphasher[0a55]::sip128::{impl#44}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:377 ~ siphasher[b4a4]::sip128::{impl#45}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:380 ~ siphasher[b4a4]::sip128::{impl#47}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:214 ~ siphasher[b4a4]::sip128::{impl#17}::c_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:215 ~ siphasher[0a55]::sip128::{impl#17}::d_rounds)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25132 ~ core[7d5a]::num::{impl#9}::rotate_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:217 ~ siphasher[b4a4]::sip128::{impl#18}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25139 ~ core[7d5a]::num::{impl#9}::to_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25139 ~ core[7d5a]::num::{impl#9}::to_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2689 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25139 ~ core[7d5a]::num::{impl#9}::to_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25139 ~ core[7d5a]::num::{impl#9}::to_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:220 ~ siphasher[b4a4]::sip128::{impl#18}::as_u128).20), kind: Cast(Expr { hir_id: HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:9: 686:11 (#0), res: Local(HirId(DefId(0:220 ~ siphasher[b4a4]::sip128::{impl#18}::as_u128).10)), segments: [PathSegment { ident: h1#0, hir_id: HirId(DefId(0:220 ~ siphasher[b4a4]::sip128::{impl#18}::as_u128).22), res: Local(HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:9: 686:11 (#0) }, Ty { hir_id: HirId(DefId(0:220 ~ siphasher[b4a4]::sip128::{impl#18}::as_u128).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:15: 686:19 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:220 ~ siphasher[b4a4]::sip128::{impl#18}::as_u128).24), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:15: 686:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:9: 686:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).25), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:36: 686:38 (#0) }, Expr { hir_id: HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).26), kind: Cast(Expr { hir_id: HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:24: 686:26 (#0), res: Local(HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).18)), segments: [PathSegment { ident: h2#0, hir_id: HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).28), res: Local(HirId(DefId(0:220 ~ siphasher[b4a4]::sip128::{impl#18}::as_u128).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:24: 686:26 (#0) }, Ty { hir_id: HirId(DefId(0:220 ~ siphasher[b4a4]::sip128::{impl#18}::as_u128).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:30: 686:34 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:220 ~ siphasher[b4a4]::sip128::{impl#18}::as_u128).30), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:30: 686:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:23: 686:35 (#0) }, Expr { hir_id: HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).31), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:39: 686:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:39: 686:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:22: 686:42 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).26), kind: Cast(Expr { hir_id: HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:24: 686:26 (#0), res: Local(HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).18)), segments: [PathSegment { ident: h2#0, hir_id: HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).28), res: Local(HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:24: 686:26 (#0) }, Ty { hir_id: HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:30: 686:34 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).30), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:30: 686:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:23: 686:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:220 ~ siphasher[0a55]::sip128::{impl#18}::as_u128).31), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:39: 686:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-0.3.11/src/sip128.rs:686:39: 686:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:221 ~ siphasher[b4a4]::sip128::{impl#18}::as_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25139 ~ core[7d5a]::num::{impl#9}::to_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25139 ~ core[7d5a]::num::{impl#9}::to_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
