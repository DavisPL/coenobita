[DEBUG] Trying to get func ty of defid DefId(0:133 ~ unicode_width[c01c]::tables::{impl#1}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:136 ~ unicode_width[c01c]::tables::{impl#3}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:139 ~ unicode_width[c01c]::tables::{impl#5}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:139 ~ unicode_width[c01c]::tables::{impl#5}::eq).6), kind: Field(Expr { hir_id: HirId(DefId(0:139 ~ unicode_width[c01c]::tables::{impl#5}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:15:30: 15:30 (#6), res: Local(HirId(DefId(0:139 ~ unicode_width[c01c]::tables::{impl#5}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:139 ~ unicode_width[c01c]::tables::{impl#5}::eq).8), res: Local(HirId(DefId(0:139 ~ unicode_width[c01c]::tables::{impl#5}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:15:30: 15:39 (#6) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:16:18: 16:21 (#6) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:139 ~ unicode_width[c01c]::tables::{impl#5}::eq).9), kind: Field(Expr { hir_id: HirId(DefId(0:139 ~ unicode_width[c01c]::tables::{impl#5}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:15:30: 15:39 (#6), res: Local(HirId(DefId(0:139 ~ unicode_width[c01c]::tables::{impl#5}::eq).4)), segments: [PathSegment { ident: other#6, hir_id: HirId(DefId(0:139 ~ unicode_width[c01c]::tables::{impl#5}::eq).11), res: Local(HirId(DefId(0:139 ~ unicode_width[c01c]::tables::{impl#5}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:15:30: 15:39 (#6) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:16:18: 16:21 (#6) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:141 ~ unicode_width[c01c]::tables::{impl#6}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent).4), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:66:17: 66:18 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent).5), kind: Field(Expr { hir_id: HirId(DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:66:10: 66:14 (#0), res: Local(HirId(DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent).7), res: Local(HirId(DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:66:10: 66:14 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:66:10: 66:16 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent).8), kind: Lit(Spanned { node: Int(Pu128(2048), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:66:19: 66:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:66:19: 66:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:66:9: 66:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent).9), kind: Lit(Spanned { node: Int(Pu128(2048), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:66:45: 66:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:66:45: 66:66 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent).5), kind: Field(Expr { hir_id: HirId(DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:66:10: 66:14 (#0), res: Local(HirId(DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent).7), res: Local(HirId(DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:66:10: 66:14 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:66:10: 66:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent).8), kind: Lit(Spanned { node: Int(Pu128(2048), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:66:19: 66:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:66:19: 66:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ unicode_width[c01c]::tables::{impl#0}::set_zwj_bit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:49 ~ unicode_width[c01c]::tables::{impl#0}::set_zwj_bit).7), kind: Field(Expr { hir_id: HirId(DefId(0:49 ~ unicode_width[c01c]::tables::{impl#0}::set_zwj_bit).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:71:14: 71:18 (#0), res: Local(HirId(DefId(0:49 ~ unicode_width[c01c]::tables::{impl#0}::set_zwj_bit).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:49 ~ unicode_width[c01c]::tables::{impl#0}::set_zwj_bit).9), res: Local(HirId(DefId(0:49 ~ unicode_width[c01c]::tables::{impl#0}::set_zwj_bit).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:71:14: 71:18 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:71:14: 71:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:49 ~ unicode_width[c01c]::tables::{impl#0}::set_zwj_bit).10), kind: Lit(Spanned { node: Int(Pu128(1024), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:71:23: 71:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:71:23: 71:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation).4), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:76:17: 76:18 (#0) }, Expr { hir_id: HirId(DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation).5), kind: Field(Expr { hir_id: HirId(DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:76:10: 76:14 (#0), res: Local(HirId(DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation).7), res: Local(HirId(DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:76:10: 76:14 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:76:10: 76:16 (#0) }, Expr { hir_id: HirId(DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation).8), kind: Lit(Spanned { node: Int(Pu128(32768), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:76:19: 76:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:76:19: 76:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:76:9: 76:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation).9), kind: Lit(Spanned { node: Int(Pu128(32768), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:76:45: 76:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:76:45: 76:66 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation).5), kind: Field(Expr { hir_id: HirId(DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:76:10: 76:14 (#0), res: Local(HirId(DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation).7), res: Local(HirId(DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:76:10: 76:14 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:76:10: 76:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation).8), kind: Lit(Spanned { node: Int(Pu128(32768), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:76:19: 76:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:76:19: 76:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation).4), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:81:17: 81:18 (#0) }, Expr { hir_id: HirId(DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation).5), kind: Field(Expr { hir_id: HirId(DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:81:10: 81:14 (#0), res: Local(HirId(DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation).7), res: Local(HirId(DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:81:10: 81:14 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:81:10: 81:16 (#0) }, Expr { hir_id: HirId(DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation).8), kind: Lit(Spanned { node: Int(Pu128(45056), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:81:19: 81:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:81:19: 81:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:81:9: 81:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation).9), kind: Lit(Spanned { node: Int(Pu128(36864), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:81:45: 81:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:81:45: 81:66 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation).5), kind: Field(Expr { hir_id: HirId(DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:81:10: 81:14 (#0), res: Local(HirId(DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation).7), res: Local(HirId(DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:81:10: 81:14 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:81:10: 81:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation).8), kind: Lit(Spanned { node: Int(Pu128(45056), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:81:19: 81:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:81:19: 81:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).5), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:45: 86:47 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).6), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:20: 86:21 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).7), kind: Field(Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:13: 86:17 (#0), res: Local(HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).9), res: Local(HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:13: 86:17 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:13: 86:19 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).10), kind: Lit(Spanned { node: Int(Pu128(8192), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:22: 86:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:22: 86:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:12: 86:44 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).11), kind: Lit(Spanned { node: Int(Pu128(8192), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:48: 86:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:48: 86:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:12: 86:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).12), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:49: 87:51 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).13), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:24: 87:25 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).14), kind: Field(Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:17: 87:21 (#0), res: Local(HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).16), res: Local(HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:17: 87:21 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:17: 87:23 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).17), kind: Lit(Spanned { node: Int(Pu128(36864), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:26: 87:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:26: 87:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:16: 87:48 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).18), kind: Lit(Spanned { node: Int(Pu128(4096), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:52: 87:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:52: 87:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:16: 87:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).6), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:20: 86:21 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).7), kind: Field(Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:13: 86:17 (#0), res: Local(HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).9), res: Local(HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:13: 86:17 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:13: 86:19 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).10), kind: Lit(Spanned { node: Int(Pu128(8192), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:22: 86:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:22: 86:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:12: 86:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).11), kind: Lit(Spanned { node: Int(Pu128(8192), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:48: 86:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:48: 86:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).7), kind: Field(Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:13: 86:17 (#0), res: Local(HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).9), res: Local(HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:13: 86:17 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:13: 86:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).10), kind: Lit(Spanned { node: Int(Pu128(8192), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:22: 86:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:86:22: 86:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).13), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:24: 87:25 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).14), kind: Field(Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:17: 87:21 (#0), res: Local(HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).16), res: Local(HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:17: 87:21 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:17: 87:23 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).17), kind: Lit(Spanned { node: Int(Pu128(36864), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:26: 87:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:26: 87:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:16: 87:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).18), kind: Lit(Spanned { node: Int(Pu128(4096), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:52: 87:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:52: 87:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).14), kind: Field(Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:17: 87:21 (#0), res: Local(HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).16), res: Local(HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:17: 87:21 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:17: 87:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).17), kind: Lit(Spanned { node: Int(Pu128(36864), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:26: 87:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:87:26: 87:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).24), kind: Field(Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:89:18: 89:22 (#0), res: Local(HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).26), res: Local(HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:89:18: 89:22 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:89:18: 89:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation).27), kind: Lit(Spanned { node: Int(Pu128(32768), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:89:27: 89:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:89:27: 89:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).5), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:97:20: 97:21 (#0) }, Expr { hir_id: HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).6), kind: Field(Expr { hir_id: HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:97:13: 97:17 (#0), res: Local(HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).8), res: Local(HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:97:13: 97:17 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:97:13: 97:19 (#0) }, Expr { hir_id: HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).9), kind: Lit(Spanned { node: Int(Pu128(8192), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:97:22: 97:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:97:22: 97:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:97:12: 97:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).10), kind: Lit(Spanned { node: Int(Pu128(8192), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:97:48: 97:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:97:48: 97:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).6), kind: Field(Expr { hir_id: HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:97:13: 97:17 (#0), res: Local(HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).8), res: Local(HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:97:13: 97:17 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:97:13: 97:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).9), kind: Lit(Spanned { node: Int(Pu128(8192), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:97:22: 97:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:97:22: 97:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).16), kind: Field(Expr { hir_id: HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:98:18: 98:22 (#0), res: Local(HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).18), res: Local(HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:98:18: 98:22 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:98:18: 98:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation).19), kind: Lit(Spanned { node: Int(Pu128(32767), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:98:27: 98:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:98:27: 98:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation).4), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:106:17: 106:18 (#0) }, Expr { hir_id: HirId(DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation).5), kind: Field(Expr { hir_id: HirId(DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:106:10: 106:14 (#0), res: Local(HirId(DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation).7), res: Local(HirId(DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:106:10: 106:14 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:106:10: 106:16 (#0) }, Expr { hir_id: HirId(DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation).8), kind: Lit(Spanned { node: Int(Pu128(16384), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:106:19: 106:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:106:19: 106:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:106:9: 106:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation).9), kind: Lit(Spanned { node: Int(Pu128(16384), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:106:45: 106:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:106:45: 106:66 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation).5), kind: Field(Expr { hir_id: HirId(DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:106:10: 106:14 (#0), res: Local(HirId(DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation).7), res: Local(HirId(DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:106:10: 106:14 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:106:10: 106:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation).8), kind: Lit(Spanned { node: Int(Pu128(16384), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:106:19: 106:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:106:19: 106:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).5), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:111:20: 111:21 (#0) }, Expr { hir_id: HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).6), kind: Field(Expr { hir_id: HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:111:13: 111:17 (#0), res: Local(HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).8), res: Local(HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:111:13: 111:17 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:111:13: 111:19 (#0) }, Expr { hir_id: HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).9), kind: Lit(Spanned { node: Int(Pu128(8192), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:111:22: 111:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:111:22: 111:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:111:12: 111:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).10), kind: Lit(Spanned { node: Int(Pu128(8192), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:111:48: 111:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:111:48: 111:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).6), kind: Field(Expr { hir_id: HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:111:13: 111:17 (#0), res: Local(HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).8), res: Local(HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:111:13: 111:17 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:111:13: 111:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).9), kind: Lit(Spanned { node: Int(Pu128(8192), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:111:22: 111:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:111:22: 111:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).16), kind: Field(Expr { hir_id: HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:112:18: 112:22 (#0), res: Local(HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).18), res: Local(HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:112:18: 112:22 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:112:18: 112:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation).19), kind: Lit(Spanned { node: Int(Pu128(16384), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:112:27: 112:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:112:27: 112:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:56 ~ unicode_width[c01c]::tables::{impl#0}::unset_text_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ unicode_width[c01c]::tables::{impl#0}::unset_text_presentation).7), kind: Field(Expr { hir_id: HirId(DefId(0:56 ~ unicode_width[c01c]::tables::{impl#0}::unset_text_presentation).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:120:14: 120:18 (#0), res: Local(HirId(DefId(0:56 ~ unicode_width[c01c]::tables::{impl#0}::unset_text_presentation).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:56 ~ unicode_width[c01c]::tables::{impl#0}::unset_text_presentation).9), res: Local(HirId(DefId(0:56 ~ unicode_width[c01c]::tables::{impl#0}::unset_text_presentation).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:120:14: 120:18 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:120:14: 120:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ unicode_width[c01c]::tables::{impl#0}::unset_text_presentation).10), kind: Lit(Spanned { node: Int(Pu128(49151), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:120:23: 120:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:120:23: 120:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).66), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:31: 154:33 (#0) }, Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:17: 154:30 (#0), res: Local(HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).63)), segments: [PathSegment { ident: packed_widths#0, hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).68), res: Local(HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).63)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:17: 154:30 (#0) }, Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).69), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:37: 154:38 (#0) }, Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).70), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:35: 154:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:35: 154:36 (#0) }, Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).71), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:43: 154:44 (#0) }, Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:40: 154:42 (#0), res: Local(HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).10)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).73), res: Local(HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:40: 154:42 (#0) }, Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).74), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:45: 154:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:45: 154:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:39: 154:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:34: 154:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:17: 154:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).75), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:54: 154:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:54: 154:58 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:17: 154:30 (#0), res: Local(HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).63)), segments: [PathSegment { ident: packed_widths#0, hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).68), res: Local(HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).63)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:17: 154:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).69), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:37: 154:38 (#0) }, Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).70), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:35: 154:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:35: 154:36 (#0) }, Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).71), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:43: 154:44 (#0) }, Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:40: 154:42 (#0), res: Local(HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).10)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).73), res: Local(HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:40: 154:42 (#0) }, Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).74), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:45: 154:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:45: 154:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:39: 154:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:34: 154:51 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).70), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:35: 154:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:35: 154:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).71), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:43: 154:44 (#0) }, Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:40: 154:42 (#0), res: Local(HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).10)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).73), res: Local(HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:40: 154:42 (#0) }, Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).74), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:45: 154:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:45: 154:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:39: 154:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:40: 154:42 (#0), res: Local(HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).10)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).73), res: Local(HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:40: 154:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).74), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:45: 154:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:154:45: 154:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:156:8: 156:13 (#0), res: Local(HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).77)), segments: [PathSegment { ident: width#0, hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).81), res: Local(HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).77)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:156:8: 156:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width).82), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:156:16: 156:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:156:16: 156:17 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:183:8: 183:9 (#0), res: Local(HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).6), res: Local(HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:183:8: 183:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).7), kind: Lit(Spanned { node: Char('\u{7f}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:183:12: 183:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:183:12: 183:20 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:184:12: 184:13 (#0), res: Local(HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).12), res: Local(HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:184:12: 184:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).13), kind: Lit(Spanned { node: Char(' '), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:184:17: 184:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:184:17: 184:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:191:15: 191:16 (#0), res: Local(HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).30), res: Local(HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:191:15: 191:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width).31), kind: Lit(Spanned { node: Char('\u{a0}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:191:20: 191:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:191:20: 191:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:216:8: 216:9 (#0), res: Local(HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).60), res: Local(HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:216:8: 216:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).61), kind: Lit(Spanned { node: Char('\u{a0}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:216:13: 216:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:216:13: 216:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:227:12: 227:21 (#0), res: Local(HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).4)), segments: [PathSegment { ident: next_info#0, hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).105), res: Local(HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:227:12: 227:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).106), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:227:25: 227:34 (#0), res: Def(Struct, DefId(0:129 ~ unicode_width[c01c]::tables::WidthInfo)), segments: [PathSegment { ident: WidthInfo#0, hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).107), res: Def(Struct, DefId(0:129 ~ unicode_width[c01c]::tables::WidthInfo)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:227:25: 227:34 (#0) }, PathSegment { ident: DEFAULT#0, hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).109), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:227:25: 227:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:228:16: 228:17 (#0), res: Local(HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).114), res: Local(HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:228:16: 228:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).115), kind: Lit(Spanned { node: Char('\u{fe0f}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:228:21: 228:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:228:21: 228:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:231:16: 231:17 (#0), res: Local(HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).131), res: Local(HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:231:16: 231:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).132), kind: Lit(Spanned { node: Char('\u{fe0e}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:231:21: 231:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:231:21: 231:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:55 ~ unicode_width[c01c]::tables::{impl#0}::set_text_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:54 ~ unicode_width[c01c]::tables::{impl#0}::is_text_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:56 ~ unicode_width[c01c]::tables::{impl#0}::unset_text_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).189), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:242:20: 242:21 (#0), res: Local(HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).190), res: Local(HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:242:20: 242:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str).191), kind: Lit(Spanned { node: Char('\u{200d}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:242:25: 242:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:242:25: 242:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ unicode_width[c01c]::tables::{impl#0}::set_zwj_bit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:70 ~ unicode_width[c01c]::tables::is_ligature_transparent)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:61 ~ unicode_width[c01c]::tables::str_width)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8789 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::rfold)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:60 ~ unicode_width[c01c]::tables::width_in_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25435 ~ core[7d5a]::num::{impl#11}::wrapping_add_signed)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(1:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).66), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:31: 440:33 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:17: 440:30 (#0), res: Local(HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).63)), segments: [PathSegment { ident: packed_widths#0, hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).68), res: Local(HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).63)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:17: 440:30 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).69), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:37: 440:38 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).70), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:35: 440:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:35: 440:36 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).71), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:43: 440:44 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:40: 440:42 (#0), res: Local(HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).10)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).73), res: Local(HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:40: 440:42 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).74), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:45: 440:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:45: 440:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:39: 440:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:34: 440:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:17: 440:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).75), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:54: 440:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:54: 440:58 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:17: 440:30 (#0), res: Local(HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).63)), segments: [PathSegment { ident: packed_widths#0, hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).68), res: Local(HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).63)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:17: 440:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).69), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:37: 440:38 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).70), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:35: 440:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:35: 440:36 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).71), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:43: 440:44 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:40: 440:42 (#0), res: Local(HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).10)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).73), res: Local(HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:40: 440:42 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).74), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:45: 440:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:45: 440:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:39: 440:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:34: 440:51 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).70), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:35: 440:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:35: 440:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).71), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:43: 440:44 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:40: 440:42 (#0), res: Local(HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).10)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).73), res: Local(HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:40: 440:42 (#0) }, Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).74), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:45: 440:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:45: 440:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:39: 440:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:40: 440:42 (#0), res: Local(HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).10)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).73), res: Local(HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:40: 440:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).74), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:45: 440:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:440:45: 440:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:442:8: 442:13 (#0), res: Local(HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).77)), segments: [PathSegment { ident: width#0, hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).81), res: Local(HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).77)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:442:8: 442:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk).82), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:442:16: 442:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:442:16: 442:17 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:470:8: 470:9 (#0), res: Local(HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).6), res: Local(HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:470:8: 470:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).7), kind: Lit(Spanned { node: Char('\u{7f}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:470:12: 470:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:470:12: 470:20 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:471:12: 471:13 (#0), res: Local(HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).12), res: Local(HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:471:12: 471:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).13), kind: Lit(Spanned { node: Char(' '), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:471:17: 471:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:471:17: 471:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:478:15: 478:16 (#0), res: Local(HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).30), res: Local(HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:478:15: 478:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk).31), kind: Lit(Spanned { node: Char('\u{a0}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:478:20: 478:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:478:20: 478:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ unicode_width[c01c]::tables::{impl#0}::is_emoji_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:51 ~ unicode_width[c01c]::tables::{impl#0}::is_zwj_emoji_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:53 ~ unicode_width[c01c]::tables::{impl#0}::unset_emoji_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).59), kind: Match(Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:505:9: 505:18 (#0), res: Local(HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).4)), segments: [PathSegment { ident: next_info#0, hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).61), res: Local(HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:505:9: 505:18 (#0) }, [Arm { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).71), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:13: 476:43 (#8), pat: Pat { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).70), kind: Or([Pat { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).65), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:506:9: 506:18 (#0), res: Def(Struct, DefId(0:129 ~ unicode_width[c01c]::tables::WidthInfo)), segments: [PathSegment { ident: WidthInfo#0, hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).62), res: Def(Struct, DefId(0:129 ~ unicode_width[c01c]::tables::WidthInfo)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:506:9: 506:18 (#0) }, PathSegment { ident: COMBINING_LONG_SOLIDUS_OVERLAY#0, hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).64), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:506:9: 506:50 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).69), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:506:53: 506:62 (#0), res: Def(Struct, DefId(0:129 ~ unicode_width[c01c]::tables::WidthInfo)), segments: [PathSegment { ident: WidthInfo#0, hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).66), res: Def(Struct, DefId(0:129 ~ unicode_width[c01c]::tables::WidthInfo)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:506:53: 506:62 (#0) }, PathSegment { ident: SOLIDUS_OVERLAY_ALEF#0, hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).68), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:506:53: 506:84 (#0), default_binding_modes: true }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:506:9: 506:84 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).72), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#8) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#8) } }, Arm { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).74), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:23 (#8), pat: Pat { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).73), kind: Wild, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:14 (#8), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).75), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#8) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#8) } }], Normal), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:475:9: 478:10 (#8) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).76), kind: Match(Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:507:19: 507:20 (#0), res: Local(HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).78), res: Local(HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:507:19: 507:20 (#0) }, [Arm { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).86), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:13: 476:43 (#9), pat: Pat { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).85), kind: Or([Pat { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).80), kind: Lit(Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).79), kind: Lit(Spanned { node: Char('<'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:507:22: 507:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:507:22: 507:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:507:22: 507:25 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).82), kind: Lit(Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).81), kind: Lit(Spanned { node: Char('='), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:507:28: 507:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:507:28: 507:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:507:28: 507:31 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).84), kind: Lit(Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).83), kind: Lit(Spanned { node: Char('>'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:507:34: 507:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:507:34: 507:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:507:34: 507:37 (#0), default_binding_modes: true }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:507:22: 507:37 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).87), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#9) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#9) } }, Arm { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).89), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:23 (#9), pat: Pat { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).88), kind: Wild, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:14 (#9), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).90), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#9) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#9) } }], Normal), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:475:9: 478:10 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).105), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:511:8: 511:9 (#0), res: Local(HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).106), res: Local(HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:511:8: 511:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).107), kind: Lit(Spanned { node: Char('\u{a0}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:511:13: 511:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:511:13: 511:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:522:12: 522:21 (#0), res: Local(HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).4)), segments: [PathSegment { ident: next_info#0, hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).151), res: Local(HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:522:12: 522:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).152), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).154), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:522:25: 522:34 (#0), res: Def(Struct, DefId(0:129 ~ unicode_width[c01c]::tables::WidthInfo)), segments: [PathSegment { ident: WidthInfo#0, hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).153), res: Def(Struct, DefId(0:129 ~ unicode_width[c01c]::tables::WidthInfo)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:522:25: 522:34 (#0) }, PathSegment { ident: DEFAULT#0, hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).155), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:522:25: 522:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).159), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:523:16: 523:17 (#0), res: Local(HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).160), res: Local(HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:523:16: 523:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).161), kind: Lit(Spanned { node: Char('\u{fe0f}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:523:21: 523:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:523:21: 523:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ unicode_width[c01c]::tables::{impl#0}::set_emoji_presentation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ unicode_width[c01c]::tables::{impl#0}::is_ligature_transparent)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).182), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:527:20: 527:21 (#0), res: Local(HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).183), res: Local(HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:527:20: 527:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk).184), kind: Lit(Spanned { node: Char('\u{200d}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:527:25: 527:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:527:25: 527:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ unicode_width[c01c]::tables::{impl#0}::set_zwj_bit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:70 ~ unicode_width[c01c]::tables::is_ligature_transparent)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:63 ~ unicode_width[c01c]::tables::lookup_width_cjk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:66 ~ unicode_width[c01c]::tables::str_width_cjk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8789 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:65 ~ unicode_width[c01c]::tables::width_in_str_cjk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25435 ~ core[7d5a]::num::{impl#11}::wrapping_add_signed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(1:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).5), kind: Field(Expr { hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).6), kind: Call(Expr { hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:713:8: 713:20 (#0), res: Def(Fn, DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width)), segments: [PathSegment { ident: lookup_width#0, hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).8), res: Def(Fn, DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:713:8: 713:20 (#0) }, [Expr { hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:713:21: 713:22 (#0), res: Local(HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).10), res: Local(HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:713:21: 713:22 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:713:8: 713:23 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:713:8: 713:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:713:29: 713:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:713:29: 713:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:58 ~ unicode_width[c01c]::tables::lookup_width)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10388 ~ core[7d5a]::result::{impl#0}::is_err)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13365 ~ core[7d5a]::slice::{impl#0}::binary_search_by)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:25108 ~ core[7d5a]::num::{impl#8}::from_le_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25108 ~ core[7d5a]::num::{impl#8}::from_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:722:20: 722:22 (#0), res: Local(HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).25)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).86), res: Local(HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:722:20: 722:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:722:25: 722:27 (#0), res: Local(HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).60)), segments: [PathSegment { ident: lo#0, hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).88), res: Local(HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:722:25: 722:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).97), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:724:27: 724:29 (#0), res: Local(HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).25)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).98), res: Local(HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:724:27: 724:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:724:32: 724:34 (#0), res: Local(HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).82)), segments: [PathSegment { ident: hi#0, hir_id: HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).100), res: Local(HirId(DefId(0:68 ~ unicode_width[c01c]::tables::is_transparent_zero_width).82)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:724:32: 724:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:70 ~ unicode_width[c01c]::tables::is_ligature_transparent)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).13), kind: Call(Expr { hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:746:5: 746:28 (#0), res: Def(Fn, DefId(0:70 ~ unicode_width[c01c]::tables::is_ligature_transparent)), segments: [PathSegment { ident: is_ligature_transparent#0, hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).15), res: Def(Fn, DefId(0:70 ~ unicode_width[c01c]::tables::is_ligature_transparent)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:746:5: 746:28 (#0) }, [Expr { hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:746:29: 746:30 (#0), res: Local(HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).17), res: Local(HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:746:29: 746:30 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:746:5: 746:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).18), kind: MethodCall(PathSegment { ident: is_ok#0, hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).19), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).20), kind: MethodCall(PathSegment { ident: binary_search_by#0, hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).21), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:747:12: 747:31 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:106 ~ unicode_width[c01c]::tables::SOLIDUS_TRANSPARENT)), segments: [PathSegment { ident: SOLIDUS_TRANSPARENT#0, hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).23), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:106 ~ unicode_width[c01c]::tables::SOLIDUS_TRANSPARENT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:747:12: 747:31 (#0) }, [Expr { hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).24), kind: Closure(Closure { def_id: DefId(0:72 ~ unicode_width[c01c]::tables::is_solidus_transparent::{closure#0}), binder: Default, constness: NotConst, capture_clause: Ref, bound_generic_params: [], fn_decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).105), kind: Infer, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:748:32: 748:41 (#0) }], output: DefaultReturn(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:748:42: 748:42 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, body: BodyId { hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).30) }, fn_decl_span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:748:31: 748:42 (#0), fn_arg_span: Some(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:748:31: 748:42 (#0)), kind: Closure }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:748:31: 758:14 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:748:14: 758:15 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:747:12: 758:15 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:759:14: 759:21 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:747:12: 759:21 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:70 ~ unicode_width[c01c]::tables::is_ligature_transparent)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10385 ~ core[7d5a]::result::{impl#0}::is_ok)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13365 ~ core[7d5a]::slice::{impl#0}::binary_search_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25108 ~ core[7d5a]::num::{impl#8}::from_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25108 ~ core[7d5a]::num::{impl#8}::from_le_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:751:20: 751:22 (#0), res: Local(HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).11)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).78), res: Local(HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:751:20: 751:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:751:25: 751:27 (#0), res: Local(HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).52)), segments: [PathSegment { ident: lo#0, hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).80), res: Local(HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:751:25: 751:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).89), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:753:27: 753:29 (#0), res: Local(HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).11)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).90), res: Local(HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:753:27: 753:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:753:32: 753:34 (#0), res: Local(HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).74)), segments: [PathSegment { ident: hi#0, hir_id: HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).92), res: Local(HirId(DefId(0:71 ~ unicode_width[c01c]::tables::is_solidus_transparent).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:753:32: 753:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:770:20: 770:22 (#0), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).11)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).15), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:770:20: 770:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).16), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:770:26: 770:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:770:26: 770:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3174 ~ core[7d5a]::convert::TryFrom::try_from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).68), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:783:47: 783:49 (#0) }, Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:783:44: 783:46 (#0), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).11)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).70), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:783:44: 783:46 (#0) }, Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).71), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:783:50: 783:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:783:50: 783:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:783:43: 783:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).72), kind: Lit(Spanned { node: Int(Pu128(127), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:783:55: 783:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:783:55: 783:59 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:783:44: 783:46 (#0), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).11)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).70), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:783:44: 783:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).71), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:783:50: 783:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:783:50: 783:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).88), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:30: 786:31 (#0) }, Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).89), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:17: 786:19 (#0) }, Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:7: 786:16 (#0), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).86)), segments: [PathSegment { ident: leaf_byte#0, hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).91), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).86)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:7: 786:16 (#0) }, Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).92), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:24: 786:25 (#0) }, Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:21: 786:23 (#0), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).11)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).94), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:21: 786:23 (#0) }, Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).95), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:26: 786:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:26: 786:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:20: 786:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:6: 786:29 (#0) }, Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).96), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:32: 786:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:32: 786:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:5: 786:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).97), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:38: 786:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:38: 786:39 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).89), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:17: 786:19 (#0) }, Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:7: 786:16 (#0), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).86)), segments: [PathSegment { ident: leaf_byte#0, hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).91), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).86)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:7: 786:16 (#0) }, Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).92), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:24: 786:25 (#0) }, Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:21: 786:23 (#0), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).11)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).94), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:21: 786:23 (#0) }, Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).95), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:26: 786:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:26: 786:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:20: 786:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:6: 786:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).96), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:32: 786:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:32: 786:33 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:7: 786:16 (#0), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).86)), segments: [PathSegment { ident: leaf_byte#0, hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).91), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).86)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:7: 786:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).92), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:24: 786:25 (#0) }, Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:21: 786:23 (#0), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).11)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).94), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:21: 786:23 (#0) }, Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).95), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:26: 786:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:26: 786:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:20: 786:28 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:21: 786:23 (#0), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).11)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).94), res: Local(HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:21: 786:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:73 ~ unicode_width[c01c]::tables::starts_emoji_presentation_seq).95), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:26: 786:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:786:26: 786:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:797:20: 797:22 (#0), res: Local(HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).11)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).15), res: Local(HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:797:20: 797:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).16), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:797:26: 797:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:797:26: 797:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).100), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:812:24: 812:26 (#0), res: Local(HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).11)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).101), res: Local(HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:812:24: 812:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).102), kind: Lit(Spanned { node: Int(Pu128(255), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:812:29: 812:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:812:29: 812:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10385 ~ core[7d5a]::result::{impl#0}::is_ok)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13365 ~ core[7d5a]::slice::{impl#0}::binary_search_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).122), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:814:12: 814:23 (#0), res: Local(HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).106)), segments: [PathSegment { ident: bottom_bits#0, hir_id: HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).123), res: Local(HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).106)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:814:12: 814:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:814:26: 814:28 (#0), res: Local(HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).115)), segments: [PathSegment { ident: lo#0, hir_id: HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).125), res: Local(HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).115)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:814:26: 814:28 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:816:19: 816:30 (#0), res: Local(HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).106)), segments: [PathSegment { ident: bottom_bits#0, hir_id: HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).135), res: Local(HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).106)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:816:19: 816:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:816:33: 816:35 (#0), res: Local(HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).116)), segments: [PathSegment { ident: hi#0, hir_id: HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).137), res: Local(HirId(DefId(0:74 ~ unicode_width[c01c]::tables::starts_non_ideographic_text_presentation_seq).116)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:816:33: 816:35 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:830:20: 830:22 (#0), res: Local(HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).11)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).15), res: Local(HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:830:20: 830:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).16), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:830:26: 830:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:830:26: 830:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:843:24: 843:26 (#0), res: Local(HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).11)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).89), res: Local(HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:843:24: 843:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).90), kind: Lit(Spanned { node: Int(Pu128(255), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:843:29: 843:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:843:29: 843:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10385 ~ core[7d5a]::result::{impl#0}::is_ok)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13365 ~ core[7d5a]::slice::{impl#0}::binary_search_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:845:12: 845:23 (#0), res: Local(HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).94)), segments: [PathSegment { ident: bottom_bits#0, hir_id: HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).111), res: Local(HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).94)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:845:12: 845:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).112), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:845:26: 845:28 (#0), res: Local(HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).103)), segments: [PathSegment { ident: lo#0, hir_id: HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).113), res: Local(HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).103)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:845:26: 845:28 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Specific({"unicode_width"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).122), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:847:19: 847:30 (#0), res: Local(HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).94)), segments: [PathSegment { ident: bottom_bits#0, hir_id: HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).123), res: Local(HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).94)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:847:19: 847:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:847:33: 847:35 (#0), res: Local(HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).104)), segments: [PathSegment { ident: hi#0, hir_id: HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).125), res: Local(HirId(DefId(0:76 ~ unicode_width[c01c]::tables::is_emoji_modifier_base).104)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.1.14/src/tables.rs:847:33: 847:35 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_width"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ unicode_width[c01c]::{impl#0}::width)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ unicode_width[c01c]::tables::single_char_width)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:122 ~ unicode_width[c01c]::{impl#0}::width_cjk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:64 ~ unicode_width[c01c]::tables::single_char_width_cjk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ unicode_width[c01c]::{impl#1}::width)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:61 ~ unicode_width[c01c]::tables::str_width)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ unicode_width[c01c]::{impl#1}::width_cjk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:66 ~ unicode_width[c01c]::tables::str_width_cjk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
