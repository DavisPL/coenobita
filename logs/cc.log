[DEBUG] Trying to get func ty of defid DefId(0:33 ~ cc[2cef]::target::apple::{impl#0}::apple_sdk_name)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:34 ~ cc[2cef]::target::apple::{impl#0}::apple_version_flag)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).28), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#50), res: Local(HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).20)), segments: [PathSegment { ident: left_val#50, hir_id: HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).30), res: Local(HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#50) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#50) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).31), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#50), res: Local(HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).21)), segments: [PathSegment { ident: right_val#50, hir_id: HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).33), res: Local(HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#50) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#50) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"cc"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).132), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:23: 59:31 (#51), res: Local(HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).124)), segments: [PathSegment { ident: left_val#51, hir_id: HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).134), res: Local(HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:23: 59:31 (#51) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:22: 59:31 (#51) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).135), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:36: 59:45 (#51), res: Local(HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).125)), segments: [PathSegment { ident: right_val#51, hir_id: HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).137), res: Local(HirId(DefId(0:43 ~ cc[2cef]::target::llvm::{impl#0}::versioned_llvm_target).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:36: 59:45 (#51) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:59:35: 59:45 (#51) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"cc"}), Universal), kind: Adt({}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ cc[2cef]::target::llvm::guess_llvm_target_triple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:603 ~ cc[2cef]::target::parser::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11206 ~ core[7d5a]::fmt::{impl#9}::debug_struct_fields_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:1989 ~ std[e3cd]::env::var)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:369 ~ cc[2cef]::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9688 ~ core[7d5a]::option::{impl#0}::ok_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14364 ~ core[7d5a]::str::{impl#0}::split_once)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:369 ~ cc[2cef]::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1989 ~ std[e3cd]::env::var)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6033 ~ alloc[5873]::string::{impl#0}::into_boxed_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:369 ~ cc[2cef]::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10391 ~ core[7d5a]::result::{impl#0}::ok)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:13956 ~ core[7d5a]::str::traits::FromStr::from_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).305), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:72:20: 72:29 (#0), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), segments: [PathSegment { ident: cargo_env#0, hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).306), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:72:20: 72:29 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).341), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:73:22: 73:31 (#0), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), segments: [PathSegment { ident: cargo_env#0, hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).342), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:73:22: 73:31 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).377), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:74:18: 74:27 (#0), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), segments: [PathSegment { ident: cargo_env#0, hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).378), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:74:18: 74:27 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).413), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:75:19: 75:28 (#0), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), segments: [PathSegment { ident: cargo_env#0, hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).414), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:75:19: 75:28 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10436 ~ core[7d5a]::result::{impl#0}::unwrap_or_else)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).450), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:79:19: 79:28 (#0), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), segments: [PathSegment { ident: cargo_env#0, hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).451), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:79:19: 79:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6033 ~ alloc[5873]::string::{impl#0}::into_boxed_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ cc[2cef]::target::llvm::guess_llvm_target_triple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6033 ~ alloc[5873]::string::{impl#0}::into_boxed_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6033 ~ alloc[5873]::string::{impl#0}::into_boxed_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).305), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:72:20: 72:29 (#0), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), segments: [PathSegment { ident: cargo_env#0, hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).306), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:72:20: 72:29 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).341), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:73:22: 73:31 (#0), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), segments: [PathSegment { ident: cargo_env#0, hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).342), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:73:22: 73:31 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).377), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:74:18: 74:27 (#0), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), segments: [PathSegment { ident: cargo_env#0, hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).378), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:74:18: 74:27 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).413), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:75:19: 75:28 (#0), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), segments: [PathSegment { ident: cargo_env#0, hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).414), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:75:19: 75:28 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).450), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:79:19: 79:28 (#0), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), segments: [PathSegment { ident: cargo_env#0, hir_id: HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).451), res: Local(HirId(DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables).280)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target/parser.rs:79:19: 79:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:608 ~ cc[2cef]::target::parser::{impl#3}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:610 ~ cc[2cef]::target::parser::{impl#4}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:67 ~ cc[2cef]::target::parser::{impl#1}::parse_from_cargo_environment_variables)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:348 ~ cc[2cef]::utilities::{impl#3}::get_or_init)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:57 ~ cc[2cef]::target::parser::{impl#0}::from_cargo_environment_variables)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:622 ~ cc[2cef]::target::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11206 ~ core[7d5a]::fmt::{impl#9}::debug_struct_fields_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).6), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:45:5: 45:21 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).7), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).8), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).9), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).10), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).11), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).12), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).14), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, full_arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).15), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).17), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, full_arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).18), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).19), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).21), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).22), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).24), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).25), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).26), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).28), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, vendor#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).29), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).31), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, vendor#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).32), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).33), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).35), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, os#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).36), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).38), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, os#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).39), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).40), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).42), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, env#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).43), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).45), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, env#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).46), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:45:5: 45:21 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).47), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).49), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, abi#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:45:5: 45:21 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).50), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).52), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, abi#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:45:5: 45:21 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:45:5: 45:21 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:45:5: 45:21 (#71) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).53), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:47:5: 47:37 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).54), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).56), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, unversioned_llvm_target#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:47:5: 47:37 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).57), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).59), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, unversioned_llvm_target#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:47:5: 47:37 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:47:5: 47:37 (#71) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).7), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).8), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).9), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).10), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).11), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).12), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).14), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, full_arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).15), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).17), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, full_arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).18), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).19), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).21), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).22), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).24), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).25), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).26), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).28), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, vendor#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).29), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).31), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, vendor#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).32), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).33), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).35), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, os#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).36), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).38), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, os#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).39), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).40), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).42), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, env#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).43), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).45), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, env#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).46), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:45:5: 45:21 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).47), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).49), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, abi#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:45:5: 45:21 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).50), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).52), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, abi#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:45:5: 45:21 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:45:5: 45:21 (#71) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).8), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).9), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).10), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).11), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).12), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).14), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, full_arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).15), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).17), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, full_arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).18), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).19), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).21), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).22), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).24), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).25), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).26), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).28), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, vendor#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).29), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).31), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, vendor#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).32), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).33), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).35), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, os#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).36), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).38), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, os#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).39), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).40), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).42), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, env#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).43), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).45), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, env#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).9), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).10), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).11), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).12), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).14), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, full_arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).15), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).17), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, full_arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).18), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).19), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).21), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).22), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).24), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).25), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).26), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).28), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, vendor#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).29), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).31), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, vendor#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).32), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).33), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).35), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, os#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).36), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).38), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, os#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).10), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).11), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).12), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).14), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, full_arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).15), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).17), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, full_arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).18), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).19), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).21), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).22), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).24), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).25), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).26), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).28), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, vendor#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).29), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).31), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, vendor#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).11), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).12), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).14), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, full_arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).15), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).17), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, full_arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).18), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).19), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).21), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }, Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).22), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).24), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).12), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).14), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, full_arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).15), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).17), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, full_arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:25:5: 25:27 (#71) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).19), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).21), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).22), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).24), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, arch#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:29:5: 29:22 (#71) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).26), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).28), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, vendor#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).29), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).31), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, vendor#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:33:5: 33:24 (#71) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).33), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).35), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, os#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).36), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).38), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, os#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:37:5: 37:20 (#71) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).40), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).42), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, env#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).43), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).45), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, env#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:41:5: 41:21 (#71) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).47), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).49), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, abi#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:45:5: 45:21 (#71) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).50), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).52), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, abi#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:45:5: 45:21 (#71) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).54), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:17 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).56), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, unversioned_llvm_target#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:47:5: 47:37 (#71) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).57), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), segments: [PathSegment { ident: other#71, hir_id: HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).59), res: Local(HirId(DefId(0:627 ~ cc[2cef]::target::{impl#3}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:19:17: 19:26 (#71) }, unversioned_llvm_target#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/target.rs:47:5: 47:37 (#71) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:630 ~ cc[2cef]::target::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:71 ~ cc[2cef]::target::{impl#0}::from_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13368 ~ core[7d5a]::slice::{impl#0}::binary_search_by_key)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:369 ~ cc[2cef]::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:639 ~ cc[2cef]::windows::find_tools::{impl#7}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:90 ~ cc[2cef]::windows::find_tools::{impl#0}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:90 ~ cc[2cef]::windows::find_tools::{impl#0}::eq).6), kind: Field(Expr { hir_id: HirId(DefId(0:90 ~ cc[2cef]::windows::find_tools::{impl#0}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:36:9: 36:13 (#0), res: Local(HirId(DefId(0:90 ~ cc[2cef]::windows::find_tools::{impl#0}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:90 ~ cc[2cef]::windows::find_tools::{impl#0}::eq).8), res: Local(HirId(DefId(0:90 ~ cc[2cef]::windows::find_tools::{impl#0}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:36:9: 36:13 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:36:9: 36:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:90 ~ cc[2cef]::windows::find_tools::{impl#0}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:90 ~ cc[2cef]::windows::find_tools::{impl#0}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:36:20: 36:25 (#0), res: Local(HirId(DefId(0:90 ~ cc[2cef]::windows::find_tools::{impl#0}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:90 ~ cc[2cef]::windows::find_tools::{impl#0}::eq).11), res: Local(HirId(DefId(0:90 ~ cc[2cef]::windows::find_tools::{impl#0}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:36:20: 36:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:36:19: 36:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ cc[2cef]::windows::find_tools::{impl#1}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:102 ~ cc[2cef]::windows::find_tools::{impl#2}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3656 ~ core[7d5a]::ops::deref::Deref::deref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:105 ~ cc[2cef]::windows::find_tools::{impl#3}::deref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:107 ~ cc[2cef]::windows::find_tools::{impl#4}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3656 ~ core[7d5a]::ops::deref::Deref::deref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ cc[2cef]::windows::find_tools::{impl#5}::get_env)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:1992 ~ std[e3cd]::env::var_os)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ cc[2cef]::windows::find_tools::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:116 ~ cc[2cef]::windows::find_tools::find_tool)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:257 ~ cc[2cef]::tool::{impl#0}::to_command)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:116 ~ cc[2cef]::windows::find_tools::find_tool)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:117 ~ cc[2cef]::windows::find_tools::find_tool_inner)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10391 ~ core[7d5a]::result::{impl#0}::ok)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14405 ~ core[7d5a]::str::{impl#0}::parse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:117 ~ cc[2cef]::windows::find_tools::find_tool_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:117 ~ cc[2cef]::windows::find_tools::find_tool_inner).9), kind: Field(Expr { hir_id: HirId(DefId(0:117 ~ cc[2cef]::windows::find_tools::find_tool_inner).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:120:8: 120:14 (#0), res: Local(HirId(DefId(0:117 ~ cc[2cef]::windows::find_tools::find_tool_inner).2)), segments: [PathSegment { ident: target#0, hir_id: HirId(DefId(0:117 ~ cc[2cef]::windows::find_tools::find_tool_inner).11), res: Local(HirId(DefId(0:117 ~ cc[2cef]::windows::find_tools::find_tool_inner).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:120:8: 120:14 (#0) }, env#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:120:8: 120:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:117 ~ cc[2cef]::windows::find_tools::find_tool_inner).12), kind: Lit(Spanned { node: Str("msvc", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:120:22: 120:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:120:22: 120:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"cc"}), Specific({"cc"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14333 ~ core[7d5a]::str::{impl#0}::contains)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:131 ~ cc[2cef]::windows::find_tools::impl_::find_msbuild)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14333 ~ core[7d5a]::str::{impl#0}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ cc[2cef]::windows::find_tools::impl_::find_devenv)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9705 ~ core[7d5a]::option::{impl#0}::or_else)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9705 ~ core[7d5a]::option::{impl#0}::or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:141 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_15plus)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_14)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:652 ~ cc[2cef]::windows::find_tools::{impl#8}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:655 ~ cc[2cef]::windows::find_tools::{impl#10}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:655 ~ cc[2cef]::windows::find_tools::{impl#10}::eq).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:152:17: 152:26 (#78), res: Local(HirId(DefId(0:655 ~ cc[2cef]::windows::find_tools::{impl#10}::eq).14)), segments: [PathSegment { ident: __self_discr#78, hir_id: HirId(DefId(0:655 ~ cc[2cef]::windows::find_tools::{impl#10}::eq).27), res: Local(HirId(DefId(0:655 ~ cc[2cef]::windows::find_tools::{impl#10}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:152:17: 152:26 (#78) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:655 ~ cc[2cef]::windows::find_tools::{impl#10}::eq).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:152:17: 152:26 (#78), res: Local(HirId(DefId(0:655 ~ cc[2cef]::windows::find_tools::{impl#10}::eq).24)), segments: [PathSegment { ident: __arg1_discr#78, hir_id: HirId(DefId(0:655 ~ cc[2cef]::windows::find_tools::{impl#10}::eq).29), res: Local(HirId(DefId(0:655 ~ cc[2cef]::windows::find_tools::{impl#10}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:152:17: 152:26 (#78) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:657 ~ cc[2cef]::windows::find_tools::{impl#11}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:660 ~ cc[2cef]::windows::find_tools::{impl#13}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ cc[2cef]::windows::find_tools::find_vs_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ cc[2cef]::windows::find_tools::find_vs_version::has_msbuild_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ cc[2cef]::windows::find_tools::impl_::has_msbuild_version)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1989 ~ std[e3cd]::env::var)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ cc[2cef]::windows::find_tools::find_vs_version::has_msbuild_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ cc[2cef]::windows::find_tools::find_vs_version::has_msbuild_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ cc[2cef]::windows::find_tools::find_vs_version::has_msbuild_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ cc[2cef]::windows::find_tools::find_vs_version::has_msbuild_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ cc[2cef]::windows::find_tools::find_vs_version::has_msbuild_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ cc[2cef]::windows::find_tools::impl_::has_msbuild_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:131 ~ cc[2cef]::windows::find_tools::impl_::find_msbuild)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ cc[2cef]::windows::find_tools::impl_::find_devenv)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:109 ~ cc[2cef]::windows::find_tools::EnvGetter::get_env)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:109 ~ cc[2cef]::windows::find_tools::EnvGetter::get_env)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9022 ~ core[7d5a]::iter::traits::iterator::Iterator::find)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2009 ~ std[e3cd]::env::split_paths)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5458 ~ std[e3cd]::path::{impl#63}::join)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5477 ~ std[e3cd]::path::{impl#63}::exists)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:242 ~ cc[2cef]::tool::{impl#0}::with_family)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9705 ~ core[7d5a]::option::{impl#0}::or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9705 ~ core[7d5a]::option::{impl#0}::or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:1154:9: 1154:17 (#0), res: Local(HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).114)), segments: [PathSegment { ident: get_tool#0, hir_id: HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).121), res: Local(HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).114)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:1154:9: 1154:17 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).128), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:1156:25: 1156:33 (#0), res: Local(HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).114)), segments: [PathSegment { ident: get_tool#0, hir_id: HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).129), res: Local(HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).114)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:1156:25: 1156:33 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:109 ~ cc[2cef]::windows::find_tools::EnvGetter::get_env)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:1154:9: 1154:17 (#0), res: Local(HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).114)), segments: [PathSegment { ident: get_tool#0, hir_id: HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).121), res: Local(HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).114)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:1154:9: 1154:17 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).128), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:1156:25: 1156:33 (#0), res: Local(HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).114)), segments: [PathSegment { ident: get_tool#0, hir_id: HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).129), res: Local(HirId(DefId(0:133 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_environment).114)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/windows/find_tools.rs:1156:25: 1156:33 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:141 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_15plus)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ cc[2cef]::windows::find_tools::impl_::find_msvc_14)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ cc[2cef]::windows::find_tools::impl_::has_msbuild_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:668 ~ cc[2cef]::command_helpers::{impl#2}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:670 ~ cc[2cef]::command_helpers::{impl#3}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11204 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field5_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:679 ~ cc[2cef]::command_helpers::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:681 ~ cc[2cef]::command_helpers::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:1992 ~ std[e3cd]::env::var_os)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).24), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:37: 49:39 (#0) }, Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).25), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:30: 49:32 (#0) }, Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:28: 49:29 (#0), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).27), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:28: 49:29 (#0) }, Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).28), kind: Lit(Spanned { node: Str("0", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:33: 49:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:33: 49:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:28: 49:36 (#0) }, Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).29), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:42: 49:44 (#0) }, Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:40: 49:41 (#0), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).31), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:40: 49:41 (#0) }, Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).32), kind: Lit(Spanned { node: Str("false", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:45: 49:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:45: 49:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:40: 49:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:28: 49:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).33), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:58: 49:60 (#0) }, Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:56: 49:57 (#0), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).35), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:56: 49:57 (#0) }, Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).36), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:61: 49:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:61: 49:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:56: 49:63 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).25), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:30: 49:32 (#0) }, Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:28: 49:29 (#0), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).27), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:28: 49:29 (#0) }, Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).28), kind: Lit(Spanned { node: Str("0", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:33: 49:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:33: 49:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:28: 49:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).29), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:42: 49:44 (#0) }, Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:40: 49:41 (#0), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).31), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:40: 49:41 (#0) }, Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).32), kind: Lit(Spanned { node: Str("false", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:45: 49:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:45: 49:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:40: 49:52 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:28: 49:29 (#0), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).27), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:28: 49:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).28), kind: Lit(Spanned { node: Str("0", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:33: 49:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:33: 49:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:40: 49:41 (#0), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).31), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:40: 49:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).32), kind: Lit(Spanned { node: Str("false", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:45: 49:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:45: 49:52 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:56: 49:57 (#0), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).35), res: Local(HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:56: 49:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:174 ~ cc[2cef]::command_helpers::{impl#0}::new).36), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:61: 49:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:49:61: 49:63 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6376 ~ alloc[5873]::sync::{impl#14}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10586 ~ core[7d5a]::sync::atomic::{impl#5}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:175 ~ cc[2cef]::command_helpers::{impl#0}::print_metadata)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3625 ~ std[e3cd]::io::stdio::_print)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:176 ~ cc[2cef]::command_helpers::{impl#0}::print_warning)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3625 ~ std[e3cd]::io::stdio::_print)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).7), kind: Field(Expr { hir_id: HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:69:12: 69:16 (#0), res: Local(HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).9), res: Local(HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:69:12: 69:16 (#0) }, metadata#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:69:12: 69:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).10), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).11), kind: MethodCall(PathSegment { ident: load#0, hir_id: HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).13), kind: Field(Expr { hir_id: HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:69:30: 69:34 (#0), res: Local(HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).15), res: Local(HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:69:30: 69:34 (#0) }, checked_dbg_var#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:69:30: 69:50 (#0) }, [Expr { hir_id: HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:69:56: 69:73 (#0), res: Def(Ctor(Variant, Const), DefId(2:37509 ~ core[7d5a]::sync::atomic::Ordering::Relaxed::{constructor#0})), segments: [PathSegment { ident: Ordering#0, hir_id: HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).17), res: Def(Enum, DefId(2:37507 ~ core[7d5a]::sync::atomic::Ordering)), args: None, infer_args: true }, PathSegment { ident: Relaxed#0, hir_id: HirId(DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug).18), res: Def(Ctor(Variant, Const), DefId(2:37509 ~ core[7d5a]::sync::atomic::Ordering::Relaxed::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:69:56: 69:73 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:69:51: 69:74 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:69:30: 69:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:69:29: 69:74 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:10594 ~ core[7d5a]::sync::atomic::{impl#5}::load)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10595 ~ core[7d5a]::sync::atomic::{impl#5}::store)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3625 ~ std[e3cd]::io::stdio::_print)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3625 ~ std[e3cd]::io::stdio::_print)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:178 ~ cc[2cef]::command_helpers::{impl#0}::stdio_for_warnings)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5723 ~ std[e3cd]::process::{impl#29}::piped)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5725 ~ std[e3cd]::process::{impl#29}::null)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:179 ~ cc[2cef]::command_helpers::{impl#0}::stdio_for_output)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5723 ~ std[e3cd]::process::{impl#29}::piped)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5724 ~ std[e3cd]::process::{impl#29}::inherit)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5725 ~ std[e3cd]::process::{impl#29}::null)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:185 ~ cc[2cef]::command_helpers::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:7425 ~ alloc[5873]::vec::{impl#0}::with_capacity)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9663 ~ core[7d5a]::option::{impl#0}::as_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).23), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:40: 166:41 (#0) }, Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).24), kind: Field(Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:20: 166:24 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).26), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:20: 166:24 (#0) }, bytes_buffered#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:20: 166:39 (#0) }, Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:42: 166:52 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).20)), segments: [PathSegment { ident: to_reserve#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).28), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:42: 166:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:20: 166:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).29), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).30), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:55: 166:61 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).7)), segments: [PathSegment { ident: buffer#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).32), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:55: 166:61 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:62: 166:67 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:55: 166:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).24), kind: Field(Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:20: 166:24 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).26), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:20: 166:24 (#0) }, bytes_buffered#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:20: 166:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:42: 166:52 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).20)), segments: [PathSegment { ident: to_reserve#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).28), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:166:42: 166:52 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7526 ~ alloc[5873]::vec::{impl#2}::resize)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).39), kind: Field(Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:167:35: 167:39 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).41), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:167:35: 167:39 (#0) }, bytes_buffered#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:167:35: 167:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:167:57: 167:67 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).20)), segments: [PathSegment { ident: to_reserve#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).43), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:167:57: 167:67 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3729 ~ std[e3cd]::io::Read::read)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:13336 ~ core[7d5a]::slice::{impl#0}::split_inclusive)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).135), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:182:88: 182:89 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).132)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).136), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).132)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:182:88: 182:89 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).137), kind: Lit(Spanned { node: Byte(10), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:182:93: 182:98 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:182:93: 182:98 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"cc"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"cc"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13234 ~ core[7d5a]::slice::{impl#0}::split_last)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).162), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).163), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:185:45: 185:49 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).151)), segments: [PathSegment { ident: line#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).165), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).151)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:185:45: 185:49 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:185:50: 185:55 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:185:45: 185:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).166), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:185:58: 185:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:185:58: 185:59 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:190 ~ cc[2cef]::command_helpers::write_warning)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).196), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:37: 189:38 (#0) }, Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).197), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:28: 189:36 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).119)), segments: [PathSegment { ident: consumed#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).198), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:28: 189:36 (#0) }, Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).199), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:39: 189:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:39: 189:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:28: 189:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).200), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:53: 189:54 (#0) }, Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).201), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:44: 189:52 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).119)), segments: [PathSegment { ident: consumed#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).202), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:44: 189:52 (#0) }, Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).203), kind: Field(Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).204), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:55: 189:59 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).205), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:55: 189:59 (#0) }, bytes_buffered#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:55: 189:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:44: 189:74 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).197), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:28: 189:36 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).119)), segments: [PathSegment { ident: consumed#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).198), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:28: 189:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).199), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:39: 189:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:39: 189:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"cc"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).201), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:44: 189:52 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).119)), segments: [PathSegment { ident: consumed#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).202), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:44: 189:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).203), kind: Field(Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).204), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:55: 189:59 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).205), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:55: 189:59 (#0) }, bytes_buffered#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:189:55: 189:74 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13405 ~ core[7d5a]::slice::{impl#0}::copy_within)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] lang item being silently ignored, 
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).233), kind: Field(Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).234), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:197:28: 197:32 (#0), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).235), res: Local(HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:197:28: 197:32 (#0) }, bytes_buffered#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:197:28: 197:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available).236), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:197:50: 197:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:197:50: 197:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"cc"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:190 ~ cc[2cef]::command_helpers::write_warning)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:190 ~ cc[2cef]::command_helpers::write_warning)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6002 ~ alloc[5873]::string::{impl#0}::as_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ cc[2cef]::command_helpers::{impl#1}::forward_all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:187 ~ cc[2cef]::command_helpers::{impl#1}::forward_available)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:7838 ~ std[e3cd]::panicking::begin_panic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(0:190 ~ cc[2cef]::command_helpers::write_warning)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3535 ~ std[e3cd]::io::stdio::stdout)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3540 ~ std[e3cd]::io::stdio::{impl#11}::lock)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3791 ~ std[e3cd]::io::Write::write_all)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3791 ~ std[e3cd]::io::Write::write_all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3791 ~ std[e3cd]::io::Write::write_all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ cc[2cef]::command_helpers::wait_on_child)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ cc[2cef]::command_helpers::{impl#1}::forward_all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:185 ~ cc[2cef]::command_helpers::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5784 ~ std[e3cd]::process::{impl#56}::wait)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:369 ~ cc[2cef]::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5471 ~ std[e3cd]::path::{impl#63}::display)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5748 ~ std[e3cd]::process::{impl#40}::success)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:369 ~ cc[2cef]::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5471 ~ std[e3cd]::path::{impl#63}::display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:192 ~ cc[2cef]::command_helpers::objects_from_files)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7425 ~ alloc[5873]::vec::{impl#0}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2270 ~ std[e3cd]::ffi::os_str::{impl#23}::to_string_lossy)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9690 ~ core[7d5a]::option::{impl#0}::ok_or_else)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5440 ~ std[e3cd]::path::{impl#63}::file_name)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:369 ~ cc[2cef]::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5431 ~ std[e3cd]::path::{impl#63}::to_string_lossy)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9690 ~ core[7d5a]::option::{impl#0}::ok_or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5437 ~ std[e3cd]::path::{impl#63}::parent)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:369 ~ cc[2cef]::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2644 ~ std[e3cd]::hash::random::{impl#2}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1992 ~ std[e3cd]::env::var_os)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2270 ~ std[e3cd]::ffi::os_str::{impl#23}::to_string_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14392 ~ core[7d5a]::str::{impl#0}::strip_prefix)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11366 ~ core[7d5a]::hash::Hasher::write)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5464 ~ std[e3cd]::path::{impl#63}::with_extension)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5458 ~ std[e3cd]::path::{impl#63}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11123 ~ core[7d5a]::fmt::{impl#2}::new_v1_formatted)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11045 ~ core[7d5a]::fmt::rt::{impl#1}::new_lower_hex)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11365 ~ core[7d5a]::hash::Hasher::finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11026 ~ core[7d5a]::fmt::rt::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11026 ~ core[7d5a]::fmt::rt::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11071 ~ core[7d5a]::fmt::rt::{impl#2}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5437 ~ std[e3cd]::path::{impl#63}::parent)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2606 ~ std[e3cd]::fs::create_dir_all)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:369 ~ cc[2cef]::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:377 ~ cc[2cef]::{impl#4}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5432 ~ std[e3cd]::path::{impl#63}::to_path_buf)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:195 ~ cc[2cef]::command_helpers::run)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:199 ~ cc[2cef]::command_helpers::spawn)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ cc[2cef]::command_helpers::wait_on_child)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:197 ~ cc[2cef]::command_helpers::run_output)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:199 ~ cc[2cef]::command_helpers::spawn)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3733 ~ std[e3cd]::io::Read::read_to_end)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ cc[2cef]::command_helpers::wait_on_child)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:199 ~ cc[2cef]::command_helpers::spawn)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:205 ~ cc[2cef]::command_helpers::spawn::{impl#0}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5692 ~ std[e3cd]::process::{impl#22}::stderr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5724 ~ std[e3cd]::process::{impl#29}::inherit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:177 ~ cc[2cef]::command_helpers::{impl#0}::print_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5694 ~ std[e3cd]::process::{impl#22}::spawn)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5690 ~ std[e3cd]::process::{impl#22}::stdout)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5692 ~ std[e3cd]::process::{impl#22}::stderr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:178 ~ cc[2cef]::command_helpers::{impl#0}::stdio_for_warnings)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:179 ~ cc[2cef]::command_helpers::{impl#0}::stdio_for_output)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"cc"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:369 ~ cc[2cef]::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5471 ~ std[e3cd]::path::{impl#63}::display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:369 ~ cc[2cef]::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5471 ~ std[e3cd]::path::{impl#63}::display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:205 ~ cc[2cef]::command_helpers::spawn::{impl#0}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5692 ~ std[e3cd]::process::{impl#22}::stderr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5724 ~ std[e3cd]::process::{impl#29}::inherit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).9), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:451:8: 451:12 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).11), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:451:8: 451:12 (#0) }, is_assembler_msvc#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:451:8: 451:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).12), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).13), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:64: 452:66 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).14), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:51: 452:53 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).15), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:39: 452:41 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).16), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:25: 452:27 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).17), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).18), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:19 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).20), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:19 (#0) }, msvc#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:14: 452:24 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).21), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:32 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).23), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:32 (#0) }, clang#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:14: 452:38 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).24), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:42: 452:46 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).26), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:42: 452:46 (#0) }, gnu#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:42: 452:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:14: 452:50 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).27), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:54: 452:58 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).29), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:54: 452:58 (#0) }, cuda#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:54: 452:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:14: 452:63 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).30), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:80: 452:82 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).31), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:68: 452:72 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).33), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:68: 452:72 (#0) }, is_asm#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:68: 452:79 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).34), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:83: 452:87 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).36), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:83: 452:87 (#0) }, is_arm#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:83: 452:94 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:67: 452:95 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:13: 452:96 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:12: 452:96 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).14), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:51: 452:53 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).15), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:39: 452:41 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).16), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:25: 452:27 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).17), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).18), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:19 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).20), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:19 (#0) }, msvc#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:14: 452:24 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).21), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:32 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).23), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:32 (#0) }, clang#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:14: 452:38 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).24), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:42: 452:46 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).26), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:42: 452:46 (#0) }, gnu#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:42: 452:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:14: 452:50 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).27), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:54: 452:58 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).29), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:54: 452:58 (#0) }, cuda#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:54: 452:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:14: 452:63 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).30), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:80: 452:82 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).31), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:68: 452:72 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).33), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:68: 452:72 (#0) }, is_asm#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:68: 452:79 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).34), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:83: 452:87 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).36), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:83: 452:87 (#0) }, is_arm#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:83: 452:94 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:67: 452:95 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).15), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:39: 452:41 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).16), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:25: 452:27 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).17), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).18), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:19 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).20), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:19 (#0) }, msvc#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:14: 452:24 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).21), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:32 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).23), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:32 (#0) }, clang#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:14: 452:38 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).24), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:42: 452:46 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).26), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:42: 452:46 (#0) }, gnu#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:42: 452:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:14: 452:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).27), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:54: 452:58 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).29), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:54: 452:58 (#0) }, cuda#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:54: 452:63 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).16), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:25: 452:27 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).17), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).18), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:19 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).20), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:19 (#0) }, msvc#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:14: 452:24 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).21), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:32 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).23), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:32 (#0) }, clang#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:14: 452:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).24), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:42: 452:46 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).26), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:42: 452:46 (#0) }, gnu#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:42: 452:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).17), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).18), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:19 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).20), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:19 (#0) }, msvc#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:15: 452:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:14: 452:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).21), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:32 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).23), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:32 (#0) }, clang#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:28: 452:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).31), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:68: 452:72 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).33), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:68: 452:72 (#0) }, is_asm#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:68: 452:79 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).34), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:83: 452:87 (#0), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), segments: [PathSegment { ident: args#0, hir_id: HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).36), res: Local(HirId(DefId(0:214 ~ cc[2cef]::command_helpers::command_add_output_file).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:83: 452:87 (#0) }, is_arm#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.1.37/src/command_helpers.rs:452:83: 452:94 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2198 ~ std[e3cd]::ffi::os_str::{impl#2}::push)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5671 ~ std[e3cd]::process::{impl#22}::arg)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5671 ~ std[e3cd]::process::{impl#22}::arg)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5671 ~ std[e3cd]::process::{impl#22}::arg)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:693 ~ cc[2cef]::tool::{impl#2}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind