[DEBUG] Trying to get func ty of defid DefId(0:1014 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ bytes[a5c5]::buf::buf_impl::Buf::remaining)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1015 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:26 ~ bytes[a5c5]::buf::buf_impl::Buf::chunk)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1016 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::chunks_vectored)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:27 ~ bytes[a5c5]::buf::buf_impl::Buf::chunks_vectored)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1018 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ bytes[a5c5]::buf::buf_impl::Buf::advance)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1019 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::has_remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:30 ~ bytes[a5c5]::buf::buf_impl::Buf::has_remaining)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1020 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::copy_to_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:31 ~ bytes[a5c5]::buf::buf_impl::Buf::copy_to_slice)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1021 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:32 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1022 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_i8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:33 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1023 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:34 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u16)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1024 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_u16_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:35 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u16_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1025 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_u16_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:36 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u16_ne)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1026 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_i16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:37 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i16)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1027 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_i16_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:38 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i16_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1028 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_i16_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:39 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i16_ne)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1029 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u32)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1030 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_u32_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u32_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1031 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_u32_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u32_ne)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1032 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_i32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i32)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1033 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_i32_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i32_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1034 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_i32_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i32_ne)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1035 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u64)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1036 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_u64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u64_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1037 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_u64_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u64_ne)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1038 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_i64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i64)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1039 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_i64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i64_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1040 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_i64_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:51 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i64_ne)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1041 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_uint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:58 ~ bytes[a5c5]::buf::buf_impl::Buf::get_uint)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1042 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_uint_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ bytes[a5c5]::buf::buf_impl::Buf::get_uint_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1043 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_uint_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:60 ~ bytes[a5c5]::buf::buf_impl::Buf::get_uint_ne)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1044 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_int)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:61 ~ bytes[a5c5]::buf::buf_impl::Buf::get_int)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1045 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_int_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:62 ~ bytes[a5c5]::buf::buf_impl::Buf::get_int_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1046 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::get_int_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:63 ~ bytes[a5c5]::buf::buf_impl::Buf::get_int_ne)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1047 ~ bytes[a5c5]::buf::buf_impl::{impl#0}::copy_to_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:70 ~ bytes[a5c5]::buf::buf_impl::Buf::copy_to_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1048 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ bytes[a5c5]::buf::buf_impl::Buf::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1049 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:26 ~ bytes[a5c5]::buf::buf_impl::Buf::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1050 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::chunks_vectored)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:27 ~ bytes[a5c5]::buf::buf_impl::Buf::chunks_vectored)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1052 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ bytes[a5c5]::buf::buf_impl::Buf::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1053 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::has_remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:30 ~ bytes[a5c5]::buf::buf_impl::Buf::has_remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1054 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::copy_to_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:31 ~ bytes[a5c5]::buf::buf_impl::Buf::copy_to_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1055 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:32 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1056 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_i8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:33 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1057 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:34 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1058 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_u16_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:35 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u16_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1059 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_u16_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:36 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u16_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1060 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_i16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:37 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1061 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_i16_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:38 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i16_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1062 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_i16_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:39 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i16_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1063 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1064 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_u32_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u32_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1065 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_u32_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u32_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1066 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_i32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1067 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_i32_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i32_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1068 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_i32_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i32_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1069 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1070 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_u64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1071 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_u64_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ bytes[a5c5]::buf::buf_impl::Buf::get_u64_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1072 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_i64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1073 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_i64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1074 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_i64_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:51 ~ bytes[a5c5]::buf::buf_impl::Buf::get_i64_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1075 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_uint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:58 ~ bytes[a5c5]::buf::buf_impl::Buf::get_uint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1076 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_uint_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ bytes[a5c5]::buf::buf_impl::Buf::get_uint_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1077 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_uint_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:60 ~ bytes[a5c5]::buf::buf_impl::Buf::get_uint_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1078 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_int)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:61 ~ bytes[a5c5]::buf::buf_impl::Buf::get_int)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1079 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_int_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:62 ~ bytes[a5c5]::buf::buf_impl::Buf::get_int_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1080 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::get_int_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:63 ~ bytes[a5c5]::buf::buf_impl::Buf::get_int_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1081 ~ bytes[a5c5]::buf::buf_impl::{impl#1}::copy_to_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:70 ~ bytes[a5c5]::buf::buf_impl::Buf::copy_to_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:82 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:84 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::advance).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:84 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::advance).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:84 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::advance).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1415:12: 1415:16 (#0), res: Local(HirId(DefId(0:84 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::advance).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:84 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::advance).10), res: Local(HirId(DefId(0:84 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::advance).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1415:12: 1415:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1415:17: 1415:22 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1415:12: 1415:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:84 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::advance).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1415:25: 1415:28 (#0), res: Local(HirId(DefId(0:84 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::advance).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:84 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::advance).12), res: Local(HirId(DefId(0:84 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::advance).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1415:25: 1415:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:907 ~ bytes[a5c5]::panic_advance)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:85 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::copy_to_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:85 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::copy_to_slice).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:85 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::copy_to_slice).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:85 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::copy_to_slice).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1424:12: 1424:16 (#0), res: Local(HirId(DefId(0:85 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::copy_to_slice).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:85 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::copy_to_slice).10), res: Local(HirId(DefId(0:85 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::copy_to_slice).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1424:12: 1424:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1424:17: 1424:22 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1424:12: 1424:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:85 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::copy_to_slice).11), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:85 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::copy_to_slice).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:85 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::copy_to_slice).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1424:25: 1424:28 (#0), res: Local(HirId(DefId(0:85 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::copy_to_slice).4)), segments: [PathSegment { ident: dst#0, hir_id: HirId(DefId(0:85 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::copy_to_slice).14), res: Local(HirId(DefId(0:85 ~ bytes[a5c5]::buf::buf_impl::{impl#2}::copy_to_slice).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1424:25: 1424:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1424:29: 1424:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1424:25: 1424:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:907 ~ bytes[a5c5]::panic_advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ bytes[a5c5]::buf::buf_impl::Buf::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:88 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:903 ~ bytes[a5c5]::saturating_sub_usize_u64)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:3074 ~ std[e3cd]::io::cursor::{impl#0}::get_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:3076 ~ std[e3cd]::io::cursor::{impl#0}::position)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:89 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:3074 ~ std[e3cd]::io::cursor::{impl#0}::get_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:905 ~ bytes[a5c5]::min_u64_usize)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:3076 ~ std[e3cd]::io::cursor::{impl#0}::position)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:3074 ~ std[e3cd]::io::cursor::{impl#0}::get_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:3076 ~ std[e3cd]::io::cursor::{impl#0}::position)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:903 ~ bytes[a5c5]::saturating_sub_usize_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1454:12: 1454:15 (#0), res: Local(HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).36), res: Local(HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1454:12: 1454:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1454:18: 1454:25 (#0), res: Local(HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).32)), segments: [PathSegment { ident: max_cnt#0, hir_id: HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).38), res: Local(HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1454:18: 1454:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:907 ~ bytes[a5c5]::panic_advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:3077 ~ std[e3cd]::io::cursor::{impl#0}::set_position)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1460:27: 1460:30 (#0), res: Local(HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).57), res: Local(HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1460:27: 1460:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).58), kind: Cast(Expr { hir_id: HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1460:33: 1460:36 (#0), res: Local(HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).60), res: Local(HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1460:33: 1460:36 (#0) }, Ty { hir_id: HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1460:40: 1460:43 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:90 ~ bytes[a5c5]::buf::buf_impl::{impl#3}::advance).62), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1460:40: 1460:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_impl.rs:1460:33: 1460:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:91 ~ bytes[a5c5]::buf::buf_impl::_assert_trait_object)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1082 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:112 ~ bytes[a5c5]::buf::buf_mut::BufMut::remaining_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1083 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::chunk_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ bytes[a5c5]::buf::buf_mut::BufMut::chunk_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1084 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ bytes[a5c5]::buf::buf_mut::BufMut::advance_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1085 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_slice)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1086 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1087 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_i8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1088 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:122 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u16)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1089 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_u16_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u16_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1090 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_u16_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u16_ne)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1091 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_i16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i16)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1092 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_i16_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i16_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1093 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_i16_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i16_ne)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1094 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u32)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1095 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_u32_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u32_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1096 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_u32_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:130 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u32_ne)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1097 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_i32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:131 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i32)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1098 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_i32_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i32_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1099 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_i32_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:133 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i32_ne)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1100 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:134 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u64)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1101 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_u64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:135 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u64_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1102 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_u64_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:136 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u64_ne)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1103 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_i64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:137 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i64)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1104 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_i64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:138 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i64_le)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1105 ~ bytes[a5c5]::buf::buf_mut::{impl#0}::put_i64_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:139 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i64_ne)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1106 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:112 ~ bytes[a5c5]::buf::buf_mut::BufMut::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1107 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::chunk_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ bytes[a5c5]::buf::buf_mut::BufMut::chunk_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1108 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ bytes[a5c5]::buf::buf_mut::BufMut::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1109 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1110 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1111 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_i8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1112 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:122 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1113 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_u16_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u16_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1114 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_u16_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:124 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u16_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1115 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_i16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i16)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1116 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_i16_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i16_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1117 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_i16_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:127 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i16_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1118 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1119 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_u32_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u32_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1120 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_u32_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:130 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u32_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1121 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_i32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:131 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1122 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_i32_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i32_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1123 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_i32_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:133 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i32_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1124 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:134 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1125 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_u64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:135 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1126 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_u64_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:136 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u64_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1127 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_i64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:137 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1128 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_i64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:138 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i64_le)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1129 ~ bytes[a5c5]::buf::buf_mut::{impl#1}::put_i64_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:139 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_i64_ne)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:168 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:169 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::chunk_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:315 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:170 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:170 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::advance_mut).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:170 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::advance_mut).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:170 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::advance_mut).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1489:12: 1489:16 (#0), res: Local(HirId(DefId(0:170 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::advance_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:170 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::advance_mut).10), res: Local(HirId(DefId(0:170 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::advance_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1489:12: 1489:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1489:17: 1489:22 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1489:12: 1489:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:170 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::advance_mut).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1489:25: 1489:28 (#0), res: Local(HirId(DefId(0:170 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::advance_mut).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:170 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::advance_mut).12), res: Local(HirId(DefId(0:170 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::advance_mut).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1489:25: 1489:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:907 ~ bytes[a5c5]::panic_advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13327 ~ core[7d5a]::slice::{impl#0}::split_at_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:171 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:171 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_slice).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:171 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_slice).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:171 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_slice).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1500:12: 1500:16 (#0), res: Local(HirId(DefId(0:171 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_slice).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:171 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_slice).10), res: Local(HirId(DefId(0:171 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_slice).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1500:12: 1500:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1500:17: 1500:22 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1500:12: 1500:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:171 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_slice).11), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:171 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_slice).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:171 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_slice).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1500:25: 1500:28 (#0), res: Local(HirId(DefId(0:171 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_slice).4)), segments: [PathSegment { ident: src#0, hir_id: HirId(DefId(0:171 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_slice).14), res: Local(HirId(DefId(0:171 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_slice).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1500:25: 1500:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1500:29: 1500:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1500:25: 1500:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:907 ~ bytes[a5c5]::panic_advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13403 ~ core[7d5a]::slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ bytes[a5c5]::buf::buf_mut::BufMut::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:172 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:172 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_bytes).9), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:172 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_bytes).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:172 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_bytes).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1511:12: 1511:16 (#0), res: Local(HirId(DefId(0:172 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_bytes).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:172 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_bytes).12), res: Local(HirId(DefId(0:172 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_bytes).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1511:12: 1511:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1511:17: 1511:22 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1511:12: 1511:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:172 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_bytes).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1511:25: 1511:28 (#0), res: Local(HirId(DefId(0:172 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_bytes).6)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:172 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_bytes).14), res: Local(HirId(DefId(0:172 ~ bytes[a5c5]::buf::buf_mut::{impl#2}::put_bytes).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1511:25: 1511:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:907 ~ bytes[a5c5]::panic_advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1990 ~ core[7d5a]::intrinsics::write_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ bytes[a5c5]::buf::buf_mut::BufMut::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:174 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:175 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::chunk_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:316 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:176 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:176 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::advance_mut).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:176 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::advance_mut).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:176 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::advance_mut).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1536:12: 1536:16 (#0), res: Local(HirId(DefId(0:176 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::advance_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:176 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::advance_mut).10), res: Local(HirId(DefId(0:176 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::advance_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1536:12: 1536:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1536:17: 1536:22 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1536:12: 1536:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:176 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::advance_mut).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1536:25: 1536:28 (#0), res: Local(HirId(DefId(0:176 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::advance_mut).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:176 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::advance_mut).12), res: Local(HirId(DefId(0:176 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::advance_mut).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1536:25: 1536:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:907 ~ bytes[a5c5]::panic_advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13327 ~ core[7d5a]::slice::{impl#0}::split_at_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:177 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:177 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_slice).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:177 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_slice).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:177 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_slice).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1547:12: 1547:16 (#0), res: Local(HirId(DefId(0:177 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_slice).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:177 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_slice).10), res: Local(HirId(DefId(0:177 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_slice).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1547:12: 1547:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1547:17: 1547:22 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1547:12: 1547:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:177 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_slice).11), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:177 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_slice).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:177 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_slice).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1547:25: 1547:28 (#0), res: Local(HirId(DefId(0:177 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_slice).4)), segments: [PathSegment { ident: src#0, hir_id: HirId(DefId(0:177 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_slice).14), res: Local(HirId(DefId(0:177 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_slice).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1547:25: 1547:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1547:29: 1547:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1547:25: 1547:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:907 ~ bytes[a5c5]::panic_advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ bytes[a5c5]::buf::buf_mut::BufMut::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:178 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:178 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_bytes).9), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:178 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_bytes).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:178 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_bytes).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1560:12: 1560:16 (#0), res: Local(HirId(DefId(0:178 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_bytes).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:178 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_bytes).12), res: Local(HirId(DefId(0:178 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_bytes).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1560:12: 1560:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1560:17: 1560:22 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1560:12: 1560:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:178 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_bytes).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1560:25: 1560:28 (#0), res: Local(HirId(DefId(0:178 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_bytes).6)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:178 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_bytes).14), res: Local(HirId(DefId(0:178 ~ bytes[a5c5]::buf::buf_mut::{impl#3}::put_bytes).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1560:25: 1560:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:907 ~ bytes[a5c5]::panic_advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1990 ~ core[7d5a]::intrinsics::write_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ bytes[a5c5]::buf::buf_mut::BufMut::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:180 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:180 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::remaining_mut).4), kind: Cast(Expr { hir_id: HirId(DefId(0:180 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::remaining_mut).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1576:9: 1576:25 (#0), res: Def(Const, DefId(1:17540 ~ core[7d5a]::isize::MAX)), segments: [PathSegment { ident: core#0, hir_id: HirId(DefId(0:180 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::remaining_mut).6), res: Def(Mod, DefId(1:0 ~ core[7d5a])), args: None, infer_args: true }, PathSegment { ident: isize#0, hir_id: HirId(DefId(0:180 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::remaining_mut).7), res: Def(Mod, DefId(1:72 ~ core[7d5a]::isize)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:180 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::remaining_mut).8), res: Def(Const, DefId(1:17540 ~ core[7d5a]::isize::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1576:9: 1576:25 (#0) }, Ty { hir_id: HirId(DefId(0:180 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::remaining_mut).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1576:29: 1576:34 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:180 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::remaining_mut).10), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1576:29: 1576:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1576:9: 1576:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:180 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::remaining_mut).11), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:180 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::remaining_mut).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:180 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::remaining_mut).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1576:37: 1576:41 (#0), res: Local(HirId(DefId(0:180 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::remaining_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:180 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::remaining_mut).14), res: Local(HirId(DefId(0:180 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::remaining_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1576:37: 1576:41 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1576:42: 1576:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1576:37: 1576:47 (#0) }
[DEBUG] Trying to get func ty of defid DefId(4:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).14), kind: MethodCall(PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1582:25: 1582:29 (#0), res: Local(HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).17), res: Local(HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1582:25: 1582:29 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1582:30: 1582:40 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1582:25: 1582:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1582:43: 1582:46 (#0), res: Local(HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).11)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).19), res: Local(HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1582:43: 1582:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(4:7439 ~ alloc[5873]::vec::{impl#1}::capacity)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1584:12: 1584:21 (#0), res: Local(HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).21)), segments: [PathSegment { ident: remaining#0, hir_id: HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).25), res: Local(HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1584:12: 1584:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1584:24: 1584:27 (#0), res: Local(HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).27), res: Local(HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1584:24: 1584:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:907 ~ bytes[a5c5]::panic_advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7453 ~ alloc[5873]::vec::{impl#1}::set_len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1589:22: 1589:25 (#0), res: Local(HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).11)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).46), res: Local(HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1589:22: 1589:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1589:28: 1589:31 (#0), res: Local(HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).48), res: Local(HirId(DefId(0:181 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::advance_mut).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1589:28: 1589:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).5), kind: MethodCall(PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).6), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1594:12: 1594:16 (#0), res: Local(HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).8), res: Local(HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1594:12: 1594:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1594:17: 1594:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1594:12: 1594:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).9), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1594:31: 1594:35 (#0), res: Local(HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).12), res: Local(HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1594:31: 1594:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1594:36: 1594:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1594:31: 1594:41 (#0) }
[DEBUG] Trying to get func ty of defid DefId(4:7439 ~ alloc[5873]::vec::{impl#1}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7440 ~ alloc[5873]::vec::{impl#1}::reserve)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(4:7439 ~ alloc[5873]::vec::{impl#1}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7451 ~ alloc[5873]::vec::{impl#1}::as_mut_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:318 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::from_raw_parts_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2689 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1605:64: 1605:67 (#0), res: Local(HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).29)), segments: [PathSegment { ident: cap#0, hir_id: HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).58), res: Local(HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1605:64: 1605:67 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1605:70: 1605:73 (#0), res: Local(HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).36)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).60), res: Local(HirId(DefId(0:182 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::chunk_mut).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/buf_mut.rs:1605:70: 1605:73 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:183 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::put)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7440 ~ alloc[5873]::vec::{impl#1}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ bytes[a5c5]::buf::buf_impl::Buf::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:30 ~ bytes[a5c5]::buf::buf_impl::Buf::has_remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:26 ~ bytes[a5c5]::buf::buf_impl::Buf::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7527 ~ alloc[5873]::vec::{impl#2}::extend_from_slice)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ bytes[a5c5]::buf::buf_impl::Buf::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:185 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::put_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7527 ~ alloc[5873]::vec::{impl#2}::extend_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:186 ~ bytes[a5c5]::buf::buf_mut::{impl#4}::put_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25428 ~ core[7d5a]::num::{impl#11}::saturating_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(4:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7526 ~ alloc[5873]::vec::{impl#2}::resize)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:187 ~ bytes[a5c5]::buf::buf_mut::_assert_trait_object)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1138 ~ bytes[a5c5]::buf::chain::{impl#4}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:200 ~ bytes[a5c5]::buf::chain::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:201 ~ bytes[a5c5]::buf::chain::{impl#0}::first_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:202 ~ bytes[a5c5]::buf::chain::{impl#0}::first_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:203 ~ bytes[a5c5]::buf::chain::{impl#0}::last_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:204 ~ bytes[a5c5]::buf::chain::{impl#0}::last_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:205 ~ bytes[a5c5]::buf::chain::{impl#0}::into_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:209 ~ bytes[a5c5]::buf::chain::{impl#1}::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25428 ~ core[7d5a]::num::{impl#11}::saturating_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ bytes[a5c5]::buf::buf_impl::Buf::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ bytes[a5c5]::buf::buf_impl::Buf::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:210 ~ bytes[a5c5]::buf::chain::{impl#1}::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:30 ~ bytes[a5c5]::buf::buf_impl::Buf::has_remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:26 ~ bytes[a5c5]::buf::buf_impl::Buf::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:26 ~ bytes[a5c5]::buf::buf_impl::Buf::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:211 ~ bytes[a5c5]::buf::chain::{impl#1}::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ bytes[a5c5]::buf::buf_impl::Buf::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:211 ~ bytes[a5c5]::buf::chain::{impl#1}::advance).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:150:12: 150:17 (#0), res: Local(HirId(DefId(0:211 ~ bytes[a5c5]::buf::chain::{impl#1}::advance).12)), segments: [PathSegment { ident: a_rem#0, hir_id: HirId(DefId(0:211 ~ bytes[a5c5]::buf::chain::{impl#1}::advance).16), res: Local(HirId(DefId(0:211 ~ bytes[a5c5]::buf::chain::{impl#1}::advance).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:150:12: 150:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:211 ~ bytes[a5c5]::buf::chain::{impl#1}::advance).17), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:150:21: 150:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:150:21: 150:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:211 ~ bytes[a5c5]::buf::chain::{impl#1}::advance).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:151:16: 151:21 (#0), res: Local(HirId(DefId(0:211 ~ bytes[a5c5]::buf::chain::{impl#1}::advance).12)), segments: [PathSegment { ident: a_rem#0, hir_id: HirId(DefId(0:211 ~ bytes[a5c5]::buf::chain::{impl#1}::advance).22), res: Local(HirId(DefId(0:211 ~ bytes[a5c5]::buf::chain::{impl#1}::advance).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:151:16: 151:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:211 ~ bytes[a5c5]::buf::chain::{impl#1}::advance).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:151:25: 151:28 (#0), res: Local(HirId(DefId(0:211 ~ bytes[a5c5]::buf::chain::{impl#1}::advance).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:211 ~ bytes[a5c5]::buf::chain::{impl#1}::advance).24), res: Local(HirId(DefId(0:211 ~ bytes[a5c5]::buf::chain::{impl#1}::advance).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:151:25: 151:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ bytes[a5c5]::buf::buf_impl::Buf::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ bytes[a5c5]::buf::buf_impl::Buf::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ bytes[a5c5]::buf::buf_impl::Buf::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:212 ~ bytes[a5c5]::buf::chain::{impl#1}::chunks_vectored)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:27 ~ bytes[a5c5]::buf::buf_impl::Buf::chunks_vectored)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:27 ~ bytes[a5c5]::buf::buf_impl::Buf::chunks_vectored)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ bytes[a5c5]::buf::buf_impl::Buf::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:174:12: 174:17 (#0), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).12)), segments: [PathSegment { ident: a_rem#0, hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).16), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:174:12: 174:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:174:21: 174:24 (#0), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).4)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).18), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:174:21: 174:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:70 ~ bytes[a5c5]::buf::buf_impl::Buf::copy_to_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:176:19: 176:24 (#0), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).12)), segments: [PathSegment { ident: a_rem#0, hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).32), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:176:19: 176:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).33), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:176:28: 176:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:176:28: 176:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:70 ~ bytes[a5c5]::buf::buf_impl::Buf::copy_to_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).48), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:21: 180:22 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:17: 180:20 (#0), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).4)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).50), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:17: 180:20 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:23: 180:28 (#0), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).12)), segments: [PathSegment { ident: a_rem#0, hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).52), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:23: 180:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:17: 180:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).53), kind: MethodCall(PathSegment { ident: remaining#0, hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).54), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).55), kind: Field(Expr { hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:32: 180:36 (#0), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).57), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:32: 180:36 (#0) }, b#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:32: 180:38 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:39: 180:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:32: 180:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:17: 180:20 (#0), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).4)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).50), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:17: 180:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:23: 180:28 (#0), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).12)), segments: [PathSegment { ident: a_rem#0, hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).52), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:180:23: 180:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ bytes[a5c5]::buf::buf_impl::Buf::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:663 ~ bytes[a5c5]::bytes_mut::{impl#0}::with_capacity)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:116 ~ bytes[a5c5]::buf::buf_mut::BufMut::put)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:116 ~ bytes[a5c5]::buf::buf_mut::BufMut::put)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:72 ~ bytes[a5c5]::buf::buf_impl::Buf::take)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:185:40: 185:43 (#0), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).4)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).100), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:185:40: 185:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:185:46: 185:51 (#0), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).12)), segments: [PathSegment { ident: a_rem#0, hir_id: HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).102), res: Local(HirId(DefId(0:214 ~ bytes[a5c5]::buf::chain::{impl#1}::copy_to_bytes).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:185:46: 185:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:218 ~ bytes[a5c5]::buf::chain::{impl#2}::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25428 ~ core[7d5a]::num::{impl#11}::saturating_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:112 ~ bytes[a5c5]::buf::buf_mut::BufMut::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:112 ~ bytes[a5c5]::buf::buf_mut::BufMut::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ bytes[a5c5]::buf::chain::{impl#2}::chunk_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ bytes[a5c5]::buf::buf_mut::BufMut::has_remaining_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ bytes[a5c5]::buf::buf_mut::BufMut::chunk_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ bytes[a5c5]::buf::buf_mut::BufMut::chunk_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:220 ~ bytes[a5c5]::buf::chain::{impl#2}::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:112 ~ bytes[a5c5]::buf::buf_mut::BufMut::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:220 ~ bytes[a5c5]::buf::chain::{impl#2}::advance_mut).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:213:12: 213:17 (#0), res: Local(HirId(DefId(0:220 ~ bytes[a5c5]::buf::chain::{impl#2}::advance_mut).12)), segments: [PathSegment { ident: a_rem#0, hir_id: HirId(DefId(0:220 ~ bytes[a5c5]::buf::chain::{impl#2}::advance_mut).16), res: Local(HirId(DefId(0:220 ~ bytes[a5c5]::buf::chain::{impl#2}::advance_mut).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:213:12: 213:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:220 ~ bytes[a5c5]::buf::chain::{impl#2}::advance_mut).17), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:213:21: 213:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:213:21: 213:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:220 ~ bytes[a5c5]::buf::chain::{impl#2}::advance_mut).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:214:16: 214:21 (#0), res: Local(HirId(DefId(0:220 ~ bytes[a5c5]::buf::chain::{impl#2}::advance_mut).12)), segments: [PathSegment { ident: a_rem#0, hir_id: HirId(DefId(0:220 ~ bytes[a5c5]::buf::chain::{impl#2}::advance_mut).22), res: Local(HirId(DefId(0:220 ~ bytes[a5c5]::buf::chain::{impl#2}::advance_mut).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:214:16: 214:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:220 ~ bytes[a5c5]::buf::chain::{impl#2}::advance_mut).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:214:25: 214:28 (#0), res: Local(HirId(DefId(0:220 ~ bytes[a5c5]::buf::chain::{impl#2}::advance_mut).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:220 ~ bytes[a5c5]::buf::chain::{impl#2}::advance_mut).24), res: Local(HirId(DefId(0:220 ~ bytes[a5c5]::buf::chain::{impl#2}::advance_mut).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/chain.rs:214:25: 214:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ bytes[a5c5]::buf::buf_mut::BufMut::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ bytes[a5c5]::buf::buf_mut::BufMut::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ bytes[a5c5]::buf::buf_mut::BufMut::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:226 ~ bytes[a5c5]::buf::chain::{impl#3}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:231 ~ bytes[a5c5]::buf::iter::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1144 ~ bytes[a5c5]::buf::iter::{impl#3}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:231 ~ bytes[a5c5]::buf::iter::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:232 ~ bytes[a5c5]::buf::iter::{impl#0}::into_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:233 ~ bytes[a5c5]::buf::iter::{impl#0}::get_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:234 ~ bytes[a5c5]::buf::iter::{impl#0}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:238 ~ bytes[a5c5]::buf::iter::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:30 ~ bytes[a5c5]::buf::buf_impl::Buf::has_remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:26 ~ bytes[a5c5]::buf::buf_impl::Buf::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ bytes[a5c5]::buf::buf_impl::Buf::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:239 ~ bytes[a5c5]::buf::iter::{impl#1}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ bytes[a5c5]::buf::buf_impl::Buf::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1151 ~ bytes[a5c5]::buf::limit::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ bytes[a5c5]::buf::limit::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:250 ~ bytes[a5c5]::buf::limit::{impl#0}::into_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:251 ~ bytes[a5c5]::buf::limit::{impl#0}::get_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:252 ~ bytes[a5c5]::buf::limit::{impl#0}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:253 ~ bytes[a5c5]::buf::limit::{impl#0}::limit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:254 ~ bytes[a5c5]::buf::limit::{impl#0}::set_limit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:257 ~ bytes[a5c5]::buf::limit::{impl#1}::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:112 ~ bytes[a5c5]::buf::buf_mut::BufMut::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:258 ~ bytes[a5c5]::buf::limit::{impl#1}::chunk_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ bytes[a5c5]::buf::buf_mut::BufMut::chunk_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:325 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:259 ~ bytes[a5c5]::buf::limit::{impl#1}::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:259 ~ bytes[a5c5]::buf::limit::{impl#1}::advance_mut).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/limit.rs:71:17: 71:20 (#0), res: Local(HirId(DefId(0:259 ~ bytes[a5c5]::buf::limit::{impl#1}::advance_mut).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:259 ~ bytes[a5c5]::buf::limit::{impl#1}::advance_mut).9), res: Local(HirId(DefId(0:259 ~ bytes[a5c5]::buf::limit::{impl#1}::advance_mut).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/limit.rs:71:17: 71:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:259 ~ bytes[a5c5]::buf::limit::{impl#1}::advance_mut).10), kind: Field(Expr { hir_id: HirId(DefId(0:259 ~ bytes[a5c5]::buf::limit::{impl#1}::advance_mut).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/limit.rs:71:24: 71:28 (#0), res: Local(HirId(DefId(0:259 ~ bytes[a5c5]::buf::limit::{impl#1}::advance_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:259 ~ bytes[a5c5]::buf::limit::{impl#1}::advance_mut).12), res: Local(HirId(DefId(0:259 ~ bytes[a5c5]::buf::limit::{impl#1}::advance_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/limit.rs:71:24: 71:28 (#0) }, limit#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/limit.rs:71:24: 71:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ bytes[a5c5]::buf::buf_mut::BufMut::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1157 ~ bytes[a5c5]::buf::reader::{impl#3}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:265 ~ bytes[a5c5]::buf::reader::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:269 ~ bytes[a5c5]::buf::reader::{impl#0}::get_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:270 ~ bytes[a5c5]::buf::reader::{impl#0}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:271 ~ bytes[a5c5]::buf::reader::{impl#0}::into_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:274 ~ bytes[a5c5]::buf::reader::{impl#1}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ bytes[a5c5]::buf::buf_impl::Buf::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:31 ~ bytes[a5c5]::buf::buf_impl::Buf::copy_to_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:277 ~ bytes[a5c5]::buf::reader::{impl#2}::fill_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:26 ~ bytes[a5c5]::buf::buf_impl::Buf::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:278 ~ bytes[a5c5]::buf::reader::{impl#2}::consume)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ bytes[a5c5]::buf::buf_impl::Buf::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1164 ~ bytes[a5c5]::buf::take::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:284 ~ bytes[a5c5]::buf::take::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:288 ~ bytes[a5c5]::buf::take::{impl#0}::into_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:289 ~ bytes[a5c5]::buf::take::{impl#0}::get_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:290 ~ bytes[a5c5]::buf::take::{impl#0}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:291 ~ bytes[a5c5]::buf::take::{impl#0}::limit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:292 ~ bytes[a5c5]::buf::take::{impl#0}::set_limit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:295 ~ bytes[a5c5]::buf::take::{impl#1}::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ bytes[a5c5]::buf::buf_impl::Buf::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:296 ~ bytes[a5c5]::buf::take::{impl#1}::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:26 ~ bytes[a5c5]::buf::buf_impl::Buf::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:297 ~ bytes[a5c5]::buf::take::{impl#1}::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:297 ~ bytes[a5c5]::buf::take::{impl#1}::advance).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/take.rs:143:17: 143:20 (#0), res: Local(HirId(DefId(0:297 ~ bytes[a5c5]::buf::take::{impl#1}::advance).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:297 ~ bytes[a5c5]::buf::take::{impl#1}::advance).9), res: Local(HirId(DefId(0:297 ~ bytes[a5c5]::buf::take::{impl#1}::advance).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/take.rs:143:17: 143:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:297 ~ bytes[a5c5]::buf::take::{impl#1}::advance).10), kind: Field(Expr { hir_id: HirId(DefId(0:297 ~ bytes[a5c5]::buf::take::{impl#1}::advance).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/take.rs:143:24: 143:28 (#0), res: Local(HirId(DefId(0:297 ~ bytes[a5c5]::buf::take::{impl#1}::advance).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:297 ~ bytes[a5c5]::buf::take::{impl#1}::advance).12), res: Local(HirId(DefId(0:297 ~ bytes[a5c5]::buf::take::{impl#1}::advance).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/take.rs:143:24: 143:28 (#0) }, limit#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/take.rs:143:24: 143:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ bytes[a5c5]::buf::buf_impl::Buf::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:298 ~ bytes[a5c5]::buf::take::{impl#1}::copy_to_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:298 ~ bytes[a5c5]::buf::take::{impl#1}::copy_to_bytes).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/take.rs:149:17: 149:20 (#0), res: Local(HirId(DefId(0:298 ~ bytes[a5c5]::buf::take::{impl#1}::copy_to_bytes).4)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:298 ~ bytes[a5c5]::buf::take::{impl#1}::copy_to_bytes).9), res: Local(HirId(DefId(0:298 ~ bytes[a5c5]::buf::take::{impl#1}::copy_to_bytes).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/take.rs:149:17: 149:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:298 ~ bytes[a5c5]::buf::take::{impl#1}::copy_to_bytes).10), kind: MethodCall(PathSegment { ident: remaining#0, hir_id: HirId(DefId(0:298 ~ bytes[a5c5]::buf::take::{impl#1}::copy_to_bytes).11), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:298 ~ bytes[a5c5]::buf::take::{impl#1}::copy_to_bytes).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/take.rs:149:24: 149:28 (#0), res: Local(HirId(DefId(0:298 ~ bytes[a5c5]::buf::take::{impl#1}::copy_to_bytes).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:298 ~ bytes[a5c5]::buf::take::{impl#1}::copy_to_bytes).13), res: Local(HirId(DefId(0:298 ~ bytes[a5c5]::buf::take::{impl#1}::copy_to_bytes).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/take.rs:149:24: 149:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/take.rs:149:29: 149:40 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/take.rs:149:24: 149:40 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ bytes[a5c5]::buf::buf_impl::Buf::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:70 ~ bytes[a5c5]::buf::buf_impl::Buf::copy_to_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:315 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:316 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:317 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:318 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::from_raw_parts_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13131 ~ core[7d5a]::slice::raw::from_raw_parts_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:316 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:320 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::write_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:320 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::write_byte).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/uninit_slice.rs:108:17: 108:22 (#0), res: Local(HirId(DefId(0:320 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::write_byte).4)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:320 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::write_byte).11), res: Local(HirId(DefId(0:320 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::write_byte).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/uninit_slice.rs:108:17: 108:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:320 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::write_byte).12), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:320 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::write_byte).13), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:320 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::write_byte).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/uninit_slice.rs:108:25: 108:29 (#0), res: Local(HirId(DefId(0:320 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::write_byte).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:320 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::write_byte).15), res: Local(HirId(DefId(0:320 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::write_byte).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/uninit_slice.rs:108:25: 108:29 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/uninit_slice.rs:108:30: 108:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/buf/uninit_slice.rs:108:25: 108:35 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:325 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2705 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::write)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:323 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::as_mut_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:321 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:325 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:321 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::copy_from_slice).26), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:321 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::copy_from_slice).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#74), res: Local(HirId(DefId(0:321 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::copy_from_slice).18)), segments: [PathSegment { ident: left_val#74, hir_id: HirId(DefId(0:321 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::copy_from_slice).28), res: Local(HirId(DefId(0:321 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::copy_from_slice).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#74) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#74) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:321 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::copy_from_slice).29), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:321 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::copy_from_slice).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#74), res: Local(HirId(DefId(0:321 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::copy_from_slice).19)), segments: [PathSegment { ident: right_val#74, hir_id: HirId(DefId(0:321 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::copy_from_slice).31), res: Local(HirId(DefId(0:321 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::copy_from_slice).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#74) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#74) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:323 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:325 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:323 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:324 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::as_uninit_slice_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:325 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:327 ~ bytes[a5c5]::buf::uninit_slice::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:330 ~ bytes[a5c5]::buf::uninit_slice::{impl#2}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:315 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:333 ~ bytes[a5c5]::buf::uninit_slice::{impl#3}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:316 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1167 ~ bytes[a5c5]::buf::uninit_slice::{impl#4}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:317 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1169 ~ bytes[a5c5]::buf::uninit_slice::{impl#5}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:316 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1172 ~ bytes[a5c5]::buf::uninit_slice::{impl#6}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:317 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1174 ~ bytes[a5c5]::buf::uninit_slice::{impl#7}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:316 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1177 ~ bytes[a5c5]::buf::uninit_slice::{impl#8}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:317 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1179 ~ bytes[a5c5]::buf::uninit_slice::{impl#9}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:316 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1182 ~ bytes[a5c5]::buf::uninit_slice::{impl#10}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:317 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1184 ~ bytes[a5c5]::buf::uninit_slice::{impl#11}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:316 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1187 ~ bytes[a5c5]::buf::uninit_slice::{impl#12}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:317 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1189 ~ bytes[a5c5]::buf::uninit_slice::{impl#13}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:316 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1192 ~ bytes[a5c5]::buf::uninit_slice::{impl#14}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:317 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1194 ~ bytes[a5c5]::buf::uninit_slice::{impl#15}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:316 ~ bytes[a5c5]::buf::uninit_slice::{impl#0}::uninit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:339 ~ bytes[a5c5]::buf::vec_deque::{impl#0}::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:4746 ~ alloc[5873]::collections::vec_deque::{impl#5}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:340 ~ bytes[a5c5]::buf::vec_deque::{impl#0}::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:4744 ~ alloc[5873]::collections::vec_deque::{impl#5}::as_slices)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13229 ~ core[7d5a]::slice::{impl#0}::is_empty)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ bytes[a5c5]::buf::vec_deque::{impl#0}::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:4754 ~ alloc[5873]::collections::vec_deque::{impl#5}::drain)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] lang item being silently ignored, 
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(0:1200 ~ bytes[a5c5]::buf::writer::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:347 ~ bytes[a5c5]::buf::writer::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:351 ~ bytes[a5c5]::buf::writer::{impl#0}::get_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:352 ~ bytes[a5c5]::buf::writer::{impl#0}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:353 ~ bytes[a5c5]::buf::writer::{impl#0}::into_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:356 ~ bytes[a5c5]::buf::writer::{impl#1}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:112 ~ bytes[a5c5]::buf::buf_mut::BufMut::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:116 ~ bytes[a5c5]::buf::buf_mut::BufMut::put)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:357 ~ bytes[a5c5]::buf::writer::{impl#1}::flush)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:416 ~ bytes[a5c5]::bytes::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:418 ~ bytes[a5c5]::bytes::{impl#0}::from_static)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:418 ~ bytes[a5c5]::bytes::{impl#0}::from_static)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10610 ~ core[7d5a]::sync::atomic::{impl#6}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2754 ~ core[7d5a]::ptr::null_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:419 ~ bytes[a5c5]::bytes::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ bytes[a5c5]::bytes::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:420 ~ bytes[a5c5]::bytes::{impl#0}::is_empty).4), kind: Field(Expr { hir_id: HirId(DefId(0:420 ~ bytes[a5c5]::bytes::{impl#0}::is_empty).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:212:9: 212:13 (#0), res: Local(HirId(DefId(0:420 ~ bytes[a5c5]::bytes::{impl#0}::is_empty).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:420 ~ bytes[a5c5]::bytes::{impl#0}::is_empty).6), res: Local(HirId(DefId(0:420 ~ bytes[a5c5]::bytes::{impl#0}::is_empty).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:212:9: 212:13 (#0) }, len#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:212:9: 212:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:420 ~ bytes[a5c5]::bytes::{impl#0}::is_empty).7), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:212:21: 212:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:212:21: 212:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:421 ~ bytes[a5c5]::bytes::{impl#0}::is_unique)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:421 ~ bytes[a5c5]::bytes::{impl#0}::is_unique).5), kind: Field(Expr { hir_id: HirId(DefId(0:421 ~ bytes[a5c5]::bytes::{impl#0}::is_unique).6), kind: Field(Expr { hir_id: HirId(DefId(0:421 ~ bytes[a5c5]::bytes::{impl#0}::is_unique).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:234:19: 234:23 (#0), res: Local(HirId(DefId(0:421 ~ bytes[a5c5]::bytes::{impl#0}::is_unique).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:421 ~ bytes[a5c5]::bytes::{impl#0}::is_unique).8), res: Local(HirId(DefId(0:421 ~ bytes[a5c5]::bytes::{impl#0}::is_unique).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:234:19: 234:23 (#0) }, vtable#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:234:19: 234:30 (#0) }, is_unique#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:234:18: 234:41 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ bytes[a5c5]::bytes::{impl#0}::copy_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(4:5735 ~ alloc[5873]::slice::{impl#0}::to_vec)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:419 ~ bytes[a5c5]::bytes::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3817 ~ core[7d5a]::ops::range::RangeBounds::start_bound)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3818 ~ core[7d5a]::ops::range::RangeBounds::end_bound)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:282:13: 282:18 (#0), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).47)), segments: [PathSegment { ident: begin#0, hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).88), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:282:13: 282:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).89), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:282:22: 282:25 (#0), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).83)), segments: [PathSegment { ident: end#0, hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).90), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).83)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:282:22: 282:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:288:13: 288:16 (#0), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).83)), segments: [PathSegment { ident: end#0, hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).134), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).83)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:288:13: 288:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).135), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:288:20: 288:23 (#0), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).12)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).136), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:288:20: 288:23 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).178), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:294:12: 294:15 (#0), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).83)), segments: [PathSegment { ident: end#0, hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).179), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).83)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:294:12: 294:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:294:19: 294:24 (#0), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).47)), segments: [PathSegment { ident: begin#0, hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).181), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:294:19: 294:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:416 ~ bytes[a5c5]::bytes::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).205), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:300:19: 300:22 (#0), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).83)), segments: [PathSegment { ident: end#0, hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).206), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).83)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:300:19: 300:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).207), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:300:25: 300:30 (#0), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).47)), segments: [PathSegment { ident: begin#0, hir_id: HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).208), res: Local(HirId(DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:300:25: 300:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2591 ~ core[7d5a]::ptr::const_ptr::{impl#0}::add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13229 ~ core[7d5a]::slice::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:416 ~ bytes[a5c5]::bytes::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:419 ~ bytes[a5c5]::bytes::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:345:13: 345:18 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).47)), segments: [PathSegment { ident: sub_p#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).59), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:345:13: 345:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:345:22: 345:29 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).30)), segments: [PathSegment { ident: bytes_p#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).61), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:345:22: 345:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11051 ~ core[7d5a]::fmt::rt::{impl#1}::new_pointer)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11051 ~ core[7d5a]::fmt::rt::{impl#1}::new_pointer)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).109), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:19: 351:20 (#0) }, Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:13: 351:18 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).47)), segments: [PathSegment { ident: sub_p#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).111), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:13: 351:18 (#0) }, Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).112), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:21: 351:28 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).54)), segments: [PathSegment { ident: sub_len#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).113), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:21: 351:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:13: 351:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).114), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:40: 351:41 (#0) }, Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:32: 351:39 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).30)), segments: [PathSegment { ident: bytes_p#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).116), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:32: 351:39 (#0) }, Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:42: 351:51 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).37)), segments: [PathSegment { ident: bytes_len#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).118), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:42: 351:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:32: 351:51 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:13: 351:18 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).47)), segments: [PathSegment { ident: sub_p#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).111), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:13: 351:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).112), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:21: 351:28 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).54)), segments: [PathSegment { ident: sub_len#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).113), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:21: 351:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:32: 351:39 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).30)), segments: [PathSegment { ident: bytes_p#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).116), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:32: 351:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:42: 351:51 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).37)), segments: [PathSegment { ident: bytes_len#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).118), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:351:42: 351:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11051 ~ core[7d5a]::fmt::rt::{impl#1}::new_pointer)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11051 ~ core[7d5a]::fmt::rt::{impl#1}::new_pointer)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).183), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:359:26: 359:31 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).47)), segments: [PathSegment { ident: sub_p#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).184), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:359:26: 359:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).185), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:359:34: 359:41 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).30)), segments: [PathSegment { ident: bytes_p#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).186), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:359:34: 359:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:423 ~ bytes[a5c5]::bytes::{impl#0}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).198), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:361:33: 361:43 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).188)), segments: [PathSegment { ident: sub_offset#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).199), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).188)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:361:33: 361:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).200), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:361:46: 361:53 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).54)), segments: [PathSegment { ident: sub_len#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).201), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:361:46: 361:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).198), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:361:33: 361:43 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).188)), segments: [PathSegment { ident: sub_offset#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).199), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).188)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:361:33: 361:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).200), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:361:46: 361:53 (#0), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).54)), segments: [PathSegment { ident: sub_len#0, hir_id: HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).201), res: Local(HirId(DefId(0:426 ~ bytes[a5c5]::bytes::{impl#0}::slice_ref).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:361:46: 361:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:389:12: 389:14 (#0), res: Local(HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).4)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).8), res: Local(HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:389:12: 389:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).9), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:389:18: 389:22 (#0), res: Local(HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).12), res: Local(HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:389:18: 389:22 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:389:23: 389:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:389:18: 389:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:419 ~ bytes[a5c5]::bytes::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:416 ~ bytes[a5c5]::bytes::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:393:12: 393:14 (#0), res: Local(HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).4)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).27), res: Local(HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:393:12: 393:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).28), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:393:18: 393:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:393:18: 393:19 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:416 ~ bytes[a5c5]::bytes::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:398:13: 398:15 (#0), res: Local(HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).4)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).50), res: Local(HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:398:13: 398:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).51), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).52), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:398:19: 398:23 (#0), res: Local(HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).54), res: Local(HirId(DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:398:19: 398:23 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:398:24: 398:29 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:398:19: 398:29 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:419 ~ bytes[a5c5]::bytes::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:419 ~ bytes[a5c5]::bytes::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:434 ~ bytes[a5c5]::bytes::{impl#0}::inc_start)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:438:12: 438:14 (#0), res: Local(HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).4)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).8), res: Local(HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:438:12: 438:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).9), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:438:18: 438:22 (#0), res: Local(HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).12), res: Local(HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:438:18: 438:22 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:438:23: 438:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:438:18: 438:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:419 ~ bytes[a5c5]::bytes::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:416 ~ bytes[a5c5]::bytes::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:442:12: 442:14 (#0), res: Local(HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).4)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).33), res: Local(HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:442:12: 442:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).34), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:442:18: 442:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:442:18: 442:19 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:416 ~ bytes[a5c5]::bytes::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:447:13: 447:15 (#0), res: Local(HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).4)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).50), res: Local(HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:447:13: 447:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).51), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).52), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:447:19: 447:23 (#0), res: Local(HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).54), res: Local(HirId(DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:447:19: 447:23 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:447:24: 447:29 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:447:19: 447:29 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:419 ~ bytes[a5c5]::bytes::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:419 ~ bytes[a5c5]::bytes::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:434 ~ bytes[a5c5]::bytes::{impl#0}::inc_start)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:481:12: 481:15 (#0), res: Local(HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).4)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).8), res: Local(HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:481:12: 481:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).9), kind: Field(Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:481:18: 481:22 (#0), res: Local(HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).11), res: Local(HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:481:18: 481:22 (#0) }, len#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:481:18: 481:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).15), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:45: 485:47 (#0) }, Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).16), kind: Cast(Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).17), kind: Field(Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:16: 485:20 (#0), res: Local(HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).19), res: Local(HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:16: 485:20 (#0) }, vtable#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:16: 485:27 (#0) }, Ty { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).22), kind: Ptr(MutTy { ty: Ty { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:38: 485:44 (#0), res: Def(Struct, DefId(0:409 ~ bytes[a5c5]::bytes::Vtable)), segments: [PathSegment { ident: Vtable#0, hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).21), res: Def(Struct, DefId(0:409 ~ bytes[a5c5]::bytes::Vtable)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:38: 485:44 (#0) }, mutbl: Not }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:31: 485:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:16: 485:44 (#0) }, Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).23), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:49: 485:71 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:548 ~ bytes[a5c5]::bytes::PROMOTABLE_EVEN_VTABLE)), segments: [PathSegment { ident: PROMOTABLE_EVEN_VTABLE#0, hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).25), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:548 ~ bytes[a5c5]::bytes::PROMOTABLE_EVEN_VTABLE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:49: 485:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:48: 485:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:16: 485:71 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).26), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:49: 486:51 (#0) }, Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).27), kind: Cast(Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).28), kind: Field(Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:20: 486:24 (#0), res: Local(HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).30), res: Local(HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:20: 486:24 (#0) }, vtable#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:20: 486:31 (#0) }, Ty { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).33), kind: Ptr(MutTy { ty: Ty { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:42: 486:48 (#0), res: Def(Struct, DefId(0:409 ~ bytes[a5c5]::bytes::Vtable)), segments: [PathSegment { ident: Vtable#0, hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).32), res: Def(Struct, DefId(0:409 ~ bytes[a5c5]::bytes::Vtable)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:42: 486:48 (#0) }, mutbl: Not }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:35: 486:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:20: 486:48 (#0) }, Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).34), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:53: 486:74 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:549 ~ bytes[a5c5]::bytes::PROMOTABLE_ODD_VTABLE)), segments: [PathSegment { ident: PROMOTABLE_ODD_VTABLE#0, hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).36), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:549 ~ bytes[a5c5]::bytes::PROMOTABLE_ODD_VTABLE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:53: 486:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:52: 486:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:20: 486:74 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).16), kind: Cast(Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).17), kind: Field(Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:16: 485:20 (#0), res: Local(HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).19), res: Local(HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:16: 485:20 (#0) }, vtable#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:16: 485:27 (#0) }, Ty { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).22), kind: Ptr(MutTy { ty: Ty { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:38: 485:44 (#0), res: Def(Struct, DefId(0:409 ~ bytes[a5c5]::bytes::Vtable)), segments: [PathSegment { ident: Vtable#0, hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).21), res: Def(Struct, DefId(0:409 ~ bytes[a5c5]::bytes::Vtable)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:38: 485:44 (#0) }, mutbl: Not }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:31: 485:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:16: 485:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).23), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:49: 485:71 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:548 ~ bytes[a5c5]::bytes::PROMOTABLE_EVEN_VTABLE)), segments: [PathSegment { ident: PROMOTABLE_EVEN_VTABLE#0, hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).25), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:548 ~ bytes[a5c5]::bytes::PROMOTABLE_EVEN_VTABLE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:49: 485:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:485:48: 485:71 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).27), kind: Cast(Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).28), kind: Field(Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:20: 486:24 (#0), res: Local(HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).30), res: Local(HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:20: 486:24 (#0) }, vtable#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:20: 486:31 (#0) }, Ty { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).33), kind: Ptr(MutTy { ty: Ty { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:42: 486:48 (#0), res: Def(Struct, DefId(0:409 ~ bytes[a5c5]::bytes::Vtable)), segments: [PathSegment { ident: Vtable#0, hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).32), res: Def(Struct, DefId(0:409 ~ bytes[a5c5]::bytes::Vtable)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:42: 486:48 (#0) }, mutbl: Not }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:35: 486:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:20: 486:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).34), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:53: 486:74 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:549 ~ bytes[a5c5]::bytes::PROMOTABLE_ODD_VTABLE)), segments: [PathSegment { ident: PROMOTABLE_ODD_VTABLE#0, hir_id: HirId(DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate).36), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:549 ~ bytes[a5c5]::bytes::PROMOTABLE_ODD_VTABLE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:53: 486:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:486:52: 486:74 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:427 ~ bytes[a5c5]::bytes::{impl#0}::split_off)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:430 ~ bytes[a5c5]::bytes::{impl#0}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:429 ~ bytes[a5c5]::bytes::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:431 ~ bytes[a5c5]::bytes::{impl#0}::try_into_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:421 ~ bytes[a5c5]::bytes::{impl#0}::is_unique)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:432 ~ bytes[a5c5]::bytes::{impl#0}::with_vtable)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:434 ~ bytes[a5c5]::bytes::{impl#0}::inc_start)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:434 ~ bytes[a5c5]::bytes::{impl#0}::inc_start).11), kind: Field(Expr { hir_id: HirId(DefId(0:434 ~ bytes[a5c5]::bytes::{impl#0}::inc_start).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:559:23: 559:27 (#0), res: Local(HirId(DefId(0:434 ~ bytes[a5c5]::bytes::{impl#0}::inc_start).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:434 ~ bytes[a5c5]::bytes::{impl#0}::inc_start).13), res: Local(HirId(DefId(0:434 ~ bytes[a5c5]::bytes::{impl#0}::inc_start).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:559:23: 559:27 (#0) }, len#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:559:23: 559:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:434 ~ bytes[a5c5]::bytes::{impl#0}::inc_start).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:559:35: 559:37 (#0), res: Local(HirId(DefId(0:434 ~ bytes[a5c5]::bytes::{impl#0}::inc_start).4)), segments: [PathSegment { ident: by#0, hir_id: HirId(DefId(0:434 ~ bytes[a5c5]::bytes::{impl#0}::inc_start).15), res: Local(HirId(DefId(0:434 ~ bytes[a5c5]::bytes::{impl#0}::inc_start).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:559:35: 559:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2591 ~ core[7d5a]::ptr::const_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:421 ~ bytes[a5c5]::bytes::{impl#0}::is_unique).5), kind: Field(Expr { hir_id: HirId(DefId(0:421 ~ bytes[a5c5]::bytes::{impl#0}::is_unique).6), kind: Field(Expr { hir_id: HirId(DefId(0:421 ~ bytes[a5c5]::bytes::{impl#0}::is_unique).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:234:19: 234:23 (#0), res: Local(HirId(DefId(0:421 ~ bytes[a5c5]::bytes::{impl#0}::is_unique).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:421 ~ bytes[a5c5]::bytes::{impl#0}::is_unique).8), res: Local(HirId(DefId(0:421 ~ bytes[a5c5]::bytes::{impl#0}::is_unique).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:234:19: 234:23 (#0) }, vtable#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:234:19: 234:30 (#0) }, is_unique#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:234:18: 234:41 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:438 ~ bytes[a5c5]::bytes::{impl#3}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:438 ~ bytes[a5c5]::bytes::{impl#3}::drop).5), kind: Field(Expr { hir_id: HirId(DefId(0:438 ~ bytes[a5c5]::bytes::{impl#3}::drop).6), kind: Field(Expr { hir_id: HirId(DefId(0:438 ~ bytes[a5c5]::bytes::{impl#3}::drop).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:572:19: 572:23 (#0), res: Local(HirId(DefId(0:438 ~ bytes[a5c5]::bytes::{impl#3}::drop).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:438 ~ bytes[a5c5]::bytes::{impl#3}::drop).8), res: Local(HirId(DefId(0:438 ~ bytes[a5c5]::bytes::{impl#3}::drop).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:572:19: 572:23 (#0) }, vtable#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:572:19: 572:30 (#0) }, drop#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:572:18: 572:36 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:438 ~ bytes[a5c5]::bytes::{impl#3}::drop).5), kind: Field(Expr { hir_id: HirId(DefId(0:438 ~ bytes[a5c5]::bytes::{impl#3}::drop).6), kind: Field(Expr { hir_id: HirId(DefId(0:438 ~ bytes[a5c5]::bytes::{impl#3}::drop).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:572:19: 572:23 (#0), res: Local(HirId(DefId(0:438 ~ bytes[a5c5]::bytes::{impl#3}::drop).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:438 ~ bytes[a5c5]::bytes::{impl#3}::drop).8), res: Local(HirId(DefId(0:438 ~ bytes[a5c5]::bytes::{impl#3}::drop).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:572:19: 572:23 (#0) }, vtable#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:572:19: 572:30 (#0) }, drop#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:572:18: 572:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:440 ~ bytes[a5c5]::bytes::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:440 ~ bytes[a5c5]::bytes::{impl#4}::clone).5), kind: Field(Expr { hir_id: HirId(DefId(0:440 ~ bytes[a5c5]::bytes::{impl#4}::clone).6), kind: Field(Expr { hir_id: HirId(DefId(0:440 ~ bytes[a5c5]::bytes::{impl#4}::clone).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:579:19: 579:23 (#0), res: Local(HirId(DefId(0:440 ~ bytes[a5c5]::bytes::{impl#4}::clone).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:440 ~ bytes[a5c5]::bytes::{impl#4}::clone).8), res: Local(HirId(DefId(0:440 ~ bytes[a5c5]::bytes::{impl#4}::clone).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:579:19: 579:23 (#0) }, vtable#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:579:19: 579:30 (#0) }, clone#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:579:18: 579:37 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:440 ~ bytes[a5c5]::bytes::{impl#4}::clone).5), kind: Field(Expr { hir_id: HirId(DefId(0:440 ~ bytes[a5c5]::bytes::{impl#4}::clone).6), kind: Field(Expr { hir_id: HirId(DefId(0:440 ~ bytes[a5c5]::bytes::{impl#4}::clone).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:579:19: 579:23 (#0), res: Local(HirId(DefId(0:440 ~ bytes[a5c5]::bytes::{impl#4}::clone).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:440 ~ bytes[a5c5]::bytes::{impl#4}::clone).8), res: Local(HirId(DefId(0:440 ~ bytes[a5c5]::bytes::{impl#4}::clone).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:579:19: 579:23 (#0) }, vtable#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:579:19: 579:30 (#0) }, clone#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:579:18: 579:37 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:442 ~ bytes[a5c5]::bytes::{impl#5}::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:419 ~ bytes[a5c5]::bytes::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:443 ~ bytes[a5c5]::bytes::{impl#5}::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:444 ~ bytes[a5c5]::bytes::{impl#5}::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:444 ~ bytes[a5c5]::bytes::{impl#5}::advance).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:597:13: 597:16 (#0), res: Local(HirId(DefId(0:444 ~ bytes[a5c5]::bytes::{impl#5}::advance).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:444 ~ bytes[a5c5]::bytes::{impl#5}::advance).9), res: Local(HirId(DefId(0:444 ~ bytes[a5c5]::bytes::{impl#5}::advance).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:597:13: 597:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:444 ~ bytes[a5c5]::bytes::{impl#5}::advance).10), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:444 ~ bytes[a5c5]::bytes::{impl#5}::advance).11), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:444 ~ bytes[a5c5]::bytes::{impl#5}::advance).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:597:20: 597:24 (#0), res: Local(HirId(DefId(0:444 ~ bytes[a5c5]::bytes::{impl#5}::advance).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:444 ~ bytes[a5c5]::bytes::{impl#5}::advance).13), res: Local(HirId(DefId(0:444 ~ bytes[a5c5]::bytes::{impl#5}::advance).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:597:20: 597:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:597:25: 597:30 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:597:20: 597:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:419 ~ bytes[a5c5]::bytes::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:419 ~ bytes[a5c5]::bytes::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:434 ~ bytes[a5c5]::bytes::{impl#0}::inc_start)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:445 ~ bytes[a5c5]::bytes::{impl#5}::copy_to_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:428 ~ bytes[a5c5]::bytes::{impl#0}::split_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:448 ~ bytes[a5c5]::bytes::{impl#6}::deref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:450 ~ bytes[a5c5]::bytes::{impl#7}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:452 ~ bytes[a5c5]::bytes::{impl#8}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:455 ~ bytes[a5c5]::bytes::{impl#9}::borrow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:459 ~ bytes[a5c5]::bytes::{impl#10}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:231 ~ bytes[a5c5]::buf::iter::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:464 ~ bytes[a5c5]::bytes::{impl#11}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:466 ~ bytes[a5c5]::bytes::{impl#12}::from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8697 ~ core[7d5a]::iter::traits::collect::FromIterator::from_iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:469 ~ bytes[a5c5]::bytes::{impl#13}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:469 ~ bytes[a5c5]::bytes::{impl#13}::eq).6), kind: MethodCall(PathSegment { ident: as_slice#0, hir_id: HirId(DefId(0:469 ~ bytes[a5c5]::bytes::{impl#13}::eq).7), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:469 ~ bytes[a5c5]::bytes::{impl#13}::eq).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:672:9: 672:13 (#0), res: Local(HirId(DefId(0:469 ~ bytes[a5c5]::bytes::{impl#13}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:469 ~ bytes[a5c5]::bytes::{impl#13}::eq).9), res: Local(HirId(DefId(0:469 ~ bytes[a5c5]::bytes::{impl#13}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:672:9: 672:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:672:14: 672:24 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:672:9: 672:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:469 ~ bytes[a5c5]::bytes::{impl#13}::eq).10), kind: MethodCall(PathSegment { ident: as_slice#0, hir_id: HirId(DefId(0:469 ~ bytes[a5c5]::bytes::{impl#13}::eq).11), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:469 ~ bytes[a5c5]::bytes::{impl#13}::eq).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:672:28: 672:33 (#0), res: Local(HirId(DefId(0:469 ~ bytes[a5c5]::bytes::{impl#13}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:469 ~ bytes[a5c5]::bytes::{impl#13}::eq).13), res: Local(HirId(DefId(0:469 ~ bytes[a5c5]::bytes::{impl#13}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:672:28: 672:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:672:34: 672:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:672:28: 672:44 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:471 ~ bytes[a5c5]::bytes::{impl#14}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:473 ~ bytes[a5c5]::bytes::{impl#15}::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:476 ~ bytes[a5c5]::bytes::{impl#17}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:476 ~ bytes[a5c5]::bytes::{impl#17}::eq).6), kind: MethodCall(PathSegment { ident: as_slice#0, hir_id: HirId(DefId(0:476 ~ bytes[a5c5]::bytes::{impl#17}::eq).7), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:476 ~ bytes[a5c5]::bytes::{impl#17}::eq).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:692:9: 692:13 (#0), res: Local(HirId(DefId(0:476 ~ bytes[a5c5]::bytes::{impl#17}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:476 ~ bytes[a5c5]::bytes::{impl#17}::eq).9), res: Local(HirId(DefId(0:476 ~ bytes[a5c5]::bytes::{impl#17}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:692:9: 692:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:692:14: 692:24 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:692:9: 692:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:476 ~ bytes[a5c5]::bytes::{impl#17}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:692:28: 692:33 (#0), res: Local(HirId(DefId(0:476 ~ bytes[a5c5]::bytes::{impl#17}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:476 ~ bytes[a5c5]::bytes::{impl#17}::eq).11), res: Local(HirId(DefId(0:476 ~ bytes[a5c5]::bytes::{impl#17}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:692:28: 692:33 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:478 ~ bytes[a5c5]::bytes::{impl#18}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:480 ~ bytes[a5c5]::bytes::{impl#19}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:480 ~ bytes[a5c5]::bytes::{impl#19}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:480 ~ bytes[a5c5]::bytes::{impl#19}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:704:10: 704:15 (#0), res: Local(HirId(DefId(0:480 ~ bytes[a5c5]::bytes::{impl#19}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:480 ~ bytes[a5c5]::bytes::{impl#19}::eq).8), res: Local(HirId(DefId(0:480 ~ bytes[a5c5]::bytes::{impl#19}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:704:10: 704:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:704:9: 704:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:480 ~ bytes[a5c5]::bytes::{impl#19}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:480 ~ bytes[a5c5]::bytes::{impl#19}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:704:20: 704:24 (#0), res: Local(HirId(DefId(0:480 ~ bytes[a5c5]::bytes::{impl#19}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:480 ~ bytes[a5c5]::bytes::{impl#19}::eq).11), res: Local(HirId(DefId(0:480 ~ bytes[a5c5]::bytes::{impl#19}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:704:20: 704:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:704:19: 704:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:482 ~ bytes[a5c5]::bytes::{impl#20}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:484 ~ bytes[a5c5]::bytes::{impl#21}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:484 ~ bytes[a5c5]::bytes::{impl#21}::eq).6), kind: MethodCall(PathSegment { ident: as_slice#0, hir_id: HirId(DefId(0:484 ~ bytes[a5c5]::bytes::{impl#21}::eq).7), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:484 ~ bytes[a5c5]::bytes::{impl#21}::eq).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:716:9: 716:13 (#0), res: Local(HirId(DefId(0:484 ~ bytes[a5c5]::bytes::{impl#21}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:484 ~ bytes[a5c5]::bytes::{impl#21}::eq).9), res: Local(HirId(DefId(0:484 ~ bytes[a5c5]::bytes::{impl#21}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:716:9: 716:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:716:14: 716:24 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:716:9: 716:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:484 ~ bytes[a5c5]::bytes::{impl#21}::eq).10), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:484 ~ bytes[a5c5]::bytes::{impl#21}::eq).11), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:484 ~ bytes[a5c5]::bytes::{impl#21}::eq).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:716:28: 716:33 (#0), res: Local(HirId(DefId(0:484 ~ bytes[a5c5]::bytes::{impl#21}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:484 ~ bytes[a5c5]::bytes::{impl#21}::eq).13), res: Local(HirId(DefId(0:484 ~ bytes[a5c5]::bytes::{impl#21}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:716:28: 716:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:716:34: 716:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:716:28: 716:44 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:486 ~ bytes[a5c5]::bytes::{impl#22}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:488 ~ bytes[a5c5]::bytes::{impl#23}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:488 ~ bytes[a5c5]::bytes::{impl#23}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:488 ~ bytes[a5c5]::bytes::{impl#23}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:728:10: 728:15 (#0), res: Local(HirId(DefId(0:488 ~ bytes[a5c5]::bytes::{impl#23}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:488 ~ bytes[a5c5]::bytes::{impl#23}::eq).8), res: Local(HirId(DefId(0:488 ~ bytes[a5c5]::bytes::{impl#23}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:728:10: 728:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:728:9: 728:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:488 ~ bytes[a5c5]::bytes::{impl#23}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:488 ~ bytes[a5c5]::bytes::{impl#23}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:728:20: 728:24 (#0), res: Local(HirId(DefId(0:488 ~ bytes[a5c5]::bytes::{impl#23}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:488 ~ bytes[a5c5]::bytes::{impl#23}::eq).11), res: Local(HirId(DefId(0:488 ~ bytes[a5c5]::bytes::{impl#23}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:728:20: 728:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:728:19: 728:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:490 ~ bytes[a5c5]::bytes::{impl#24}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:492 ~ bytes[a5c5]::bytes::{impl#25}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:492 ~ bytes[a5c5]::bytes::{impl#25}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:492 ~ bytes[a5c5]::bytes::{impl#25}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:740:10: 740:14 (#0), res: Local(HirId(DefId(0:492 ~ bytes[a5c5]::bytes::{impl#25}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:492 ~ bytes[a5c5]::bytes::{impl#25}::eq).8), res: Local(HirId(DefId(0:492 ~ bytes[a5c5]::bytes::{impl#25}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:740:10: 740:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:740:9: 740:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:492 ~ bytes[a5c5]::bytes::{impl#25}::eq).9), kind: Index(Expr { hir_id: HirId(DefId(0:492 ~ bytes[a5c5]::bytes::{impl#25}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:740:18: 740:23 (#0), res: Local(HirId(DefId(0:492 ~ bytes[a5c5]::bytes::{impl#25}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:492 ~ bytes[a5c5]::bytes::{impl#25}::eq).11), res: Local(HirId(DefId(0:492 ~ bytes[a5c5]::bytes::{impl#25}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:740:18: 740:23 (#0) }, Expr { hir_id: HirId(DefId(0:492 ~ bytes[a5c5]::bytes::{impl#25}::eq).12), kind: Struct(LangItem(RangeFull, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:740:24: 740:26 (#0)), [], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:740:24: 740:26 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:740:23: 740:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:740:18: 740:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:494 ~ bytes[a5c5]::bytes::{impl#26}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:496 ~ bytes[a5c5]::bytes::{impl#27}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:496 ~ bytes[a5c5]::bytes::{impl#27}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:496 ~ bytes[a5c5]::bytes::{impl#27}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:752:10: 752:15 (#0), res: Local(HirId(DefId(0:496 ~ bytes[a5c5]::bytes::{impl#27}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:496 ~ bytes[a5c5]::bytes::{impl#27}::eq).8), res: Local(HirId(DefId(0:496 ~ bytes[a5c5]::bytes::{impl#27}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:752:10: 752:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:752:9: 752:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:496 ~ bytes[a5c5]::bytes::{impl#27}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:496 ~ bytes[a5c5]::bytes::{impl#27}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:752:20: 752:24 (#0), res: Local(HirId(DefId(0:496 ~ bytes[a5c5]::bytes::{impl#27}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:496 ~ bytes[a5c5]::bytes::{impl#27}::eq).11), res: Local(HirId(DefId(0:496 ~ bytes[a5c5]::bytes::{impl#27}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:752:20: 752:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:752:19: 752:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:498 ~ bytes[a5c5]::bytes::{impl#28}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:500 ~ bytes[a5c5]::bytes::{impl#29}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:500 ~ bytes[a5c5]::bytes::{impl#29}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:500 ~ bytes[a5c5]::bytes::{impl#29}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:764:10: 764:14 (#0), res: Local(HirId(DefId(0:500 ~ bytes[a5c5]::bytes::{impl#29}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:500 ~ bytes[a5c5]::bytes::{impl#29}::eq).8), res: Local(HirId(DefId(0:500 ~ bytes[a5c5]::bytes::{impl#29}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:764:10: 764:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:764:9: 764:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:500 ~ bytes[a5c5]::bytes::{impl#29}::eq).9), kind: Index(Expr { hir_id: HirId(DefId(0:500 ~ bytes[a5c5]::bytes::{impl#29}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:764:18: 764:23 (#0), res: Local(HirId(DefId(0:500 ~ bytes[a5c5]::bytes::{impl#29}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:500 ~ bytes[a5c5]::bytes::{impl#29}::eq).11), res: Local(HirId(DefId(0:500 ~ bytes[a5c5]::bytes::{impl#29}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:764:18: 764:23 (#0) }, Expr { hir_id: HirId(DefId(0:500 ~ bytes[a5c5]::bytes::{impl#29}::eq).12), kind: Struct(LangItem(RangeFull, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:764:24: 764:26 (#0)), [], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:764:24: 764:26 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:764:23: 764:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:764:18: 764:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:502 ~ bytes[a5c5]::bytes::{impl#30}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bytes[a5c5]::bytes::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:6002 ~ alloc[5873]::string::{impl#0}::as_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:504 ~ bytes[a5c5]::bytes::{impl#31}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:504 ~ bytes[a5c5]::bytes::{impl#31}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:504 ~ bytes[a5c5]::bytes::{impl#31}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:776:10: 776:15 (#0), res: Local(HirId(DefId(0:504 ~ bytes[a5c5]::bytes::{impl#31}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:504 ~ bytes[a5c5]::bytes::{impl#31}::eq).8), res: Local(HirId(DefId(0:504 ~ bytes[a5c5]::bytes::{impl#31}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:776:10: 776:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:776:9: 776:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:504 ~ bytes[a5c5]::bytes::{impl#31}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:504 ~ bytes[a5c5]::bytes::{impl#31}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:776:20: 776:24 (#0), res: Local(HirId(DefId(0:504 ~ bytes[a5c5]::bytes::{impl#31}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:504 ~ bytes[a5c5]::bytes::{impl#31}::eq).11), res: Local(HirId(DefId(0:504 ~ bytes[a5c5]::bytes::{impl#31}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:776:20: 776:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:776:19: 776:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:506 ~ bytes[a5c5]::bytes::{impl#32}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:6002 ~ alloc[5873]::string::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:508 ~ bytes[a5c5]::bytes::{impl#33}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:508 ~ bytes[a5c5]::bytes::{impl#33}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:508 ~ bytes[a5c5]::bytes::{impl#33}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:788:10: 788:15 (#0), res: Local(HirId(DefId(0:508 ~ bytes[a5c5]::bytes::{impl#33}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:508 ~ bytes[a5c5]::bytes::{impl#33}::eq).8), res: Local(HirId(DefId(0:508 ~ bytes[a5c5]::bytes::{impl#33}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:788:10: 788:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:788:9: 788:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:508 ~ bytes[a5c5]::bytes::{impl#33}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:508 ~ bytes[a5c5]::bytes::{impl#33}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:788:20: 788:24 (#0), res: Local(HirId(DefId(0:508 ~ bytes[a5c5]::bytes::{impl#33}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:508 ~ bytes[a5c5]::bytes::{impl#33}::eq).11), res: Local(HirId(DefId(0:508 ~ bytes[a5c5]::bytes::{impl#33}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:788:20: 788:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:788:19: 788:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:510 ~ bytes[a5c5]::bytes::{impl#34}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:512 ~ bytes[a5c5]::bytes::{impl#35}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:512 ~ bytes[a5c5]::bytes::{impl#35}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:512 ~ bytes[a5c5]::bytes::{impl#35}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:800:10: 800:15 (#0), res: Local(HirId(DefId(0:512 ~ bytes[a5c5]::bytes::{impl#35}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:512 ~ bytes[a5c5]::bytes::{impl#35}::eq).8), res: Local(HirId(DefId(0:512 ~ bytes[a5c5]::bytes::{impl#35}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:800:10: 800:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:800:9: 800:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:512 ~ bytes[a5c5]::bytes::{impl#35}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:512 ~ bytes[a5c5]::bytes::{impl#35}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:800:20: 800:24 (#0), res: Local(HirId(DefId(0:512 ~ bytes[a5c5]::bytes::{impl#35}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:512 ~ bytes[a5c5]::bytes::{impl#35}::eq).11), res: Local(HirId(DefId(0:512 ~ bytes[a5c5]::bytes::{impl#35}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:800:20: 800:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:800:19: 800:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:514 ~ bytes[a5c5]::bytes::{impl#36}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ bytes[a5c5]::bytes::{impl#37}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:518 ~ bytes[a5c5]::bytes::{impl#37}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:518 ~ bytes[a5c5]::bytes::{impl#37}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:815:10: 815:14 (#0), res: Local(HirId(DefId(0:518 ~ bytes[a5c5]::bytes::{impl#37}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:518 ~ bytes[a5c5]::bytes::{impl#37}::eq).8), res: Local(HirId(DefId(0:518 ~ bytes[a5c5]::bytes::{impl#37}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:815:10: 815:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:815:9: 815:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:518 ~ bytes[a5c5]::bytes::{impl#37}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:518 ~ bytes[a5c5]::bytes::{impl#37}::eq).10), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:518 ~ bytes[a5c5]::bytes::{impl#37}::eq).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:815:20: 815:25 (#0), res: Local(HirId(DefId(0:518 ~ bytes[a5c5]::bytes::{impl#37}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:518 ~ bytes[a5c5]::bytes::{impl#37}::eq).12), res: Local(HirId(DefId(0:518 ~ bytes[a5c5]::bytes::{impl#37}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:815:20: 815:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:815:19: 815:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:815:18: 815:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:522 ~ bytes[a5c5]::bytes::{impl#38}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:524 ~ bytes[a5c5]::bytes::{impl#39}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:416 ~ bytes[a5c5]::bytes::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:526 ~ bytes[a5c5]::bytes::{impl#40}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:418 ~ bytes[a5c5]::bytes::{impl#0}::from_static)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:528 ~ bytes[a5c5]::bytes::{impl#41}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:418 ~ bytes[a5c5]::bytes::{impl#0}::from_static)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2013 ~ core[7d5a]::mem::manually_drop::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7451 ~ alloc[5873]::vec::{impl#1}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7439 ~ alloc[5873]::vec::{impl#1}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:857:12: 857:15 (#0), res: Local(HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).26)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).37), res: Local(HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:857:12: 857:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:857:19: 857:22 (#0), res: Local(HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).33)), segments: [PathSegment { ident: cap#0, hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).39), res: Local(HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:857:19: 857:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2014 ~ core[7d5a]::mem::manually_drop::{impl#0}::into_inner)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(4:7446 ~ alloc[5873]::vec::{impl#1}::into_boxed_slice)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:37950 ~ core[7d5a]::sync::atomic::{impl#78}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:385 ~ alloc[5873]::boxed::{impl#7}::into_raw)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).104), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:13: 872:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:13: 872:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).105), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:35: 872:36 (#0) }, Expr { hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).106), kind: Cast(Expr { hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:19: 872:25 (#0), res: Local(HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).97)), segments: [PathSegment { ident: shared#0, hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).108), res: Local(HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).97)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:19: 872:25 (#0) }, Ty { hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:29: 872:34 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).110), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:29: 872:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:19: 872:34 (#0) }, Expr { hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:37: 872:46 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).112), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:37: 872:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:18: 872:47 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).106), kind: Cast(Expr { hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:19: 872:25 (#0), res: Local(HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).97)), segments: [PathSegment { ident: shared#0, hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).108), res: Local(HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).97)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:19: 872:25 (#0) }, Ty { hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:29: 872:34 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).110), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:29: 872:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:19: 872:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:37: 872:46 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:530 ~ bytes[a5c5]::bytes::{impl#42}::from).112), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:872:37: 872:46 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10610 ~ core[7d5a]::sync::atomic::{impl#6}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13229 ~ core[7d5a]::slice::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:416 ~ bytes[a5c5]::bytes::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:385 ~ alloc[5873]::boxed::{impl#7}::into_raw)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).42), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:25: 896:26 (#0) }, Expr { hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).43), kind: Cast(Expr { hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:12: 896:15 (#0), res: Local(HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).39)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).45), res: Local(HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:12: 896:15 (#0) }, Ty { hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:19: 896:24 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).47), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:19: 896:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:12: 896:24 (#0) }, Expr { hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).48), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:27: 896:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:27: 896:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:12: 896:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).49), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:34: 896:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:34: 896:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).43), kind: Cast(Expr { hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:12: 896:15 (#0), res: Local(HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).39)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).45), res: Local(HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:12: 896:15 (#0) }, Ty { hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:19: 896:24 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).47), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:19: 896:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:12: 896:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).48), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:27: 896:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:896:27: 896:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:595 ~ bytes[a5c5]::bytes::ptr_map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:897:44: 897:48 (#0), res: Local(HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).59)), segments: [PathSegment { ident: addr#0, hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).62), res: Local(HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:897:44: 897:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:897:51: 897:59 (#0), res: Def(Const, DefId(0:582 ~ bytes[a5c5]::bytes::KIND_VEC)), segments: [PathSegment { ident: KIND_VEC#0, hir_id: HirId(DefId(0:532 ~ bytes[a5c5]::bytes::{impl#43}::from).64), res: Def(Const, DefId(0:582 ~ bytes[a5c5]::bytes::KIND_VEC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:897:51: 897:59 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10610 ~ core[7d5a]::sync::atomic::{impl#6}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10610 ~ core[7d5a]::sync::atomic::{impl#6}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:535 ~ bytes[a5c5]::bytes::{impl#44}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2013 ~ core[7d5a]::mem::manually_drop::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:535 ~ bytes[a5c5]::bytes::{impl#44}::from).15), kind: Field(Expr { hir_id: HirId(DefId(0:535 ~ bytes[a5c5]::bytes::{impl#44}::from).16), kind: Field(Expr { hir_id: HirId(DefId(0:535 ~ bytes[a5c5]::bytes::{impl#44}::from).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:933:19: 933:24 (#0), res: Local(HirId(DefId(0:535 ~ bytes[a5c5]::bytes::{impl#44}::from).12)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:535 ~ bytes[a5c5]::bytes::{impl#44}::from).18), res: Local(HirId(DefId(0:535 ~ bytes[a5c5]::bytes::{impl#44}::from).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:933:19: 933:24 (#0) }, vtable#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:933:19: 933:31 (#0) }, to_mut#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:933:18: 933:39 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:535 ~ bytes[a5c5]::bytes::{impl#44}::from).15), kind: Field(Expr { hir_id: HirId(DefId(0:535 ~ bytes[a5c5]::bytes::{impl#44}::from).16), kind: Field(Expr { hir_id: HirId(DefId(0:535 ~ bytes[a5c5]::bytes::{impl#44}::from).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:933:19: 933:24 (#0), res: Local(HirId(DefId(0:535 ~ bytes[a5c5]::bytes::{impl#44}::from).12)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:535 ~ bytes[a5c5]::bytes::{impl#44}::from).18), res: Local(HirId(DefId(0:535 ~ bytes[a5c5]::bytes::{impl#44}::from).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:933:19: 933:24 (#0) }, vtable#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:933:19: 933:31 (#0) }, to_mut#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:933:18: 933:39 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:537 ~ bytes[a5c5]::bytes::{impl#45}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:5987 ~ alloc[5873]::string::{impl#0}::into_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:539 ~ bytes[a5c5]::bytes::{impl#46}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2013 ~ core[7d5a]::mem::manually_drop::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:539 ~ bytes[a5c5]::bytes::{impl#46}::from).15), kind: Field(Expr { hir_id: HirId(DefId(0:539 ~ bytes[a5c5]::bytes::{impl#46}::from).16), kind: Field(Expr { hir_id: HirId(DefId(0:539 ~ bytes[a5c5]::bytes::{impl#46}::from).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:946:19: 946:24 (#0), res: Local(HirId(DefId(0:539 ~ bytes[a5c5]::bytes::{impl#46}::from).12)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:539 ~ bytes[a5c5]::bytes::{impl#46}::from).18), res: Local(HirId(DefId(0:539 ~ bytes[a5c5]::bytes::{impl#46}::from).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:946:19: 946:24 (#0) }, vtable#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:946:19: 946:31 (#0) }, to_vec#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:946:18: 946:39 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:539 ~ bytes[a5c5]::bytes::{impl#46}::from).15), kind: Field(Expr { hir_id: HirId(DefId(0:539 ~ bytes[a5c5]::bytes::{impl#46}::from).16), kind: Field(Expr { hir_id: HirId(DefId(0:539 ~ bytes[a5c5]::bytes::{impl#46}::from).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:946:19: 946:24 (#0), res: Local(HirId(DefId(0:539 ~ bytes[a5c5]::bytes::{impl#46}::from).12)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:539 ~ bytes[a5c5]::bytes::{impl#46}::from).18), res: Local(HirId(DefId(0:539 ~ bytes[a5c5]::bytes::{impl#46}::from).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:946:19: 946:24 (#0) }, vtable#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:946:19: 946:31 (#0) }, to_vec#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:946:18: 946:39 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:541 ~ bytes[a5c5]::bytes::{impl#47}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:543 ~ bytes[a5c5]::bytes::static_clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:418 ~ bytes[a5c5]::bytes::{impl#0}::from_static)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:544 ~ bytes[a5c5]::bytes::static_to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:5735 ~ alloc[5873]::slice::{impl#0}::to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:545 ~ bytes[a5c5]::bytes::static_to_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:546 ~ bytes[a5c5]::bytes::static_is_unique)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:547 ~ bytes[a5c5]::bytes::static_drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10619 ~ core[7d5a]::sync::atomic::{impl#6}::load)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).19), kind: Cast(Expr { hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1014:16: 1014:22 (#0), res: Local(HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).16)), segments: [PathSegment { ident: shared#0, hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).21), res: Local(HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1014:16: 1014:22 (#0) }, Ty { hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1014:26: 1014:31 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).23), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1014:26: 1014:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1014:16: 1014:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1014:34: 1014:43 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).25), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1014:34: 1014:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1016:8: 1016:12 (#0), res: Local(HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).27)), segments: [PathSegment { ident: kind#0, hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).31), res: Local(HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1016:8: 1016:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1016:16: 1016:24 (#0), res: Def(Const, DefId(0:581 ~ bytes[a5c5]::bytes::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).33), res: Def(Const, DefId(0:581 ~ bytes[a5c5]::bytes::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1016:16: 1016:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).68), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#126), res: Local(HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).60)), segments: [PathSegment { ident: left_val#126, hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).70), res: Local(HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#126) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#126) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).71), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#126), res: Local(HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).61)), segments: [PathSegment { ident: right_val#126, hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).73), res: Local(HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).61)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#126) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#126) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:595 ~ bytes[a5c5]::bytes::ptr_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).123), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1020:49: 1020:53 (#0), res: Local(HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).121)), segments: [PathSegment { ident: addr#0, hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).124), res: Local(HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1020:49: 1020:53 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).125), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).126), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1020:57: 1020:66 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:550 ~ bytes[a5c5]::bytes::promotable_even_clone).127), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1020:57: 1020:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1020:56: 1020:66 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10619 ~ core[7d5a]::sync::atomic::{impl#6}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).21), kind: Cast(Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1032:16: 1032:22 (#0), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).18)), segments: [PathSegment { ident: shared#0, hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).23), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1032:16: 1032:22 (#0) }, Ty { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1032:26: 1032:31 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).25), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1032:26: 1032:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1032:16: 1032:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1032:34: 1032:43 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).27), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1032:34: 1032:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1034:8: 1034:12 (#0), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).29)), segments: [PathSegment { ident: kind#0, hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).33), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1034:8: 1034:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1034:16: 1034:24 (#0), res: Def(Const, DefId(0:581 ~ bytes[a5c5]::bytes::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).35), res: Def(Const, DefId(0:581 ~ bytes[a5c5]::bytes::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1034:16: 1034:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:585 ~ bytes[a5c5]::bytes::shared_to_vec_impl)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).70), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#129), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).62)), segments: [PathSegment { ident: left_val#129, hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).72), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).62)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#129) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#129) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).73), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#129), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).63)), segments: [PathSegment { ident: right_val#129, hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).75), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).63)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#129) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#129) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1040:19: 1040:20 (#0), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).116), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1040:19: 1040:20 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).123), kind: Call(Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1042:19: 1042:30 (#0), res: Def(Fn, DefId(0:909 ~ bytes[a5c5]::offset_from)), segments: [PathSegment { ident: offset_from#0, hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).125), res: Def(Fn, DefId(0:909 ~ bytes[a5c5]::offset_from)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1042:19: 1042:30 (#0) }, [Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).126), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1042:31: 1042:34 (#0), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).4)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).127), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1042:31: 1042:34 (#0) }, Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).128), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1042:36: 1042:39 (#0), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).120)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).129), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1042:36: 1042:39 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1042:19: 1042:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1042:43: 1042:46 (#0), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).6)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).131), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1042:43: 1042:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:909 ~ bytes[a5c5]::offset_from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1985 ~ core[7d5a]::intrinsics::copy)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7427 ~ alloc[5873]::vec::{impl#0}::from_raw_parts)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1040:19: 1040:20 (#0), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).116), res: Local(HirId(DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1040:19: 1040:20 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10619 ~ core[7d5a]::sync::atomic::{impl#6}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).21), kind: Cast(Expr { hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1058:16: 1058:22 (#0), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).18)), segments: [PathSegment { ident: shared#0, hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).23), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1058:16: 1058:22 (#0) }, Ty { hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1058:26: 1058:31 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).25), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1058:26: 1058:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1058:16: 1058:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1058:34: 1058:43 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).27), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1058:34: 1058:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1060:8: 1060:12 (#0), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).29)), segments: [PathSegment { ident: kind#0, hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).33), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1060:8: 1060:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1060:16: 1060:24 (#0), res: Def(Const, DefId(0:581 ~ bytes[a5c5]::bytes::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).35), res: Def(Const, DefId(0:581 ~ bytes[a5c5]::bytes::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1060:16: 1060:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).70), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#132), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).62)), segments: [PathSegment { ident: left_val#132, hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).72), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).62)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#132) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#132) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).73), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#132), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).63)), segments: [PathSegment { ident: right_val#132, hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).75), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).63)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#132) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#132) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1069:19: 1069:20 (#0), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).116), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1069:19: 1069:20 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:909 ~ bytes[a5c5]::offset_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1071:19: 1071:22 (#0), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).130)), segments: [PathSegment { ident: off#0, hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).134), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1071:19: 1071:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).135), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1071:25: 1071:28 (#0), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).6)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).136), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1071:25: 1071:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7427 ~ alloc[5873]::vec::{impl#0}::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1069:19: 1069:20 (#0), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).116), res: Local(HirId(DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1069:19: 1069:20 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ bytes[a5c5]::bytes::promotable_even_to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:595 ~ bytes[a5c5]::bytes::ptr_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:554 ~ bytes[a5c5]::bytes::promotable_even_to_vec).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1082:39: 1082:43 (#0), res: Local(HirId(DefId(0:554 ~ bytes[a5c5]::bytes::promotable_even_to_vec).29)), segments: [PathSegment { ident: addr#0, hir_id: HirId(DefId(0:554 ~ bytes[a5c5]::bytes::promotable_even_to_vec).32), res: Local(HirId(DefId(0:554 ~ bytes[a5c5]::bytes::promotable_even_to_vec).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1082:39: 1082:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:554 ~ bytes[a5c5]::bytes::promotable_even_to_vec).33), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:554 ~ bytes[a5c5]::bytes::promotable_even_to_vec).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1082:47: 1082:56 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:554 ~ bytes[a5c5]::bytes::promotable_even_to_vec).35), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1082:47: 1082:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1082:46: 1082:56 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:557 ~ bytes[a5c5]::bytes::promotable_even_to_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:595 ~ bytes[a5c5]::bytes::ptr_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:557 ~ bytes[a5c5]::bytes::promotable_even_to_mut).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1088:39: 1088:43 (#0), res: Local(HirId(DefId(0:557 ~ bytes[a5c5]::bytes::promotable_even_to_mut).29)), segments: [PathSegment { ident: addr#0, hir_id: HirId(DefId(0:557 ~ bytes[a5c5]::bytes::promotable_even_to_mut).32), res: Local(HirId(DefId(0:557 ~ bytes[a5c5]::bytes::promotable_even_to_mut).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1088:39: 1088:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:557 ~ bytes[a5c5]::bytes::promotable_even_to_mut).33), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:557 ~ bytes[a5c5]::bytes::promotable_even_to_mut).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1088:47: 1088:56 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:557 ~ bytes[a5c5]::bytes::promotable_even_to_mut).35), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1088:47: 1088:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1088:46: 1088:56 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:892 ~ bytes[a5c5]::loom::sync::atomic::AtomicMut::with_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).23), kind: Cast(Expr { hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1095:20: 1095:26 (#0), res: Local(HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).20)), segments: [PathSegment { ident: shared#0, hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).25), res: Local(HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1095:20: 1095:26 (#0) }, Ty { hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1095:30: 1095:35 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).27), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1095:30: 1095:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1095:20: 1095:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1095:38: 1095:47 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).29), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1095:38: 1095:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1097:12: 1097:16 (#0), res: Local(HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).31)), segments: [PathSegment { ident: kind#0, hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).35), res: Local(HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).31)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1097:12: 1097:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1097:20: 1097:28 (#0), res: Def(Const, DefId(0:581 ~ bytes[a5c5]::bytes::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).37), res: Def(Const, DefId(0:581 ~ bytes[a5c5]::bytes::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1097:20: 1097:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:594 ~ bytes[a5c5]::bytes::release_shared)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).69), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#135), res: Local(HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).61)), segments: [PathSegment { ident: left_val#135, hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).71), res: Local(HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).61)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#135) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#135) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).72), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#135), res: Local(HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).62)), segments: [PathSegment { ident: right_val#135, hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).74), res: Local(HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).62)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#135) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#135) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:595 ~ bytes[a5c5]::bytes::ptr_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1101:53: 1101:57 (#0), res: Local(HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).122)), segments: [PathSegment { ident: addr#0, hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).125), res: Local(HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).122)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1101:53: 1101:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).126), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1101:61: 1101:70 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:560 ~ bytes[a5c5]::bytes::promotable_even_drop).128), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1101:61: 1101:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1101:60: 1101:70 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10619 ~ core[7d5a]::sync::atomic::{impl#6}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).19), kind: Cast(Expr { hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1109:16: 1109:22 (#0), res: Local(HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).16)), segments: [PathSegment { ident: shared#0, hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).21), res: Local(HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1109:16: 1109:22 (#0) }, Ty { hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1109:26: 1109:31 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).23), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1109:26: 1109:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1109:16: 1109:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1109:34: 1109:43 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).25), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1109:34: 1109:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1111:8: 1111:12 (#0), res: Local(HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).27)), segments: [PathSegment { ident: kind#0, hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).31), res: Local(HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1111:8: 1111:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1111:16: 1111:24 (#0), res: Def(Const, DefId(0:581 ~ bytes[a5c5]::bytes::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).33), res: Def(Const, DefId(0:581 ~ bytes[a5c5]::bytes::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1111:16: 1111:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).68), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#138), res: Local(HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).60)), segments: [PathSegment { ident: left_val#138, hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).70), res: Local(HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#138) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#138) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).71), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#138), res: Local(HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).61)), segments: [PathSegment { ident: right_val#138, hir_id: HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).73), res: Local(HirId(DefId(0:563 ~ bytes[a5c5]::bytes::promotable_odd_clone).61)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#138) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#138) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:564 ~ bytes[a5c5]::bytes::promotable_odd_to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:552 ~ bytes[a5c5]::bytes::promotable_to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:566 ~ bytes[a5c5]::bytes::promotable_odd_to_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:553 ~ bytes[a5c5]::bytes::promotable_to_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:892 ~ bytes[a5c5]::loom::sync::atomic::AtomicMut::with_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).23), kind: Cast(Expr { hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1130:20: 1130:26 (#0), res: Local(HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).20)), segments: [PathSegment { ident: shared#0, hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).25), res: Local(HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1130:20: 1130:26 (#0) }, Ty { hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1130:30: 1130:35 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).27), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1130:30: 1130:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1130:20: 1130:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1130:38: 1130:47 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).29), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1130:38: 1130:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1132:12: 1132:16 (#0), res: Local(HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).31)), segments: [PathSegment { ident: kind#0, hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).35), res: Local(HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).31)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1132:12: 1132:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1132:20: 1132:28 (#0), res: Def(Const, DefId(0:581 ~ bytes[a5c5]::bytes::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).37), res: Def(Const, DefId(0:581 ~ bytes[a5c5]::bytes::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1132:20: 1132:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:594 ~ bytes[a5c5]::bytes::release_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).69), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#141), res: Local(HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).61)), segments: [PathSegment { ident: left_val#141, hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).71), res: Local(HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).61)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#141) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#141) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).72), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#141), res: Local(HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).62)), segments: [PathSegment { ident: right_val#141, hir_id: HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).74), res: Local(HirId(DefId(0:568 ~ bytes[a5c5]::bytes::promotable_odd_drop).62)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#141) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#141) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10619 ~ core[7d5a]::sync::atomic::{impl#6}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).15), kind: Cast(Expr { hir_id: HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1144:16: 1144:22 (#0), res: Local(HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).12)), segments: [PathSegment { ident: shared#0, hir_id: HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).17), res: Local(HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1144:16: 1144:22 (#0) }, Ty { hir_id: HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1144:26: 1144:31 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).19), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1144:26: 1144:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1144:16: 1144:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1144:34: 1144:43 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).21), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1144:34: 1144:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1146:8: 1146:12 (#0), res: Local(HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).23)), segments: [PathSegment { ident: kind#0, hir_id: HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).27), res: Local(HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1146:8: 1146:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1146:16: 1146:24 (#0), res: Def(Const, DefId(0:581 ~ bytes[a5c5]::bytes::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).29), res: Def(Const, DefId(0:581 ~ bytes[a5c5]::bytes::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1146:16: 1146:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:37960 ~ core[7d5a]::sync::atomic::{impl#78}::load)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1148:9: 1148:16 (#0), res: Local(HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).46)), segments: [PathSegment { ident: ref_cnt#0, hir_id: HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).49), res: Local(HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1148:9: 1148:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:570 ~ bytes[a5c5]::bytes::promotable_is_unique).50), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1148:20: 1148:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1148:20: 1148:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).9), kind: Call(Expr { hir_id: HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1155:15: 1155:26 (#0), res: Def(Fn, DefId(0:909 ~ bytes[a5c5]::offset_from)), segments: [PathSegment { ident: offset_from#0, hir_id: HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).11), res: Def(Fn, DefId(0:909 ~ bytes[a5c5]::offset_from)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1155:15: 1155:26 (#0) }, [Expr { hir_id: HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1155:27: 1155:33 (#0), res: Local(HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).4)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).13), res: Local(HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1155:27: 1155:33 (#0) }, Expr { hir_id: HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1155:35: 1155:38 (#0), res: Local(HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).2)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).15), res: Local(HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1155:35: 1155:38 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1155:15: 1155:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1155:42: 1155:45 (#0), res: Local(HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).6)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).17), res: Local(HirId(DefId(0:571 ~ bytes[a5c5]::bytes::free_boxed_slice).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1155:42: 1155:45 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:909 ~ bytes[a5c5]::offset_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:140 ~ alloc[5873]::alloc::dealloc)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14996 ~ core[7d5a]::alloc::layout::{impl#0}::from_size_align)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:577 ~ bytes[a5c5]::bytes::{impl#48}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:140 ~ alloc[5873]::alloc::dealloc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14996 ~ core[7d5a]::alloc::layout::{impl#0}::from_size_align)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:584 ~ bytes[a5c5]::bytes::shared_clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10619 ~ core[7d5a]::sync::atomic::{impl#6}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:585 ~ bytes[a5c5]::bytes::shared_to_vec_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10385 ~ core[7d5a]::result::{impl#0}::is_ok)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:37964 ~ core[7d5a]::sync::atomic::{impl#78}::compare_exchange)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:380 ~ alloc[5873]::boxed::{impl#6}::from_raw)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2013 ~ core[7d5a]::mem::manually_drop::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1985 ~ core[7d5a]::intrinsics::copy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7427 ~ alloc[5873]::vec::{impl#0}::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:5735 ~ alloc[5873]::slice::{impl#0}::to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:594 ~ bytes[a5c5]::bytes::release_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:586 ~ bytes[a5c5]::bytes::shared_to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:585 ~ bytes[a5c5]::bytes::shared_to_vec_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10619 ~ core[7d5a]::sync::atomic::{impl#6}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).9), kind: MethodCall(PathSegment { ident: load#0, hir_id: HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).11), kind: Field(Expr { hir_id: HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).12), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1243:10: 1243:16 (#0), res: Local(HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).2)), segments: [PathSegment { ident: shared#0, hir_id: HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).14), res: Local(HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1243:10: 1243:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1243:8: 1243:17 (#0) }, ref_cnt#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1243:8: 1243:25 (#0) }, [Expr { hir_id: HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1243:31: 1243:48 (#0), res: Def(Ctor(Variant, Const), DefId(1:37513 ~ core[7d5a]::sync::atomic::Ordering::Acquire::{constructor#0})), segments: [PathSegment { ident: Ordering#0, hir_id: HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).16), res: Def(Enum, DefId(1:37507 ~ core[7d5a]::sync::atomic::Ordering)), args: None, infer_args: true }, PathSegment { ident: Acquire#0, hir_id: HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).17), res: Def(Ctor(Variant, Const), DefId(1:37513 ~ core[7d5a]::sync::atomic::Ordering::Acquire::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1243:31: 1243:48 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1243:26: 1243:49 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1243:8: 1243:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1243:53: 1243:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1243:53: 1243:54 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:37960 ~ core[7d5a]::sync::atomic::{impl#78}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:380 ~ alloc[5873]::boxed::{impl#6}::from_raw)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2013 ~ core[7d5a]::mem::manually_drop::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:909 ~ bytes[a5c5]::offset_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7427 ~ alloc[5873]::vec::{impl#0}::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1252:42: 1252:45 (#0), res: Local(HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).6)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).73), res: Local(HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1252:42: 1252:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1252:48: 1252:51 (#0), res: Local(HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).62)), segments: [PathSegment { ident: off#0, hir_id: HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).75), res: Local(HirId(DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl).62)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1252:48: 1252:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:5735 ~ alloc[5873]::slice::{impl#0}::to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:594 ~ bytes[a5c5]::bytes::release_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:588 ~ bytes[a5c5]::bytes::shared_to_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:587 ~ bytes[a5c5]::bytes::shared_to_mut_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10619 ~ core[7d5a]::sync::atomic::{impl#6}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:589 ~ bytes[a5c5]::bytes::shared_is_unique)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10619 ~ core[7d5a]::sync::atomic::{impl#6}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:37960 ~ core[7d5a]::sync::atomic::{impl#78}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:589 ~ bytes[a5c5]::bytes::shared_is_unique).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1272:5: 1272:12 (#0), res: Local(HirId(DefId(0:589 ~ bytes[a5c5]::bytes::shared_is_unique).28)), segments: [PathSegment { ident: ref_cnt#0, hir_id: HirId(DefId(0:589 ~ bytes[a5c5]::bytes::shared_is_unique).31), res: Local(HirId(DefId(0:589 ~ bytes[a5c5]::bytes::shared_is_unique).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1272:5: 1272:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:589 ~ bytes[a5c5]::bytes::shared_is_unique).32), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1272:16: 1272:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1272:16: 1272:17 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:590 ~ bytes[a5c5]::bytes::shared_drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:892 ~ bytes[a5c5]::loom::sync::atomic::AtomicMut::with_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:594 ~ bytes[a5c5]::bytes::release_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:37966 ~ core[7d5a]::sync::atomic::{impl#78}::fetch_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1284:8: 1284:16 (#0), res: Local(HirId(DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc).19)), segments: [PathSegment { ident: old_size#0, hir_id: HirId(DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc).23), res: Local(HirId(DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1284:8: 1284:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc).24), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1284:30: 1284:32 (#0) }, Expr { hir_id: HirId(DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1284:19: 1284:29 (#0), res: Def(Const, DefId(1:17552 ~ core[7d5a]::usize::MAX)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc).26), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc).27), res: Def(Const, DefId(1:17552 ~ core[7d5a]::usize::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1284:19: 1284:29 (#0) }, Expr { hir_id: HirId(DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc).28), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1284:33: 1284:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1284:33: 1284:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1284:19: 1284:34 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1284:19: 1284:29 (#0), res: Def(Const, DefId(1:17552 ~ core[7d5a]::usize::MAX)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc).26), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc).27), res: Def(Const, DefId(1:17552 ~ core[7d5a]::usize::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1284:19: 1284:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc).28), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1284:33: 1284:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1284:33: 1284:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:902 ~ bytes[a5c5]::abort)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10610 ~ core[7d5a]::sync::atomic::{impl#6}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).24), kind: Call(Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1317:14: 1317:25 (#0), res: Def(Fn, DefId(0:909 ~ bytes[a5c5]::offset_from)), segments: [PathSegment { ident: offset_from#0, hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).26), res: Def(Fn, DefId(0:909 ~ bytes[a5c5]::offset_from)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1317:14: 1317:25 (#0) }, [Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1317:26: 1317:32 (#0), res: Local(HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).8)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).28), res: Local(HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1317:26: 1317:32 (#0) }, Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1317:34: 1317:37 (#0), res: Local(HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).6)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).30), res: Local(HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1317:34: 1317:37 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1317:14: 1317:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1317:41: 1317:44 (#0), res: Local(HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).10)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).32), res: Local(HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1317:41: 1317:44 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:909 ~ bytes[a5c5]::offset_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:37950 ~ core[7d5a]::sync::atomic::{impl#78}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:385 ~ alloc[5873]::boxed::{impl#7}::into_raw)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).58), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:9: 1329:10 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:9: 1329:10 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).59), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:31: 1329:32 (#0) }, Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).60), kind: Cast(Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:15: 1329:21 (#0), res: Local(HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).51)), segments: [PathSegment { ident: shared#0, hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).62), res: Local(HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).51)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:15: 1329:21 (#0) }, Ty { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:25: 1329:30 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).64), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:25: 1329:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:15: 1329:30 (#0) }, Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:33: 1329:42 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).66), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:33: 1329:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:14: 1329:43 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).60), kind: Cast(Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:15: 1329:21 (#0), res: Local(HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).51)), segments: [PathSegment { ident: shared#0, hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).62), res: Local(HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).51)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:15: 1329:21 (#0) }, Ty { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:25: 1329:30 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).64), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:25: 1329:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:15: 1329:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:33: 1329:42 (#0), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).66), res: Def(Const, DefId(0:583 ~ bytes[a5c5]::bytes::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1329:33: 1329:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10623 ~ core[7d5a]::sync::atomic::{impl#6}::compare_exchange)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).110), kind: Cast(Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1344:27: 1344:33 (#0), res: Local(HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).100)), segments: [PathSegment { ident: actual#0, hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).112), res: Local(HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).100)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1344:27: 1344:33 (#0) }, Ty { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1344:37: 1344:42 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).114), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1344:37: 1344:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1344:27: 1344:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).115), kind: Cast(Expr { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1344:46: 1344:49 (#0), res: Local(HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).4)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).117), res: Local(HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1344:46: 1344:49 (#0) }, Ty { hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).118), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1344:53: 1344:58 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:593 ~ bytes[a5c5]::bytes::shallow_clone_vec).119), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1344:53: 1344:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1344:46: 1344:58 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10610 ~ core[7d5a]::sync::atomic::{impl#6}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:380 ~ alloc[5873]::boxed::{impl#6}::from_raw)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2154 ~ core[7d5a]::mem::forget)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:592 ~ bytes[a5c5]::bytes::shallow_clone_arc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:594 ~ bytes[a5c5]::bytes::release_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:594 ~ bytes[a5c5]::bytes::release_shared).5), kind: MethodCall(PathSegment { ident: fetch_sub#0, hir_id: HirId(DefId(0:594 ~ bytes[a5c5]::bytes::release_shared).6), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:594 ~ bytes[a5c5]::bytes::release_shared).7), kind: Field(Expr { hir_id: HirId(DefId(0:594 ~ bytes[a5c5]::bytes::release_shared).8), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:594 ~ bytes[a5c5]::bytes::release_shared).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1370:10: 1370:13 (#0), res: Local(HirId(DefId(0:594 ~ bytes[a5c5]::bytes::release_shared).2)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:594 ~ bytes[a5c5]::bytes::release_shared).10), res: Local(HirId(DefId(0:594 ~ bytes[a5c5]::bytes::release_shared).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1370:10: 1370:13 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1370:8: 1370:14 (#0) }, ref_cnt#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1370:8: 1370:22 (#0) }, [Expr { hir_id: HirId(DefId(0:594 ~ bytes[a5c5]::bytes::release_shared).11), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1370:33: 1370:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1370:33: 1370:34 (#0) }, Expr { hir_id: HirId(DefId(0:594 ~ bytes[a5c5]::bytes::release_shared).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1370:36: 1370:53 (#0), res: Def(Ctor(Variant, Const), DefId(1:37511 ~ core[7d5a]::sync::atomic::Ordering::Release::{constructor#0})), segments: [PathSegment { ident: Ordering#0, hir_id: HirId(DefId(0:594 ~ bytes[a5c5]::bytes::release_shared).13), res: Def(Enum, DefId(1:37507 ~ core[7d5a]::sync::atomic::Ordering)), args: None, infer_args: true }, PathSegment { ident: Release#0, hir_id: HirId(DefId(0:594 ~ bytes[a5c5]::bytes::release_shared).14), res: Def(Ctor(Variant, Const), DefId(1:37511 ~ core[7d5a]::sync::atomic::Ordering::Release::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1370:36: 1370:53 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1370:23: 1370:54 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1370:8: 1370:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:594 ~ bytes[a5c5]::bytes::release_shared).15), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1370:58: 1370:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1370:58: 1370:59 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:37967 ~ core[7d5a]::sync::atomic::{impl#78}::fetch_sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:37960 ~ core[7d5a]::sync::atomic::{impl#78}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:380 ~ alloc[5873]::boxed::{impl#6}::from_raw)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:595 ~ bytes[a5c5]::bytes::ptr_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:595 ~ bytes[a5c5]::bytes::ptr_map).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1423:20: 1423:21 (#0), res: Local(HirId(DefId(0:595 ~ bytes[a5c5]::bytes::ptr_map).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:595 ~ bytes[a5c5]::bytes::ptr_map).16), res: Local(HirId(DefId(0:595 ~ bytes[a5c5]::bytes::ptr_map).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1423:20: 1423:21 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:595 ~ bytes[a5c5]::bytes::ptr_map).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1423:20: 1423:21 (#0), res: Local(HirId(DefId(0:595 ~ bytes[a5c5]::bytes::ptr_map).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:595 ~ bytes[a5c5]::bytes::ptr_map).16), res: Local(HirId(DefId(0:595 ~ bytes[a5c5]::bytes::ptr_map).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes.rs:1423:20: 1423:21 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:597 ~ bytes[a5c5]::bytes::_split_to_must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:598 ~ bytes[a5c5]::bytes::_split_off_must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:663 ~ bytes[a5c5]::bytes_mut::{impl#0}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7425 ~ alloc[5873]::vec::{impl#0}::with_capacity)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:664 ~ bytes[a5c5]::bytes_mut::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:663 ~ bytes[a5c5]::bytes_mut::{impl#0}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:666 ~ bytes[a5c5]::bytes_mut::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:666 ~ bytes[a5c5]::bytes_mut::{impl#0}::is_empty).4), kind: Field(Expr { hir_id: HirId(DefId(0:666 ~ bytes[a5c5]::bytes_mut::{impl#0}::is_empty).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:203:9: 203:13 (#0), res: Local(HirId(DefId(0:666 ~ bytes[a5c5]::bytes_mut::{impl#0}::is_empty).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:666 ~ bytes[a5c5]::bytes_mut::{impl#0}::is_empty).6), res: Local(HirId(DefId(0:666 ~ bytes[a5c5]::bytes_mut::{impl#0}::is_empty).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:203:9: 203:13 (#0) }, len#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:203:9: 203:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:666 ~ bytes[a5c5]::bytes_mut::{impl#0}::is_empty).7), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:203:21: 203:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:203:21: 203:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:667 ~ bytes[a5c5]::bytes_mut::{impl#0}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2013 ~ core[7d5a]::mem::manually_drop::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).15), kind: MethodCall(PathSegment { ident: kind#0, hir_id: HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).16), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:248:12: 248:17 (#0), res: Local(HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).12)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).18), res: Local(HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:248:12: 248:17 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:248:18: 248:24 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:248:12: 248:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:248:28: 248:36 (#0), res: Def(Const, DefId(0:652 ~ bytes[a5c5]::bytes_mut::KIND_VEC)), segments: [PathSegment { ident: KIND_VEC#0, hir_id: HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).20), res: Def(Const, DefId(0:652 ~ bytes[a5c5]::bytes_mut::KIND_VEC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:248:28: 248:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:837 ~ bytes[a5c5]::bytes_mut::rebuild_vec)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ bytes[a5c5]::buf::buf_impl::Buf::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).92), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#154), res: Local(HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).84)), segments: [PathSegment { ident: left_val#154, hir_id: HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).94), res: Local(HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).84)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#154) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#154) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).95), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#154), res: Local(HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).85)), segments: [PathSegment { ident: right_val#154, hir_id: HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).97), res: Local(HirId(DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze).85)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#154) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#154) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10610 ~ core[7d5a]::sync::atomic::{impl#6}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:432 ~ bytes[a5c5]::bytes::{impl#0}::with_vtable)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:669 ~ bytes[a5c5]::bytes_mut::{impl#0}::zeroed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7545 ~ alloc[5873]::vec::from_elem)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:670 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_off)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:670 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_off).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:320:13: 320:15 (#0), res: Local(HirId(DefId(0:670 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_off).4)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:670 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_off).9), res: Local(HirId(DefId(0:670 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_off).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:320:13: 320:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:670 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_off).10), kind: MethodCall(PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:670 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_off).11), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:670 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_off).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:320:19: 320:23 (#0), res: Local(HirId(DefId(0:670 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_off).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:670 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_off).13), res: Local(HirId(DefId(0:670 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_off).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:320:19: 320:23 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:320:24: 320:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:320:19: 320:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:667 ~ bytes[a5c5]::bytes_mut::{impl#0}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:667 ~ bytes[a5c5]::bytes_mut::{impl#0}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:689 ~ bytes[a5c5]::bytes_mut::{impl#0}::shallow_clone)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:671 ~ bytes[a5c5]::bytes_mut::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:672 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_to)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:672 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:672 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_to).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:395:13: 395:15 (#0), res: Local(HirId(DefId(0:672 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_to).4)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:672 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_to).9), res: Local(HirId(DefId(0:672 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_to).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:395:13: 395:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:672 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_to).10), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:672 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_to).11), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:672 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_to).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:395:19: 395:23 (#0), res: Local(HirId(DefId(0:672 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_to).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:672 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_to).13), res: Local(HirId(DefId(0:672 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_to).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:395:19: 395:23 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:395:24: 395:29 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:395:19: 395:29 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:689 ~ bytes[a5c5]::bytes_mut::{impl#0}::shallow_clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:673 ~ bytes[a5c5]::bytes_mut::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:673 ~ bytes[a5c5]::bytes_mut::{impl#0}::truncate).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:433:12: 433:15 (#0), res: Local(HirId(DefId(0:673 ~ bytes[a5c5]::bytes_mut::{impl#0}::truncate).4)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:673 ~ bytes[a5c5]::bytes_mut::{impl#0}::truncate).8), res: Local(HirId(DefId(0:673 ~ bytes[a5c5]::bytes_mut::{impl#0}::truncate).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:433:12: 433:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:673 ~ bytes[a5c5]::bytes_mut::{impl#0}::truncate).9), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:673 ~ bytes[a5c5]::bytes_mut::{impl#0}::truncate).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:673 ~ bytes[a5c5]::bytes_mut::{impl#0}::truncate).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:433:19: 433:23 (#0), res: Local(HirId(DefId(0:673 ~ bytes[a5c5]::bytes_mut::{impl#0}::truncate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:673 ~ bytes[a5c5]::bytes_mut::{impl#0}::truncate).12), res: Local(HirId(DefId(0:673 ~ bytes[a5c5]::bytes_mut::{impl#0}::truncate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:433:19: 433:23 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:433:24: 433:29 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:433:19: 433:29 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:676 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:674 ~ bytes[a5c5]::bytes_mut::{impl#0}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:676 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:675 ~ bytes[a5c5]::bytes_mut::{impl#0}::resize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25395 ~ core[7d5a]::num::{impl#11}::checked_sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:673 ~ bytes[a5c5]::bytes_mut::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:675 ~ bytes[a5c5]::bytes_mut::{impl#0}::resize).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:485:12: 485:22 (#0), res: Local(HirId(DefId(0:675 ~ bytes[a5c5]::bytes_mut::{impl#0}::resize).37)), segments: [PathSegment { ident: additional#0, hir_id: HirId(DefId(0:675 ~ bytes[a5c5]::bytes_mut::{impl#0}::resize).41), res: Local(HirId(DefId(0:675 ~ bytes[a5c5]::bytes_mut::{impl#0}::resize).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:485:12: 485:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:675 ~ bytes[a5c5]::bytes_mut::{impl#0}::resize).42), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:485:26: 485:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:485:26: 485:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:1990 ~ core[7d5a]::intrinsics::write_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:676 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:676 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:676 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_len).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:527:23: 527:26 (#0), res: Local(HirId(DefId(0:676 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_len).4)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:676 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_len).12), res: Local(HirId(DefId(0:676 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_len).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:527:23: 527:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:676 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_len).13), kind: Field(Expr { hir_id: HirId(DefId(0:676 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_len).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:527:30: 527:34 (#0), res: Local(HirId(DefId(0:676 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_len).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:676 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_len).15), res: Local(HirId(DefId(0:676 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_len).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:527:30: 527:34 (#0) }, cap#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:527:30: 527:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).14), kind: MethodCall(PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:592:19: 592:23 (#0), res: Local(HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).17), res: Local(HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:592:19: 592:23 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:592:24: 592:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:592:19: 592:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:592:37: 592:40 (#0), res: Local(HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).11)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).19), res: Local(HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:592:37: 592:40 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:667 ~ bytes[a5c5]::bytes_mut::{impl#0}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:594:12: 594:22 (#0), res: Local(HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).4)), segments: [PathSegment { ident: additional#0, hir_id: HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).25), res: Local(HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:594:12: 594:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:594:26: 594:29 (#0), res: Local(HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).21)), segments: [PathSegment { ident: rem#0, hir_id: HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).27), res: Local(HirId(DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:594:26: 594:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:610:12: 610:16 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).20)), segments: [PathSegment { ident: kind#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).24), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:610:12: 610:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:610:20: 610:28 (#0), res: Def(Const, DefId(0:652 ~ bytes[a5c5]::bytes_mut::KIND_VEC)), segments: [PathSegment { ident: KIND_VEC#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).26), res: Def(Const, DefId(0:652 ~ bytes[a5c5]::bytes_mut::KIND_VEC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:610:20: 610:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).38), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:55: 635:57 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).39), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:49: 635:50 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).40), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:36: 635:37 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).41), kind: MethodCall(PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).42), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:24 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).44), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:25: 635:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:35 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).45), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).46), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:38: 635:42 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).48), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:38: 635:42 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:43: 635:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:38: 635:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:48 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:51: 635:54 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).35)), segments: [PathSegment { ident: off#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).50), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:51: 635:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:54 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:58: 635:68 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).4)), segments: [PathSegment { ident: additional#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).52), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:58: 635:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:68 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).53), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:76: 635:78 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:72: 635:75 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).35)), segments: [PathSegment { ident: off#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).55), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:72: 635:75 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).56), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).57), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:79: 635:83 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).59), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:79: 635:83 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:84: 635:89 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:79: 635:89 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:72: 635:89 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).39), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:49: 635:50 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).40), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:36: 635:37 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).41), kind: MethodCall(PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).42), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:24 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).44), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:25: 635:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:35 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).45), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).46), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:38: 635:42 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).48), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:38: 635:42 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:43: 635:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:38: 635:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:48 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:51: 635:54 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).35)), segments: [PathSegment { ident: off#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).50), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:51: 635:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:58: 635:68 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).4)), segments: [PathSegment { ident: additional#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).52), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:58: 635:68 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).40), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:36: 635:37 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).41), kind: MethodCall(PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).42), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:24 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).44), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:25: 635:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:35 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).45), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).46), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:38: 635:42 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).48), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:38: 635:42 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:43: 635:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:38: 635:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:51: 635:54 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).35)), segments: [PathSegment { ident: off#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).50), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:51: 635:54 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).41), kind: MethodCall(PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).42), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:24 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).44), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:25: 635:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:20: 635:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).45), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).46), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:38: 635:42 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).48), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:38: 635:42 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:43: 635:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:38: 635:48 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:667 ~ bytes[a5c5]::bytes_mut::{impl#0}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:72: 635:75 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).35)), segments: [PathSegment { ident: off#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).55), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:72: 635:75 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).56), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).57), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:79: 635:83 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).59), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:79: 635:83 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:84: 635:89 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:635:79: 635:89 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2691 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:834 ~ bytes[a5c5]::bytes_mut::vptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2013 ~ core[7d5a]::mem::manually_drop::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:837 ~ bytes[a5c5]::bytes_mut::rebuild_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7440 ~ alloc[5873]::vec::{impl#1}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:834 ~ bytes[a5c5]::bytes_mut::vptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2689 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7451 ~ alloc[5873]::vec::{impl#1}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).177), kind: MethodCall(PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).178), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).179), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:662:32: 662:33 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).148)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).180), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).148)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:662:32: 662:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:662:34: 662:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:662:32: 662:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:662:47: 662:50 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).35)), segments: [PathSegment { ident: off#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).182), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:662:47: 662:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(4:7439 ~ alloc[5873]::vec::{impl#1}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).195), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).196), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).197), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:663:48: 663:49 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).148)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).198), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).148)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:663:48: 663:49 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:663:50: 663:55 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:663:48: 663:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:663:58: 663:61 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).35)), segments: [PathSegment { ident: off#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).200), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:663:58: 663:61 (#0) }
[DEBUG] Trying to get func ty of defid DefId(4:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).209), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).210), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#174), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).201)), segments: [PathSegment { ident: left_val#174, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).211), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).201)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#174) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#174) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).212), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).213), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#174), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).202)), segments: [PathSegment { ident: right_val#174, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).214), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).202)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#174) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#174) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).280), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).281), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#177), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).272)), segments: [PathSegment { ident: left_val#177, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).282), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).272)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#177) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#177) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).283), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).284), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#177), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).273)), segments: [PathSegment { ident: right_val#177, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).285), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).273)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#177) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#177) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7439 ~ alloc[5873]::vec::{impl#1}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7451 ~ alloc[5873]::vec::{impl#1}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:909 ~ bytes[a5c5]::offset_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).410), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:699:20: 699:30 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).387)), segments: [PathSegment { ident: v_capacity#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).411), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).387)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:699:20: 699:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).412), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:699:42: 699:43 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).413), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:699:34: 699:41 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).364)), segments: [PathSegment { ident: new_cap#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).414), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).364)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:699:34: 699:41 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).415), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:699:44: 699:50 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).407)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).416), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).407)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:699:44: 699:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:699:34: 699:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).413), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:699:34: 699:41 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).364)), segments: [PathSegment { ident: new_cap#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).414), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).364)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:699:34: 699:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).415), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:699:44: 699:50 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).407)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).416), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).407)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:699:44: 699:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).429), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:38: 702:40 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).430), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:27: 702:37 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).387)), segments: [PathSegment { ident: v_capacity#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).431), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).387)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:27: 702:37 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).432), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:41: 702:48 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).364)), segments: [PathSegment { ident: new_cap#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).433), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).364)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:41: 702:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:27: 702:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).434), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:59: 702:61 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).435), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:52: 702:58 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).407)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).436), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).407)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:52: 702:58 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).437), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:62: 702:65 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).13)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).438), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:62: 702:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:52: 702:65 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).430), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:27: 702:37 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).387)), segments: [PathSegment { ident: v_capacity#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).431), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).387)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:27: 702:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).432), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:41: 702:48 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).364)), segments: [PathSegment { ident: new_cap#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).433), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).364)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:41: 702:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).435), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:52: 702:58 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).407)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).436), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).407)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:52: 702:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).437), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:62: 702:65 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).13)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).438), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:702:62: 702:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:834 ~ bytes[a5c5]::bytes_mut::vptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7439 ~ alloc[5873]::vec::{impl#1}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).489), kind: Cast(Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).490), kind: MethodCall(PathSegment { ident: as_ptr#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).491), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).492), kind: Field(Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).493), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:32: 716:36 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).494), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:32: 716:36 (#0) }, ptr#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:32: 716:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:41: 716:49 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:32: 716:49 (#0) }, Ty { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).495), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:53: 716:58 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).496), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:53: 716:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:31: 716:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).497), kind: Cast(Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).498), kind: MethodCall(PathSegment { ident: as_ptr#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).499), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).500), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:63: 716:64 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).380)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).501), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).380)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:63: 716:64 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:65: 716:73 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:63: 716:73 (#0) }, Ty { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).502), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:77: 716:82 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).503), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:77: 716:82 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:716:62: 716:83 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7450 ~ alloc[5873]::vec::{impl#1}::as_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:25418 ~ core[7d5a]::num::{impl#11}::checked_shl)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(4:7439 ~ alloc[5873]::vec::{impl#1}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3024 ~ core[7d5a]::cmp::max)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).551), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:744:39: 744:40 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).552), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:744:35: 744:38 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).505)), segments: [PathSegment { ident: off#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).553), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).505)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:744:35: 744:38 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).554), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:744:41: 744:44 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).13)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).555), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:744:41: 744:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:744:35: 744:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).556), kind: MethodCall(PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).557), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).558), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:744:48: 744:49 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).380)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).559), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).380)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:744:48: 744:49 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:744:50: 744:60 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:744:48: 744:60 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).552), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:744:35: 744:38 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).505)), segments: [PathSegment { ident: off#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).553), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).505)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:744:35: 744:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).554), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:744:41: 744:44 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).13)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).555), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:744:41: 744:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7439 ~ alloc[5873]::vec::{impl#1}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7453 ~ alloc[5873]::vec::{impl#1}::set_len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).578), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:745:31: 745:34 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).505)), segments: [PathSegment { ident: off#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).579), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).505)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:745:31: 745:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).580), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:745:37: 745:40 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).13)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).581), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:745:37: 745:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7440 ~ alloc[5873]::vec::{impl#1}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).588), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:746:31: 746:38 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).364)), segments: [PathSegment { ident: new_cap#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).589), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).364)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:746:31: 746:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).590), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).591), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).592), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:746:41: 746:42 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).380)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).593), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).380)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:746:41: 746:42 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:746:43: 746:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:746:41: 746:48 (#0) }
[DEBUG] Trying to get func ty of defid DefId(4:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:834 ~ bytes[a5c5]::bytes_mut::vptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2689 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7451 ~ alloc[5873]::vec::{impl#1}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).616), kind: MethodCall(PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).617), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).618), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:750:32: 750:33 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).380)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).619), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).380)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:750:32: 750:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:750:34: 750:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:750:32: 750:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).620), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:750:47: 750:50 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).505)), segments: [PathSegment { ident: off#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).621), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).505)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:750:47: 750:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(4:7439 ~ alloc[5873]::vec::{impl#1}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3024 ~ core[7d5a]::cmp::max)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2013 ~ core[7d5a]::mem::manually_drop::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7425 ~ alloc[5873]::vec::{impl#0}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7527 ~ alloc[5873]::vec::{impl#2}::extend_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).706), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:776:44: 776:46 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).707), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:776:21: 776:43 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).651)), segments: [PathSegment { ident: original_capacity_repr#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).708), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).651)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:776:21: 776:43 (#0) }, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).709), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:776:47: 776:71 (#0), res: Def(Const, DefId(0:657 ~ bytes[a5c5]::bytes_mut::ORIGINAL_CAPACITY_OFFSET)), segments: [PathSegment { ident: ORIGINAL_CAPACITY_OFFSET#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).710), res: Def(Const, DefId(0:657 ~ bytes[a5c5]::bytes_mut::ORIGINAL_CAPACITY_OFFSET)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:776:47: 776:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:776:20: 776:72 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).711), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:776:75: 776:83 (#0), res: Def(Const, DefId(0:652 ~ bytes[a5c5]::bytes_mut::KIND_VEC)), segments: [PathSegment { ident: KIND_VEC#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).712), res: Def(Const, DefId(0:652 ~ bytes[a5c5]::bytes_mut::KIND_VEC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:776:75: 776:83 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).707), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:776:21: 776:43 (#0), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).651)), segments: [PathSegment { ident: original_capacity_repr#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).708), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).651)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:776:21: 776:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).709), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:776:47: 776:71 (#0), res: Def(Const, DefId(0:657 ~ bytes[a5c5]::bytes_mut::ORIGINAL_CAPACITY_OFFSET)), segments: [PathSegment { ident: ORIGINAL_CAPACITY_OFFSET#0, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).710), res: Def(Const, DefId(0:657 ~ bytes[a5c5]::bytes_mut::ORIGINAL_CAPACITY_OFFSET)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:776:47: 776:71 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:835 ~ bytes[a5c5]::bytes_mut::invalid_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:834 ~ bytes[a5c5]::bytes_mut::vptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7451 ~ alloc[5873]::vec::{impl#1}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7439 ~ alloc[5873]::vec::{impl#1}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).768), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).769), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#187), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).760)), segments: [PathSegment { ident: left_val#187, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).770), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).760)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#187) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#187) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).771), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).772), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#187), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).761)), segments: [PathSegment { ident: right_val#187, hir_id: HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).773), res: Local(HirId(DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner).761)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#187) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#187) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).14), kind: MethodCall(PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:833:19: 833:23 (#0), res: Local(HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).17), res: Local(HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:833:19: 833:23 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:833:24: 833:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:833:19: 833:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:833:37: 833:40 (#0), res: Local(HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).11)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).19), res: Local(HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:833:37: 833:40 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:667 ~ bytes[a5c5]::bytes_mut::{impl#0}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:835:12: 835:22 (#0), res: Local(HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).4)), segments: [PathSegment { ident: additional#0, hir_id: HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).25), res: Local(HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:835:12: 835:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:835:26: 835:29 (#0), res: Local(HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).21)), segments: [PathSegment { ident: rem#0, hir_id: HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).27), res: Local(HirId(DefId(0:679 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_reclaim).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:835:26: 835:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:678 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice).33), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:868:27: 868:30 (#0), res: Local(HirId(DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice).26)), segments: [PathSegment { ident: dst#0, hir_id: HirId(DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice).36), res: Local(HirId(DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:868:27: 868:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:868:31: 868:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:868:27: 868:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:868:40: 868:43 (#0), res: Local(HirId(DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice).11)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice).38), res: Local(HirId(DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:868:40: 868:43 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ bytes[a5c5]::buf::buf_mut::BufMut::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:681 ~ bytes[a5c5]::bytes_mut::{impl#0}::unsplit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:666 ~ bytes[a5c5]::bytes_mut::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2013 ~ core[7d5a]::mem::manually_drop::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:834 ~ bytes[a5c5]::bytes_mut::vptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7451 ~ alloc[5873]::vec::{impl#1}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7439 ~ alloc[5873]::vec::{impl#1}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).47), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:929:44: 929:46 (#0) }, Expr { hir_id: HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:929:21: 929:43 (#0), res: Local(HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).44)), segments: [PathSegment { ident: original_capacity_repr#0, hir_id: HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).49), res: Local(HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:929:21: 929:43 (#0) }, Expr { hir_id: HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:929:47: 929:71 (#0), res: Def(Const, DefId(0:657 ~ bytes[a5c5]::bytes_mut::ORIGINAL_CAPACITY_OFFSET)), segments: [PathSegment { ident: ORIGINAL_CAPACITY_OFFSET#0, hir_id: HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).51), res: Def(Const, DefId(0:657 ~ bytes[a5c5]::bytes_mut::ORIGINAL_CAPACITY_OFFSET)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:929:47: 929:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:929:20: 929:72 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:929:75: 929:83 (#0), res: Def(Const, DefId(0:652 ~ bytes[a5c5]::bytes_mut::KIND_VEC)), segments: [PathSegment { ident: KIND_VEC#0, hir_id: HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).53), res: Def(Const, DefId(0:652 ~ bytes[a5c5]::bytes_mut::KIND_VEC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:929:75: 929:83 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:929:21: 929:43 (#0), res: Local(HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).44)), segments: [PathSegment { ident: original_capacity_repr#0, hir_id: HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).49), res: Local(HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:929:21: 929:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:929:47: 929:71 (#0), res: Def(Const, DefId(0:657 ~ bytes[a5c5]::bytes_mut::ORIGINAL_CAPACITY_OFFSET)), segments: [PathSegment { ident: ORIGINAL_CAPACITY_OFFSET#0, hir_id: HirId(DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec).51), res: Def(Const, DefId(0:657 ~ bytes[a5c5]::bytes_mut::ORIGINAL_CAPACITY_OFFSET)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:929:47: 929:71 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:835 ~ bytes[a5c5]::bytes_mut::invalid_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:683 ~ bytes[a5c5]::bytes_mut::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:684 ~ bytes[a5c5]::bytes_mut::{impl#0}::as_slice_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13131 ~ core[7d5a]::slice::raw::from_raw_parts_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:957:12: 957:17 (#0), res: Local(HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).4)), segments: [PathSegment { ident: count#0, hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).8), res: Local(HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:957:12: 957:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:957:21: 957:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:957:21: 957:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:961:23: 961:28 (#0), res: Local(HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).4)), segments: [PathSegment { ident: count#0, hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).23), res: Local(HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:961:23: 961:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).24), kind: Field(Expr { hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:961:32: 961:36 (#0), res: Local(HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).26), res: Local(HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:961:32: 961:36 (#0) }, cap#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:961:32: 961:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:965:12: 965:16 (#0), res: Local(HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).46)), segments: [PathSegment { ident: kind#0, hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).50), res: Local(HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:965:12: 965:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:965:20: 965:28 (#0), res: Def(Const, DefId(0:652 ~ bytes[a5c5]::bytes_mut::KIND_VEC)), segments: [PathSegment { ident: KIND_VEC#0, hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).52), res: Def(Const, DefId(0:652 ~ bytes[a5c5]::bytes_mut::KIND_VEC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:965:20: 965:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).56), kind: MethodCall(PathSegment { ident: get_vec_pos#0, hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).57), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:970:23: 970:27 (#0), res: Local(HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).59), res: Local(HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:970:23: 970:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:970:28: 970:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:970:23: 970:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:970:44: 970:49 (#0), res: Local(HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).4)), segments: [PathSegment { ident: count#0, hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).61), res: Local(HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:970:44: 970:49 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:972:16: 972:19 (#0), res: Local(HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).63)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).67), res: Local(HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).63)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:972:16: 972:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:972:23: 972:34 (#0), res: Def(Const, DefId(0:659 ~ bytes[a5c5]::bytes_mut::MAX_VEC_POS)), segments: [PathSegment { ident: MAX_VEC_POS#0, hir_id: HirId(DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked).69), res: Def(Const, DefId(0:659 ~ bytes[a5c5]::bytes_mut::MAX_VEC_POS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:972:23: 972:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:834 ~ bytes[a5c5]::bytes_mut::vptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2689 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25395 ~ core[7d5a]::num::{impl#11}::checked_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).7), kind: MethodCall(PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:992:12: 992:17 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).10), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:992:12: 992:17 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:992:18: 992:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:992:12: 992:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:992:32: 992:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:992:32: 992:33 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:667 ~ bytes[a5c5]::bytes_mut::{impl#0}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2689 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).39), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:13: 999:15 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).40), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:13: 998:15 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).41), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:16: 997:18 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:12: 997:15 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).36)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).43), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:12: 997:15 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).44), kind: MethodCall(PathSegment { ident: as_ptr#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).45), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).46), kind: Field(Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:24 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).48), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:24 (#0) }, ptr#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:29: 997:37 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:12: 997:37 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).49), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:28: 998:30 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).50), kind: MethodCall(PathSegment { ident: kind#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).51), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:20 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).53), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:20 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:21: 998:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:27 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:31: 998:39 (#0), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).55), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:31: 998:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:12: 998:39 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).56), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:29: 999:31 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).57), kind: MethodCall(PathSegment { ident: kind#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).58), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:16: 999:21 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).60), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:16: 999:21 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:22: 999:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:16: 999:28 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:32: 999:40 (#0), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).62), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:32: 999:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:16: 999:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:12: 999:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).63), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1000:26: 1000:28 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).64), kind: Field(Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1000:16: 1000:20 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).66), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1000:16: 1000:20 (#0) }, data#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1000:16: 1000:25 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).67), kind: Field(Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1000:29: 1000:34 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).69), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1000:29: 1000:34 (#0) }, data#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1000:29: 1000:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1000:16: 1000:39 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).40), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:13: 998:15 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).41), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:16: 997:18 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:12: 997:15 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).36)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).43), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:12: 997:15 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).44), kind: MethodCall(PathSegment { ident: as_ptr#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).45), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).46), kind: Field(Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:24 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).48), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:24 (#0) }, ptr#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:29: 997:37 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:12: 997:37 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).49), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:28: 998:30 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).50), kind: MethodCall(PathSegment { ident: kind#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).51), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:20 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).53), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:20 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:21: 998:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:27 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:31: 998:39 (#0), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).55), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:31: 998:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:12: 998:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).56), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:29: 999:31 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).57), kind: MethodCall(PathSegment { ident: kind#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).58), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:16: 999:21 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).60), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:16: 999:21 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:22: 999:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:16: 999:28 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:32: 999:40 (#0), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).62), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:32: 999:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:16: 999:40 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).41), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:16: 997:18 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:12: 997:15 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).36)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).43), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:12: 997:15 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).44), kind: MethodCall(PathSegment { ident: as_ptr#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).45), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).46), kind: Field(Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:24 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).48), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:24 (#0) }, ptr#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:29: 997:37 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:12: 997:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).49), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:28: 998:30 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).50), kind: MethodCall(PathSegment { ident: kind#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).51), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:20 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).53), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:20 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:21: 998:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:27 (#0) }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:31: 998:39 (#0), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).55), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:31: 998:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:39 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:12: 997:15 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).36)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).43), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:12: 997:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).44), kind: MethodCall(PathSegment { ident: as_ptr#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).45), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).46), kind: Field(Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:24 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).48), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:24 (#0) }, ptr#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:29: 997:37 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:997:19: 997:37 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).50), kind: MethodCall(PathSegment { ident: kind#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).51), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:20 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).53), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:20 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:21: 998:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:16: 998:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:31: 998:39 (#0), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).55), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:998:31: 998:39 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).57), kind: MethodCall(PathSegment { ident: kind#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).58), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:16: 999:21 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).60), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:16: 999:21 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:22: 999:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:16: 999:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:32: 999:40 (#0), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).62), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:999:32: 999:40 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).64), kind: Field(Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1000:16: 1000:20 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).66), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1000:16: 1000:20 (#0) }, data#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1000:16: 1000:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).67), kind: Field(Expr { hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1000:29: 1000:34 (#0), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).69), res: Local(HirId(DefId(0:686 ~ bytes[a5c5]::bytes_mut::{impl#0}::try_unsplit).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1000:29: 1000:34 (#0) }, data#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1000:29: 1000:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind).4), kind: Cast(Expr { hir_id: HirId(DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind).5), kind: Field(Expr { hir_id: HirId(DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1013:9: 1013:13 (#0), res: Local(HirId(DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind).7), res: Local(HirId(DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1013:9: 1013:13 (#0) }, data#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1013:9: 1013:18 (#0) }, Ty { hir_id: HirId(DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1013:22: 1013:27 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind).9), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1013:22: 1013:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1013:9: 1013:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1013:30: 1013:39 (#0), res: Def(Const, DefId(0:653 ~ bytes[a5c5]::bytes_mut::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind).11), res: Def(Const, DefId(0:653 ~ bytes[a5c5]::bytes_mut::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1013:30: 1013:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).26), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#200), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).18)), segments: [PathSegment { ident: left_val#200, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).28), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#200) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#200) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).29), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#200), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).19)), segments: [PathSegment { ident: right_val#200, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).31), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#200) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#200) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).75), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:31: 1018:33 (#0) }, Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:23: 1018:30 (#0), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).4)), segments: [PathSegment { ident: ref_cnt#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).77), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:23: 1018:30 (#0) }, Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).78), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:34: 1018:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:34: 1018:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:23: 1018:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).79), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:47: 1018:49 (#0) }, Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:39: 1018:46 (#0), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).4)), segments: [PathSegment { ident: ref_cnt#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).81), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:39: 1018:46 (#0) }, Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).82), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:50: 1018:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:50: 1018:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:39: 1018:51 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:23: 1018:30 (#0), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).4)), segments: [PathSegment { ident: ref_cnt#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).77), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:23: 1018:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).78), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:34: 1018:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:34: 1018:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:39: 1018:46 (#0), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).4)), segments: [PathSegment { ident: ref_cnt#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).81), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:39: 1018:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).82), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:50: 1018:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1018:50: 1018:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).98), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:33: 1021:34 (#0) }, Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).99), kind: Cast(Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).100), kind: Field(Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:14: 1021:18 (#0), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).102), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:14: 1021:18 (#0) }, data#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:14: 1021:23 (#0) }, Ty { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).103), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:27: 1021:32 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).104), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:27: 1021:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:14: 1021:32 (#0) }, Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).105), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:35: 1021:57 (#0), res: Def(Const, DefId(0:656 ~ bytes[a5c5]::bytes_mut::ORIGINAL_CAPACITY_MASK)), segments: [PathSegment { ident: ORIGINAL_CAPACITY_MASK#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).106), res: Def(Const, DefId(0:656 ~ bytes[a5c5]::bytes_mut::ORIGINAL_CAPACITY_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:35: 1021:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:13: 1021:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:62: 1021:86 (#0), res: Def(Const, DefId(0:657 ~ bytes[a5c5]::bytes_mut::ORIGINAL_CAPACITY_OFFSET)), segments: [PathSegment { ident: ORIGINAL_CAPACITY_OFFSET#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).108), res: Def(Const, DefId(0:657 ~ bytes[a5c5]::bytes_mut::ORIGINAL_CAPACITY_OFFSET)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:62: 1021:86 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).99), kind: Cast(Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).100), kind: Field(Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:14: 1021:18 (#0), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).102), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:14: 1021:18 (#0) }, data#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:14: 1021:23 (#0) }, Ty { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).103), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:27: 1021:32 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).104), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:27: 1021:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:14: 1021:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).105), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:35: 1021:57 (#0), res: Def(Const, DefId(0:656 ~ bytes[a5c5]::bytes_mut::ORIGINAL_CAPACITY_MASK)), segments: [PathSegment { ident: ORIGINAL_CAPACITY_MASK#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).106), res: Def(Const, DefId(0:656 ~ bytes[a5c5]::bytes_mut::ORIGINAL_CAPACITY_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1021:35: 1021:57 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).113), kind: Cast(Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).114), kind: Field(Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1025:20: 1025:24 (#0), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).116), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1025:20: 1025:24 (#0) }, data#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1025:20: 1025:29 (#0) }, Ty { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1025:33: 1025:38 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).118), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1025:33: 1025:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1025:19: 1025:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).119), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1025:43: 1025:57 (#0), res: Def(Const, DefId(0:658 ~ bytes[a5c5]::bytes_mut::VEC_POS_OFFSET)), segments: [PathSegment { ident: VEC_POS_OFFSET#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).120), res: Def(Const, DefId(0:658 ~ bytes[a5c5]::bytes_mut::VEC_POS_OFFSET)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1025:43: 1025:57 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:837 ~ bytes[a5c5]::bytes_mut::rebuild_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:37950 ~ core[7d5a]::sync::atomic::{impl#78}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:385 ~ alloc[5873]::boxed::{impl#7}::into_raw)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).178), kind: Cast(Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).179), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1044:26: 1044:32 (#0), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).170)), segments: [PathSegment { ident: shared#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).180), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).170)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1044:26: 1044:32 (#0) }, Ty { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1044:36: 1044:41 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).182), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1044:36: 1044:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1044:26: 1044:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).183), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1044:44: 1044:53 (#0), res: Def(Const, DefId(0:653 ~ bytes[a5c5]::bytes_mut::KIND_MASK)), segments: [PathSegment { ident: KIND_MASK#0, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).184), res: Def(Const, DefId(0:653 ~ bytes[a5c5]::bytes_mut::KIND_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1044:44: 1044:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).196), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).197), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#207), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).188)), segments: [PathSegment { ident: left_val#207, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).198), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).188)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#207) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#207) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).199), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).200), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#207), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).189)), segments: [PathSegment { ident: right_val#207, hir_id: HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).201), res: Local(HirId(DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared).189)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#207) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#207) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:689 ~ bytes[a5c5]::bytes_mut::{impl#0}::shallow_clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:689 ~ bytes[a5c5]::bytes_mut::{impl#0}::shallow_clone).5), kind: MethodCall(PathSegment { ident: kind#0, hir_id: HirId(DefId(0:689 ~ bytes[a5c5]::bytes_mut::{impl#0}::shallow_clone).6), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:689 ~ bytes[a5c5]::bytes_mut::{impl#0}::shallow_clone).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1057:12: 1057:16 (#0), res: Local(HirId(DefId(0:689 ~ bytes[a5c5]::bytes_mut::{impl#0}::shallow_clone).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:689 ~ bytes[a5c5]::bytes_mut::{impl#0}::shallow_clone).8), res: Local(HirId(DefId(0:689 ~ bytes[a5c5]::bytes_mut::{impl#0}::shallow_clone).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1057:12: 1057:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1057:17: 1057:23 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1057:12: 1057:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:689 ~ bytes[a5c5]::bytes_mut::{impl#0}::shallow_clone).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1057:27: 1057:35 (#0), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:689 ~ bytes[a5c5]::bytes_mut::{impl#0}::shallow_clone).10), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1057:27: 1057:35 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:772 ~ bytes[a5c5]::bytes_mut::increment_shared)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2785 ~ core[7d5a]::ptr::read)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:688 ~ bytes[a5c5]::bytes_mut::{impl#0}::promote_to_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2785 ~ core[7d5a]::ptr::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).24), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#210), res: Local(HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).16)), segments: [PathSegment { ident: left_val#210, hir_id: HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).26), res: Local(HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#210) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#210) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).27), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#210), res: Local(HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).17)), segments: [PathSegment { ident: right_val#210, hir_id: HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).29), res: Local(HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#210) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#210) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).68), kind: Cast(Expr { hir_id: HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).69), kind: Field(Expr { hir_id: HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1070:9: 1070:13 (#0), res: Local(HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).71), res: Local(HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1070:9: 1070:13 (#0) }, data#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1070:9: 1070:18 (#0) }, Ty { hir_id: HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1070:22: 1070:27 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).73), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1070:22: 1070:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1070:9: 1070:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1070:31: 1070:45 (#0), res: Def(Const, DefId(0:658 ~ bytes[a5c5]::bytes_mut::VEC_POS_OFFSET)), segments: [PathSegment { ident: VEC_POS_OFFSET#0, hir_id: HirId(DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos).75), res: Def(Const, DefId(0:658 ~ bytes[a5c5]::bytes_mut::VEC_POS_OFFSET)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1070:31: 1070:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).26), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#213), res: Local(HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).18)), segments: [PathSegment { ident: left_val#213, hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).28), res: Local(HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#213) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#213) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).29), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#213), res: Local(HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).19)), segments: [PathSegment { ident: right_val#213, hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).31), res: Local(HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#213) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#213) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1076:23: 1076:26 (#0), res: Local(HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).4)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).76), res: Local(HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1076:23: 1076:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1076:30: 1076:41 (#0), res: Def(Const, DefId(0:659 ~ bytes[a5c5]::bytes_mut::MAX_VEC_POS)), segments: [PathSegment { ident: MAX_VEC_POS#0, hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).78), res: Def(Const, DefId(0:659 ~ bytes[a5c5]::bytes_mut::MAX_VEC_POS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1076:30: 1076:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:835 ~ bytes[a5c5]::bytes_mut::invalid_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).100), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:38: 1078:40 (#0) }, Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:34: 1078:37 (#0), res: Local(HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).4)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).102), res: Local(HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:34: 1078:37 (#0) }, Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).103), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:41: 1078:55 (#0), res: Def(Const, DefId(0:658 ~ bytes[a5c5]::bytes_mut::VEC_POS_OFFSET)), segments: [PathSegment { ident: VEC_POS_OFFSET#0, hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).104), res: Def(Const, DefId(0:658 ~ bytes[a5c5]::bytes_mut::VEC_POS_OFFSET)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:41: 1078:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:33: 1078:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).105), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:79: 1078:80 (#0) }, Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).106), kind: Cast(Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).107), kind: Field(Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:60: 1078:64 (#0), res: Local(HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).109), res: Local(HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:60: 1078:64 (#0) }, data#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:60: 1078:69 (#0) }, Ty { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:73: 1078:78 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).111), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:73: 1078:78 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:60: 1078:78 (#0) }, Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).112), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:81: 1078:97 (#0), res: Def(Const, DefId(0:660 ~ bytes[a5c5]::bytes_mut::NOT_VEC_POS_MASK)), segments: [PathSegment { ident: NOT_VEC_POS_MASK#0, hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).113), res: Def(Const, DefId(0:660 ~ bytes[a5c5]::bytes_mut::NOT_VEC_POS_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:81: 1078:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:59: 1078:98 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:34: 1078:37 (#0), res: Local(HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).4)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).102), res: Local(HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:34: 1078:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).103), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:41: 1078:55 (#0), res: Def(Const, DefId(0:658 ~ bytes[a5c5]::bytes_mut::VEC_POS_OFFSET)), segments: [PathSegment { ident: VEC_POS_OFFSET#0, hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).104), res: Def(Const, DefId(0:658 ~ bytes[a5c5]::bytes_mut::VEC_POS_OFFSET)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:41: 1078:55 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).106), kind: Cast(Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).107), kind: Field(Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:60: 1078:64 (#0), res: Local(HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).109), res: Local(HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:60: 1078:64 (#0) }, data#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:60: 1078:69 (#0) }, Ty { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:73: 1078:78 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).111), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:73: 1078:78 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:60: 1078:78 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).112), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:81: 1078:97 (#0), res: Def(Const, DefId(0:660 ~ bytes[a5c5]::bytes_mut::NOT_VEC_POS_MASK)), segments: [PathSegment { ident: NOT_VEC_POS_MASK#0, hir_id: HirId(DefId(0:691 ~ bytes[a5c5]::bytes_mut::{impl#0}::set_vec_pos).113), res: Def(Const, DefId(0:660 ~ bytes[a5c5]::bytes_mut::NOT_VEC_POS_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1078:81: 1078:97 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2689 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut).19), kind: Field(Expr { hir_id: HirId(DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1114:23: 1114:27 (#0), res: Local(HirId(DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut).21), res: Local(HirId(DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1114:23: 1114:27 (#0) }, cap#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1114:23: 1114:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut).22), kind: Field(Expr { hir_id: HirId(DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1114:34: 1114:38 (#0), res: Local(HirId(DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut).24), res: Local(HirId(DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1114:34: 1114:38 (#0) }, len#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1114:34: 1114:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13131 ~ core[7d5a]::slice::raw::from_raw_parts_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:694 ~ bytes[a5c5]::bytes_mut::{impl#1}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:694 ~ bytes[a5c5]::bytes_mut::{impl#1}::drop).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1125:12: 1125:16 (#0), res: Local(HirId(DefId(0:694 ~ bytes[a5c5]::bytes_mut::{impl#1}::drop).9)), segments: [PathSegment { ident: kind#0, hir_id: HirId(DefId(0:694 ~ bytes[a5c5]::bytes_mut::{impl#1}::drop).13), res: Local(HirId(DefId(0:694 ~ bytes[a5c5]::bytes_mut::{impl#1}::drop).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1125:12: 1125:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:694 ~ bytes[a5c5]::bytes_mut::{impl#1}::drop).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1125:20: 1125:28 (#0), res: Def(Const, DefId(0:652 ~ bytes[a5c5]::bytes_mut::KIND_VEC)), segments: [PathSegment { ident: KIND_VEC#0, hir_id: HirId(DefId(0:694 ~ bytes[a5c5]::bytes_mut::{impl#1}::drop).15), res: Def(Const, DefId(0:652 ~ bytes[a5c5]::bytes_mut::KIND_VEC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1125:20: 1125:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:837 ~ bytes[a5c5]::bytes_mut::rebuild_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:694 ~ bytes[a5c5]::bytes_mut::{impl#1}::drop).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1132:19: 1132:23 (#0), res: Local(HirId(DefId(0:694 ~ bytes[a5c5]::bytes_mut::{impl#1}::drop).9)), segments: [PathSegment { ident: kind#0, hir_id: HirId(DefId(0:694 ~ bytes[a5c5]::bytes_mut::{impl#1}::drop).50), res: Local(HirId(DefId(0:694 ~ bytes[a5c5]::bytes_mut::{impl#1}::drop).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1132:19: 1132:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:694 ~ bytes[a5c5]::bytes_mut::{impl#1}::drop).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1132:27: 1132:35 (#0), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), segments: [PathSegment { ident: KIND_ARC#0, hir_id: HirId(DefId(0:694 ~ bytes[a5c5]::bytes_mut::{impl#1}::drop).52), res: Def(Const, DefId(0:651 ~ bytes[a5c5]::bytes_mut::KIND_ARC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1132:27: 1132:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:696 ~ bytes[a5c5]::bytes_mut::{impl#2}::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:697 ~ bytes[a5c5]::bytes_mut::{impl#2}::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:683 ~ bytes[a5c5]::bytes_mut::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:698 ~ bytes[a5c5]::bytes_mut::{impl#2}::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:698 ~ bytes[a5c5]::bytes_mut::{impl#2}::advance).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1152:13: 1152:16 (#0), res: Local(HirId(DefId(0:698 ~ bytes[a5c5]::bytes_mut::{impl#2}::advance).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:698 ~ bytes[a5c5]::bytes_mut::{impl#2}::advance).9), res: Local(HirId(DefId(0:698 ~ bytes[a5c5]::bytes_mut::{impl#2}::advance).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1152:13: 1152:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:698 ~ bytes[a5c5]::bytes_mut::{impl#2}::advance).10), kind: MethodCall(PathSegment { ident: remaining#0, hir_id: HirId(DefId(0:698 ~ bytes[a5c5]::bytes_mut::{impl#2}::advance).11), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:698 ~ bytes[a5c5]::bytes_mut::{impl#2}::advance).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1152:20: 1152:24 (#0), res: Local(HirId(DefId(0:698 ~ bytes[a5c5]::bytes_mut::{impl#2}::advance).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:698 ~ bytes[a5c5]::bytes_mut::{impl#2}::advance).13), res: Local(HirId(DefId(0:698 ~ bytes[a5c5]::bytes_mut::{impl#2}::advance).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1152:20: 1152:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1152:25: 1152:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1152:20: 1152:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ bytes[a5c5]::buf::buf_impl::Buf::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ bytes[a5c5]::buf::buf_impl::Buf::remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:685 ~ bytes[a5c5]::bytes_mut::{impl#0}::advance_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:699 ~ bytes[a5c5]::bytes_mut::{impl#2}::copy_to_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:672 ~ bytes[a5c5]::bytes_mut::{impl#0}::split_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:701 ~ bytes[a5c5]::bytes_mut::{impl#3}::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:701 ~ bytes[a5c5]::bytes_mut::{impl#3}::remaining_mut).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1172:9: 1172:19 (#0), res: Def(Const, DefId(1:17552 ~ core[7d5a]::usize::MAX)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:701 ~ bytes[a5c5]::bytes_mut::{impl#3}::remaining_mut).5), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:701 ~ bytes[a5c5]::bytes_mut::{impl#3}::remaining_mut).6), res: Def(Const, DefId(1:17552 ~ core[7d5a]::usize::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1172:9: 1172:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:701 ~ bytes[a5c5]::bytes_mut::{impl#3}::remaining_mut).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:701 ~ bytes[a5c5]::bytes_mut::{impl#3}::remaining_mut).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:701 ~ bytes[a5c5]::bytes_mut::{impl#3}::remaining_mut).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1172:22: 1172:26 (#0), res: Local(HirId(DefId(0:701 ~ bytes[a5c5]::bytes_mut::{impl#3}::remaining_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:701 ~ bytes[a5c5]::bytes_mut::{impl#3}::remaining_mut).10), res: Local(HirId(DefId(0:701 ~ bytes[a5c5]::bytes_mut::{impl#3}::remaining_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1172:22: 1172:26 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1172:27: 1172:32 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1172:22: 1172:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).7), kind: Field(Expr { hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1177:25: 1177:29 (#0), res: Local(HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).9), res: Local(HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1177:25: 1177:29 (#0) }, cap#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1177:25: 1177:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).10), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).11), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1177:36: 1177:40 (#0), res: Local(HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).13), res: Local(HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1177:36: 1177:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1177:41: 1177:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1177:36: 1177:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1178:12: 1178:15 (#0), res: Local(HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).19), res: Local(HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1178:12: 1178:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1178:18: 1178:27 (#0), res: Local(HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).15)), segments: [PathSegment { ident: remaining#0, hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).21), res: Local(HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1178:18: 1178:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:907 ~ bytes[a5c5]::panic_advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).40), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).41), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1182:20: 1182:24 (#0), res: Local(HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).43), res: Local(HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1182:20: 1182:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1182:25: 1182:30 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1182:20: 1182:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1182:33: 1182:36 (#0), res: Local(HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).4)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).45), res: Local(HirId(DefId(0:702 ~ bytes[a5c5]::bytes_mut::{impl#3}::advance_mut).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1182:33: 1182:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:703 ~ bytes[a5c5]::bytes_mut::{impl#3}::chunk_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:703 ~ bytes[a5c5]::bytes_mut::{impl#3}::chunk_mut).5), kind: MethodCall(PathSegment { ident: capacity#0, hir_id: HirId(DefId(0:703 ~ bytes[a5c5]::bytes_mut::{impl#3}::chunk_mut).6), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:703 ~ bytes[a5c5]::bytes_mut::{impl#3}::chunk_mut).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1187:12: 1187:16 (#0), res: Local(HirId(DefId(0:703 ~ bytes[a5c5]::bytes_mut::{impl#3}::chunk_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:703 ~ bytes[a5c5]::bytes_mut::{impl#3}::chunk_mut).8), res: Local(HirId(DefId(0:703 ~ bytes[a5c5]::bytes_mut::{impl#3}::chunk_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1187:12: 1187:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1187:17: 1187:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1187:12: 1187:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:703 ~ bytes[a5c5]::bytes_mut::{impl#3}::chunk_mut).9), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:703 ~ bytes[a5c5]::bytes_mut::{impl#3}::chunk_mut).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:703 ~ bytes[a5c5]::bytes_mut::{impl#3}::chunk_mut).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1187:31: 1187:35 (#0), res: Local(HirId(DefId(0:703 ~ bytes[a5c5]::bytes_mut::{impl#3}::chunk_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:703 ~ bytes[a5c5]::bytes_mut::{impl#3}::chunk_mut).12), res: Local(HirId(DefId(0:703 ~ bytes[a5c5]::bytes_mut::{impl#3}::chunk_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1187:31: 1187:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1187:36: 1187:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1187:31: 1187:41 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:667 ~ bytes[a5c5]::bytes_mut::{impl#0}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bytes[a5c5]::bytes_mut::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:704 ~ bytes[a5c5]::bytes_mut::{impl#3}::put)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:30 ~ bytes[a5c5]::buf::buf_impl::Buf::has_remaining)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:26 ~ bytes[a5c5]::buf::buf_impl::Buf::chunk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:29 ~ bytes[a5c5]::buf::buf_impl::Buf::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:706 ~ bytes[a5c5]::bytes_mut::{impl#3}::put_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:707 ~ bytes[a5c5]::bytes_mut::{impl#3}::put_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:692 ~ bytes[a5c5]::bytes_mut::{impl#0}::spare_capacity_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:707 ~ bytes[a5c5]::bytes_mut::{impl#3}::put_bytes).28), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:707 ~ bytes[a5c5]::bytes_mut::{impl#3}::put_bytes).29), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:707 ~ bytes[a5c5]::bytes_mut::{impl#3}::put_bytes).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1217:27: 1217:30 (#0), res: Local(HirId(DefId(0:707 ~ bytes[a5c5]::bytes_mut::{impl#3}::put_bytes).21)), segments: [PathSegment { ident: dst#0, hir_id: HirId(DefId(0:707 ~ bytes[a5c5]::bytes_mut::{impl#3}::put_bytes).31), res: Local(HirId(DefId(0:707 ~ bytes[a5c5]::bytes_mut::{impl#3}::put_bytes).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1217:27: 1217:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1217:31: 1217:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1217:27: 1217:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:707 ~ bytes[a5c5]::bytes_mut::{impl#3}::put_bytes).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1217:40: 1217:43 (#0), res: Local(HirId(DefId(0:707 ~ bytes[a5c5]::bytes_mut::{impl#3}::put_bytes).6)), segments: [PathSegment { ident: cnt#0, hir_id: HirId(DefId(0:707 ~ bytes[a5c5]::bytes_mut::{impl#3}::put_bytes).33), res: Local(HirId(DefId(0:707 ~ bytes[a5c5]::bytes_mut::{impl#3}::put_bytes).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1217:40: 1217:43 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1990 ~ core[7d5a]::intrinsics::write_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ bytes[a5c5]::buf::buf_mut::BufMut::advance_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:709 ~ bytes[a5c5]::bytes_mut::{impl#4}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:683 ~ bytes[a5c5]::bytes_mut::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:712 ~ bytes[a5c5]::bytes_mut::{impl#5}::deref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:714 ~ bytes[a5c5]::bytes_mut::{impl#6}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:684 ~ bytes[a5c5]::bytes_mut::{impl#0}::as_slice_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:716 ~ bytes[a5c5]::bytes_mut::{impl#7}::deref_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:719 ~ bytes[a5c5]::bytes_mut::{impl#8}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:5735 ~ alloc[5873]::slice::{impl#0}::to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:722 ~ bytes[a5c5]::bytes_mut::{impl#9}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:724 ~ bytes[a5c5]::bytes_mut::{impl#10}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:668 ~ bytes[a5c5]::bytes_mut::{impl#0}::freeze)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:726 ~ bytes[a5c5]::bytes_mut::{impl#11}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:726 ~ bytes[a5c5]::bytes_mut::{impl#11}::eq).6), kind: MethodCall(PathSegment { ident: as_slice#0, hir_id: HirId(DefId(0:726 ~ bytes[a5c5]::bytes_mut::{impl#11}::eq).7), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:726 ~ bytes[a5c5]::bytes_mut::{impl#11}::eq).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1276:9: 1276:13 (#0), res: Local(HirId(DefId(0:726 ~ bytes[a5c5]::bytes_mut::{impl#11}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:726 ~ bytes[a5c5]::bytes_mut::{impl#11}::eq).9), res: Local(HirId(DefId(0:726 ~ bytes[a5c5]::bytes_mut::{impl#11}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1276:9: 1276:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1276:14: 1276:24 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1276:9: 1276:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:726 ~ bytes[a5c5]::bytes_mut::{impl#11}::eq).10), kind: MethodCall(PathSegment { ident: as_slice#0, hir_id: HirId(DefId(0:726 ~ bytes[a5c5]::bytes_mut::{impl#11}::eq).11), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:726 ~ bytes[a5c5]::bytes_mut::{impl#11}::eq).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1276:28: 1276:33 (#0), res: Local(HirId(DefId(0:726 ~ bytes[a5c5]::bytes_mut::{impl#11}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:726 ~ bytes[a5c5]::bytes_mut::{impl#11}::eq).13), res: Local(HirId(DefId(0:726 ~ bytes[a5c5]::bytes_mut::{impl#11}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1276:28: 1276:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1276:34: 1276:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1276:28: 1276:44 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:683 ~ bytes[a5c5]::bytes_mut::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:683 ~ bytes[a5c5]::bytes_mut::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:728 ~ bytes[a5c5]::bytes_mut::{impl#12}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:683 ~ bytes[a5c5]::bytes_mut::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:683 ~ bytes[a5c5]::bytes_mut::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:730 ~ bytes[a5c5]::bytes_mut::{impl#13}::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:683 ~ bytes[a5c5]::bytes_mut::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:683 ~ bytes[a5c5]::bytes_mut::{impl#0}::as_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:733 ~ bytes[a5c5]::bytes_mut::{impl#15}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:664 ~ bytes[a5c5]::bytes_mut::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:735 ~ bytes[a5c5]::bytes_mut::{impl#16}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:738 ~ bytes[a5c5]::bytes_mut::{impl#17}::borrow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:740 ~ bytes[a5c5]::bytes_mut::{impl#18}::borrow_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:742 ~ bytes[a5c5]::bytes_mut::{impl#19}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:742 ~ bytes[a5c5]::bytes_mut::{impl#19}::write_str).7), kind: MethodCall(PathSegment { ident: remaining_mut#0, hir_id: HirId(DefId(0:742 ~ bytes[a5c5]::bytes_mut::{impl#19}::write_str).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:742 ~ bytes[a5c5]::bytes_mut::{impl#19}::write_str).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1326:12: 1326:16 (#0), res: Local(HirId(DefId(0:742 ~ bytes[a5c5]::bytes_mut::{impl#19}::write_str).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:742 ~ bytes[a5c5]::bytes_mut::{impl#19}::write_str).10), res: Local(HirId(DefId(0:742 ~ bytes[a5c5]::bytes_mut::{impl#19}::write_str).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1326:12: 1326:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1326:17: 1326:32 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1326:12: 1326:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:742 ~ bytes[a5c5]::bytes_mut::{impl#19}::write_str).11), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:742 ~ bytes[a5c5]::bytes_mut::{impl#19}::write_str).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:742 ~ bytes[a5c5]::bytes_mut::{impl#19}::write_str).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1326:36: 1326:37 (#0), res: Local(HirId(DefId(0:742 ~ bytes[a5c5]::bytes_mut::{impl#19}::write_str).4)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:742 ~ bytes[a5c5]::bytes_mut::{impl#19}::write_str).14), res: Local(HirId(DefId(0:742 ~ bytes[a5c5]::bytes_mut::{impl#19}::write_str).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1326:36: 1326:37 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1326:38: 1326:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1326:36: 1326:43 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:112 ~ bytes[a5c5]::buf::buf_mut::BufMut::remaining_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:743 ~ bytes[a5c5]::bytes_mut::{impl#19}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11157 ~ core[7d5a]::fmt::write)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:745 ~ bytes[a5c5]::bytes_mut::{impl#20}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:749 ~ bytes[a5c5]::bytes_mut::{impl#21}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:231 ~ bytes[a5c5]::buf::iter::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:754 ~ bytes[a5c5]::bytes_mut::{impl#22}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:756 ~ bytes[a5c5]::bytes_mut::{impl#23}::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:677 ~ bytes[a5c5]::bytes_mut::{impl#0}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ bytes[a5c5]::buf::buf_mut::BufMut::put_u8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:760 ~ bytes[a5c5]::bytes_mut::{impl#24}::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:9109 ~ core[7d5a]::iter::traits::iterator::Iterator::copied)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:763 ~ bytes[a5c5]::bytes_mut::{impl#25}::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:680 ~ bytes[a5c5]::bytes_mut::{impl#0}::extend_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:766 ~ bytes[a5c5]::bytes_mut::{impl#26}::from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8697 ~ core[7d5a]::iter::traits::collect::FromIterator::from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:770 ~ bytes[a5c5]::bytes_mut::{impl#27}::from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8697 ~ core[7d5a]::iter::traits::collect::FromIterator::from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9109 ~ core[7d5a]::iter::traits::iterator::Iterator::copied)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:772 ~ bytes[a5c5]::bytes_mut::increment_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:37966 ~ core[7d5a]::sync::atomic::{impl#78}::fetch_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:772 ~ bytes[a5c5]::bytes_mut::increment_shared).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1423:8: 1423:16 (#0), res: Local(HirId(DefId(0:772 ~ bytes[a5c5]::bytes_mut::increment_shared).15)), segments: [PathSegment { ident: old_size#0, hir_id: HirId(DefId(0:772 ~ bytes[a5c5]::bytes_mut::increment_shared).19), res: Local(HirId(DefId(0:772 ~ bytes[a5c5]::bytes_mut::increment_shared).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1423:8: 1423:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:772 ~ bytes[a5c5]::bytes_mut::increment_shared).20), kind: Cast(Expr { hir_id: HirId(DefId(0:772 ~ bytes[a5c5]::bytes_mut::increment_shared).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1423:19: 1423:29 (#0), res: Def(Const, DefId(1:17540 ~ core[7d5a]::isize::MAX)), segments: [PathSegment { ident: isize#0, hir_id: HirId(DefId(0:772 ~ bytes[a5c5]::bytes_mut::increment_shared).22), res: Def(Mod, DefId(1:72 ~ core[7d5a]::isize)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:772 ~ bytes[a5c5]::bytes_mut::increment_shared).23), res: Def(Const, DefId(1:17540 ~ core[7d5a]::isize::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1423:19: 1423:29 (#0) }, Ty { hir_id: HirId(DefId(0:772 ~ bytes[a5c5]::bytes_mut::increment_shared).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1423:33: 1423:38 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:772 ~ bytes[a5c5]::bytes_mut::increment_shared).25), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1423:33: 1423:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1423:19: 1423:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:902 ~ bytes[a5c5]::abort)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared).5), kind: MethodCall(PathSegment { ident: fetch_sub#0, hir_id: HirId(DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared).6), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared).7), kind: Field(Expr { hir_id: HirId(DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared).8), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1430:10: 1430:13 (#0), res: Local(HirId(DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared).2)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared).10), res: Local(HirId(DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1430:10: 1430:13 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1430:8: 1430:14 (#0) }, ref_count#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1430:8: 1430:24 (#0) }, [Expr { hir_id: HirId(DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared).11), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1430:35: 1430:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1430:35: 1430:36 (#0) }, Expr { hir_id: HirId(DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1430:38: 1430:55 (#0), res: Def(Ctor(Variant, Const), DefId(1:37511 ~ core[7d5a]::sync::atomic::Ordering::Release::{constructor#0})), segments: [PathSegment { ident: Ordering#0, hir_id: HirId(DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared).13), res: Def(Enum, DefId(1:37507 ~ core[7d5a]::sync::atomic::Ordering)), args: None, infer_args: true }, PathSegment { ident: Release#0, hir_id: HirId(DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared).14), res: Def(Ctor(Variant, Const), DefId(1:37511 ~ core[7d5a]::sync::atomic::Ordering::Release::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1430:38: 1430:55 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1430:25: 1430:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1430:8: 1430:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared).15), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1430:60: 1430:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1430:60: 1430:61 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:37967 ~ core[7d5a]::sync::atomic::{impl#78}::fetch_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:37960 ~ core[7d5a]::sync::atomic::{impl#78}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:380 ~ alloc[5873]::boxed::{impl#6}::from_raw)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique).4), kind: MethodCall(PathSegment { ident: load#0, hir_id: HirId(DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique).5), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique).6), kind: Field(Expr { hir_id: HirId(DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1472:9: 1472:13 (#0), res: Local(HirId(DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique).8), res: Local(HirId(DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1472:9: 1472:13 (#0) }, ref_count#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1472:9: 1472:23 (#0) }, [Expr { hir_id: HirId(DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1472:29: 1472:46 (#0), res: Def(Ctor(Variant, Const), DefId(1:37513 ~ core[7d5a]::sync::atomic::Ordering::Acquire::{constructor#0})), segments: [PathSegment { ident: Ordering#0, hir_id: HirId(DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique).10), res: Def(Enum, DefId(1:37507 ~ core[7d5a]::sync::atomic::Ordering)), args: None, infer_args: true }, PathSegment { ident: Acquire#0, hir_id: HirId(DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique).11), res: Def(Ctor(Variant, Const), DefId(1:37513 ~ core[7d5a]::sync::atomic::Ordering::Acquire::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1472:29: 1472:46 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1472:24: 1472:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1472:9: 1472:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1472:51: 1472:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1472:51: 1472:52 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:37960 ~ core[7d5a]::sync::atomic::{impl#78}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:17: 1478:26 (#0), res: Def(Const, DefId(0:661 ~ bytes[a5c5]::bytes_mut::PTR_WIDTH)), segments: [PathSegment { ident: PTR_WIDTH#0, hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).6), res: Def(Const, DefId(0:661 ~ bytes[a5c5]::bytes_mut::PTR_WIDTH)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:17: 1478:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).7), kind: Cast(Expr { hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).8), kind: MethodCall(PathSegment { ident: leading_zeros#0, hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).10), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:35: 1478:37 (#0) }, Expr { hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:31: 1478:34 (#0), res: Local(HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).2)), segments: [PathSegment { ident: cap#0, hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).12), res: Local(HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:31: 1478:34 (#0) }, Expr { hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:38: 1478:65 (#0), res: Def(Const, DefId(0:655 ~ bytes[a5c5]::bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH)), segments: [PathSegment { ident: MIN_ORIGINAL_CAPACITY_WIDTH#0, hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).14), res: Def(Const, DefId(0:655 ~ bytes[a5c5]::bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:38: 1478:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:30: 1478:66 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:67: 1478:82 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:30: 1478:82 (#0) }, Ty { hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:86: 1478:91 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).16), res: Def(Mod, DefId(1:78 ~ core[7d5a]::usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:86: 1478:91 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:29: 1478:92 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:25377 ~ core[7d5a]::num::{impl#11}::leading_zeros)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:31: 1478:34 (#0), res: Local(HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).2)), segments: [PathSegment { ident: cap#0, hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).12), res: Local(HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:31: 1478:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:38: 1478:65 (#0), res: Def(Const, DefId(0:655 ~ bytes[a5c5]::bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH)), segments: [PathSegment { ident: MIN_ORIGINAL_CAPACITY_WIDTH#0, hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).14), res: Def(Const, DefId(0:655 ~ bytes[a5c5]::bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1478:38: 1478:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1481:9: 1481:36 (#0), res: Def(Const, DefId(0:654 ~ bytes[a5c5]::bytes_mut::MAX_ORIGINAL_CAPACITY_WIDTH)), segments: [PathSegment { ident: MAX_ORIGINAL_CAPACITY_WIDTH#0, hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).27), res: Def(Const, DefId(0:654 ~ bytes[a5c5]::bytes_mut::MAX_ORIGINAL_CAPACITY_WIDTH)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1481:9: 1481:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1481:39: 1481:66 (#0), res: Def(Const, DefId(0:655 ~ bytes[a5c5]::bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH)), segments: [PathSegment { ident: MIN_ORIGINAL_CAPACITY_WIDTH#0, hir_id: HirId(DefId(0:776 ~ bytes[a5c5]::bytes_mut::original_capacity_to_repr).29), res: Def(Const, DefId(0:655 ~ bytes[a5c5]::bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1481:39: 1481:66 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1486:8: 1486:12 (#0), res: Local(HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).2)), segments: [PathSegment { ident: repr#0, hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).6), res: Local(HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1486:8: 1486:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).7), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1486:16: 1486:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1486:16: 1486:17 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:5: 1490:6 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:5: 1490:6 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:16: 1490:17 (#0) }, Expr { hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:11: 1490:15 (#0), res: Local(HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).2)), segments: [PathSegment { ident: repr#0, hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).19), res: Local(HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:11: 1490:15 (#0) }, Expr { hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).20), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:47: 1490:48 (#0) }, Expr { hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:19: 1490:46 (#0), res: Def(Const, DefId(0:655 ~ bytes[a5c5]::bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH)), segments: [PathSegment { ident: MIN_ORIGINAL_CAPACITY_WIDTH#0, hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).22), res: Def(Const, DefId(0:655 ~ bytes[a5c5]::bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:19: 1490:46 (#0) }, Expr { hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).23), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:49: 1490:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:49: 1490:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:18: 1490:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:10: 1490:52 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:11: 1490:15 (#0), res: Local(HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).2)), segments: [PathSegment { ident: repr#0, hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).19), res: Local(HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:11: 1490:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).20), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:47: 1490:48 (#0) }, Expr { hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:19: 1490:46 (#0), res: Def(Const, DefId(0:655 ~ bytes[a5c5]::bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH)), segments: [PathSegment { ident: MIN_ORIGINAL_CAPACITY_WIDTH#0, hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).22), res: Def(Const, DefId(0:655 ~ bytes[a5c5]::bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:19: 1490:46 (#0) }, Expr { hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).23), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:49: 1490:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:49: 1490:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:18: 1490:51 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:19: 1490:46 (#0), res: Def(Const, DefId(0:655 ~ bytes[a5c5]::bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH)), segments: [PathSegment { ident: MIN_ORIGINAL_CAPACITY_WIDTH#0, hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).22), res: Def(Const, DefId(0:655 ~ bytes[a5c5]::bytes_mut::MIN_ORIGINAL_CAPACITY_WIDTH)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:19: 1490:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:777 ~ bytes[a5c5]::bytes_mut::original_capacity_from_repr).23), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:49: 1490:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1490:49: 1490:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:781 ~ bytes[a5c5]::bytes_mut::{impl#31}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:781 ~ bytes[a5c5]::bytes_mut::{impl#31}::eq).6), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:781 ~ bytes[a5c5]::bytes_mut::{impl#31}::eq).7), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:781 ~ bytes[a5c5]::bytes_mut::{impl#31}::eq).8), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:781 ~ bytes[a5c5]::bytes_mut::{impl#31}::eq).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1558:12: 1558:16 (#0), res: Local(HirId(DefId(0:781 ~ bytes[a5c5]::bytes_mut::{impl#31}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:781 ~ bytes[a5c5]::bytes_mut::{impl#31}::eq).10), res: Local(HirId(DefId(0:781 ~ bytes[a5c5]::bytes_mut::{impl#31}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1558:12: 1558:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1558:11: 1558:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1558:10: 1558:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1558:9: 1558:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:781 ~ bytes[a5c5]::bytes_mut::{impl#31}::eq).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1558:20: 1558:25 (#0), res: Local(HirId(DefId(0:781 ~ bytes[a5c5]::bytes_mut::{impl#31}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:781 ~ bytes[a5c5]::bytes_mut::{impl#31}::eq).12), res: Local(HirId(DefId(0:781 ~ bytes[a5c5]::bytes_mut::{impl#31}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1558:20: 1558:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:783 ~ bytes[a5c5]::bytes_mut::{impl#32}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:785 ~ bytes[a5c5]::bytes_mut::{impl#33}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:785 ~ bytes[a5c5]::bytes_mut::{impl#33}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:785 ~ bytes[a5c5]::bytes_mut::{impl#33}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1570:10: 1570:15 (#0), res: Local(HirId(DefId(0:785 ~ bytes[a5c5]::bytes_mut::{impl#33}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:785 ~ bytes[a5c5]::bytes_mut::{impl#33}::eq).8), res: Local(HirId(DefId(0:785 ~ bytes[a5c5]::bytes_mut::{impl#33}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1570:10: 1570:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1570:9: 1570:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:785 ~ bytes[a5c5]::bytes_mut::{impl#33}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:785 ~ bytes[a5c5]::bytes_mut::{impl#33}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1570:20: 1570:24 (#0), res: Local(HirId(DefId(0:785 ~ bytes[a5c5]::bytes_mut::{impl#33}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:785 ~ bytes[a5c5]::bytes_mut::{impl#33}::eq).11), res: Local(HirId(DefId(0:785 ~ bytes[a5c5]::bytes_mut::{impl#33}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1570:20: 1570:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1570:19: 1570:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:787 ~ bytes[a5c5]::bytes_mut::{impl#34}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:789 ~ bytes[a5c5]::bytes_mut::{impl#35}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bytes[a5c5]::bytes_mut::{impl#35}::eq).6), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:789 ~ bytes[a5c5]::bytes_mut::{impl#35}::eq).7), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:789 ~ bytes[a5c5]::bytes_mut::{impl#35}::eq).8), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:789 ~ bytes[a5c5]::bytes_mut::{impl#35}::eq).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1582:12: 1582:16 (#0), res: Local(HirId(DefId(0:789 ~ bytes[a5c5]::bytes_mut::{impl#35}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:789 ~ bytes[a5c5]::bytes_mut::{impl#35}::eq).10), res: Local(HirId(DefId(0:789 ~ bytes[a5c5]::bytes_mut::{impl#35}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1582:12: 1582:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1582:11: 1582:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1582:10: 1582:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1582:9: 1582:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bytes[a5c5]::bytes_mut::{impl#35}::eq).11), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:789 ~ bytes[a5c5]::bytes_mut::{impl#35}::eq).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:789 ~ bytes[a5c5]::bytes_mut::{impl#35}::eq).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1582:20: 1582:25 (#0), res: Local(HirId(DefId(0:789 ~ bytes[a5c5]::bytes_mut::{impl#35}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:789 ~ bytes[a5c5]::bytes_mut::{impl#35}::eq).14), res: Local(HirId(DefId(0:789 ~ bytes[a5c5]::bytes_mut::{impl#35}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1582:20: 1582:25 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1582:26: 1582:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1582:20: 1582:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:791 ~ bytes[a5c5]::bytes_mut::{impl#36}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:793 ~ bytes[a5c5]::bytes_mut::{impl#37}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:793 ~ bytes[a5c5]::bytes_mut::{impl#37}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:793 ~ bytes[a5c5]::bytes_mut::{impl#37}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1594:10: 1594:15 (#0), res: Local(HirId(DefId(0:793 ~ bytes[a5c5]::bytes_mut::{impl#37}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:793 ~ bytes[a5c5]::bytes_mut::{impl#37}::eq).8), res: Local(HirId(DefId(0:793 ~ bytes[a5c5]::bytes_mut::{impl#37}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1594:10: 1594:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1594:9: 1594:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:793 ~ bytes[a5c5]::bytes_mut::{impl#37}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:793 ~ bytes[a5c5]::bytes_mut::{impl#37}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1594:20: 1594:24 (#0), res: Local(HirId(DefId(0:793 ~ bytes[a5c5]::bytes_mut::{impl#37}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:793 ~ bytes[a5c5]::bytes_mut::{impl#37}::eq).11), res: Local(HirId(DefId(0:793 ~ bytes[a5c5]::bytes_mut::{impl#37}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1594:20: 1594:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1594:19: 1594:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:795 ~ bytes[a5c5]::bytes_mut::{impl#38}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:797 ~ bytes[a5c5]::bytes_mut::{impl#39}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:797 ~ bytes[a5c5]::bytes_mut::{impl#39}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:797 ~ bytes[a5c5]::bytes_mut::{impl#39}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1606:10: 1606:14 (#0), res: Local(HirId(DefId(0:797 ~ bytes[a5c5]::bytes_mut::{impl#39}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:797 ~ bytes[a5c5]::bytes_mut::{impl#39}::eq).8), res: Local(HirId(DefId(0:797 ~ bytes[a5c5]::bytes_mut::{impl#39}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1606:10: 1606:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1606:9: 1606:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:797 ~ bytes[a5c5]::bytes_mut::{impl#39}::eq).9), kind: Index(Expr { hir_id: HirId(DefId(0:797 ~ bytes[a5c5]::bytes_mut::{impl#39}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1606:18: 1606:23 (#0), res: Local(HirId(DefId(0:797 ~ bytes[a5c5]::bytes_mut::{impl#39}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:797 ~ bytes[a5c5]::bytes_mut::{impl#39}::eq).11), res: Local(HirId(DefId(0:797 ~ bytes[a5c5]::bytes_mut::{impl#39}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1606:18: 1606:23 (#0) }, Expr { hir_id: HirId(DefId(0:797 ~ bytes[a5c5]::bytes_mut::{impl#39}::eq).12), kind: Struct(LangItem(RangeFull, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1606:24: 1606:26 (#0)), [], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1606:24: 1606:26 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1606:23: 1606:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1606:18: 1606:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:799 ~ bytes[a5c5]::bytes_mut::{impl#40}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:801 ~ bytes[a5c5]::bytes_mut::{impl#41}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:801 ~ bytes[a5c5]::bytes_mut::{impl#41}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:801 ~ bytes[a5c5]::bytes_mut::{impl#41}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1618:10: 1618:15 (#0), res: Local(HirId(DefId(0:801 ~ bytes[a5c5]::bytes_mut::{impl#41}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:801 ~ bytes[a5c5]::bytes_mut::{impl#41}::eq).8), res: Local(HirId(DefId(0:801 ~ bytes[a5c5]::bytes_mut::{impl#41}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1618:10: 1618:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1618:9: 1618:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:801 ~ bytes[a5c5]::bytes_mut::{impl#41}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:801 ~ bytes[a5c5]::bytes_mut::{impl#41}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1618:20: 1618:24 (#0), res: Local(HirId(DefId(0:801 ~ bytes[a5c5]::bytes_mut::{impl#41}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:801 ~ bytes[a5c5]::bytes_mut::{impl#41}::eq).11), res: Local(HirId(DefId(0:801 ~ bytes[a5c5]::bytes_mut::{impl#41}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1618:20: 1618:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1618:19: 1618:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:803 ~ bytes[a5c5]::bytes_mut::{impl#42}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:805 ~ bytes[a5c5]::bytes_mut::{impl#43}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:805 ~ bytes[a5c5]::bytes_mut::{impl#43}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:805 ~ bytes[a5c5]::bytes_mut::{impl#43}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1630:10: 1630:14 (#0), res: Local(HirId(DefId(0:805 ~ bytes[a5c5]::bytes_mut::{impl#43}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:805 ~ bytes[a5c5]::bytes_mut::{impl#43}::eq).8), res: Local(HirId(DefId(0:805 ~ bytes[a5c5]::bytes_mut::{impl#43}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1630:10: 1630:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1630:9: 1630:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:805 ~ bytes[a5c5]::bytes_mut::{impl#43}::eq).9), kind: Index(Expr { hir_id: HirId(DefId(0:805 ~ bytes[a5c5]::bytes_mut::{impl#43}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1630:18: 1630:23 (#0), res: Local(HirId(DefId(0:805 ~ bytes[a5c5]::bytes_mut::{impl#43}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:805 ~ bytes[a5c5]::bytes_mut::{impl#43}::eq).11), res: Local(HirId(DefId(0:805 ~ bytes[a5c5]::bytes_mut::{impl#43}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1630:18: 1630:23 (#0) }, Expr { hir_id: HirId(DefId(0:805 ~ bytes[a5c5]::bytes_mut::{impl#43}::eq).12), kind: Struct(LangItem(RangeFull, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1630:24: 1630:26 (#0)), [], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1630:24: 1630:26 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1630:23: 1630:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1630:18: 1630:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:807 ~ bytes[a5c5]::bytes_mut::{impl#44}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:6002 ~ alloc[5873]::string::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:809 ~ bytes[a5c5]::bytes_mut::{impl#45}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:809 ~ bytes[a5c5]::bytes_mut::{impl#45}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:809 ~ bytes[a5c5]::bytes_mut::{impl#45}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1642:10: 1642:15 (#0), res: Local(HirId(DefId(0:809 ~ bytes[a5c5]::bytes_mut::{impl#45}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:809 ~ bytes[a5c5]::bytes_mut::{impl#45}::eq).8), res: Local(HirId(DefId(0:809 ~ bytes[a5c5]::bytes_mut::{impl#45}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1642:10: 1642:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1642:9: 1642:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:809 ~ bytes[a5c5]::bytes_mut::{impl#45}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:809 ~ bytes[a5c5]::bytes_mut::{impl#45}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1642:20: 1642:24 (#0), res: Local(HirId(DefId(0:809 ~ bytes[a5c5]::bytes_mut::{impl#45}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:809 ~ bytes[a5c5]::bytes_mut::{impl#45}::eq).11), res: Local(HirId(DefId(0:809 ~ bytes[a5c5]::bytes_mut::{impl#45}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1642:20: 1642:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1642:19: 1642:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:811 ~ bytes[a5c5]::bytes_mut::{impl#46}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:6002 ~ alloc[5873]::string::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:815 ~ bytes[a5c5]::bytes_mut::{impl#47}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:815 ~ bytes[a5c5]::bytes_mut::{impl#47}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:815 ~ bytes[a5c5]::bytes_mut::{impl#47}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1657:10: 1657:14 (#0), res: Local(HirId(DefId(0:815 ~ bytes[a5c5]::bytes_mut::{impl#47}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:815 ~ bytes[a5c5]::bytes_mut::{impl#47}::eq).8), res: Local(HirId(DefId(0:815 ~ bytes[a5c5]::bytes_mut::{impl#47}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1657:10: 1657:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1657:9: 1657:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:815 ~ bytes[a5c5]::bytes_mut::{impl#47}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:815 ~ bytes[a5c5]::bytes_mut::{impl#47}::eq).10), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:815 ~ bytes[a5c5]::bytes_mut::{impl#47}::eq).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1657:20: 1657:25 (#0), res: Local(HirId(DefId(0:815 ~ bytes[a5c5]::bytes_mut::{impl#47}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:815 ~ bytes[a5c5]::bytes_mut::{impl#47}::eq).12), res: Local(HirId(DefId(0:815 ~ bytes[a5c5]::bytes_mut::{impl#47}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1657:20: 1657:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1657:19: 1657:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1657:18: 1657:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:819 ~ bytes[a5c5]::bytes_mut::{impl#48}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:821 ~ bytes[a5c5]::bytes_mut::{impl#49}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:821 ~ bytes[a5c5]::bytes_mut::{impl#49}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:821 ~ bytes[a5c5]::bytes_mut::{impl#49}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1672:10: 1672:15 (#0), res: Local(HirId(DefId(0:821 ~ bytes[a5c5]::bytes_mut::{impl#49}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:821 ~ bytes[a5c5]::bytes_mut::{impl#49}::eq).8), res: Local(HirId(DefId(0:821 ~ bytes[a5c5]::bytes_mut::{impl#49}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1672:10: 1672:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1672:9: 1672:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:821 ~ bytes[a5c5]::bytes_mut::{impl#49}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:821 ~ bytes[a5c5]::bytes_mut::{impl#49}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1672:20: 1672:24 (#0), res: Local(HirId(DefId(0:821 ~ bytes[a5c5]::bytes_mut::{impl#49}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:821 ~ bytes[a5c5]::bytes_mut::{impl#49}::eq).11), res: Local(HirId(DefId(0:821 ~ bytes[a5c5]::bytes_mut::{impl#49}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1672:20: 1672:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1672:19: 1672:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:823 ~ bytes[a5c5]::bytes_mut::{impl#50}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:825 ~ bytes[a5c5]::bytes_mut::{impl#51}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:825 ~ bytes[a5c5]::bytes_mut::{impl#51}::eq).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:825 ~ bytes[a5c5]::bytes_mut::{impl#51}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1684:10: 1684:15 (#0), res: Local(HirId(DefId(0:825 ~ bytes[a5c5]::bytes_mut::{impl#51}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:825 ~ bytes[a5c5]::bytes_mut::{impl#51}::eq).8), res: Local(HirId(DefId(0:825 ~ bytes[a5c5]::bytes_mut::{impl#51}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1684:10: 1684:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1684:9: 1684:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:825 ~ bytes[a5c5]::bytes_mut::{impl#51}::eq).9), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:825 ~ bytes[a5c5]::bytes_mut::{impl#51}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1684:20: 1684:24 (#0), res: Local(HirId(DefId(0:825 ~ bytes[a5c5]::bytes_mut::{impl#51}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:825 ~ bytes[a5c5]::bytes_mut::{impl#51}::eq).11), res: Local(HirId(DefId(0:825 ~ bytes[a5c5]::bytes_mut::{impl#51}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1684:20: 1684:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1684:19: 1684:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:827 ~ bytes[a5c5]::bytes_mut::{impl#52}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:829 ~ bytes[a5c5]::bytes_mut::{impl#53}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:829 ~ bytes[a5c5]::bytes_mut::{impl#53}::eq).6), kind: Index(Expr { hir_id: HirId(DefId(0:829 ~ bytes[a5c5]::bytes_mut::{impl#53}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1696:9: 1696:14 (#0), res: Local(HirId(DefId(0:829 ~ bytes[a5c5]::bytes_mut::{impl#53}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:829 ~ bytes[a5c5]::bytes_mut::{impl#53}::eq).8), res: Local(HirId(DefId(0:829 ~ bytes[a5c5]::bytes_mut::{impl#53}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1696:9: 1696:14 (#0) }, Expr { hir_id: HirId(DefId(0:829 ~ bytes[a5c5]::bytes_mut::{impl#53}::eq).9), kind: Struct(LangItem(RangeFull, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1696:15: 1696:17 (#0)), [], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1696:15: 1696:17 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1696:14: 1696:18 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1696:9: 1696:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:829 ~ bytes[a5c5]::bytes_mut::{impl#53}::eq).10), kind: Index(Expr { hir_id: HirId(DefId(0:829 ~ bytes[a5c5]::bytes_mut::{impl#53}::eq).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1696:22: 1696:26 (#0), res: Local(HirId(DefId(0:829 ~ bytes[a5c5]::bytes_mut::{impl#53}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:829 ~ bytes[a5c5]::bytes_mut::{impl#53}::eq).12), res: Local(HirId(DefId(0:829 ~ bytes[a5c5]::bytes_mut::{impl#53}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1696:22: 1696:26 (#0) }, Expr { hir_id: HirId(DefId(0:829 ~ bytes[a5c5]::bytes_mut::{impl#53}::eq).13), kind: Struct(LangItem(RangeFull, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1696:27: 1696:29 (#0)), [], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1696:27: 1696:29 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1696:26: 1696:30 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1696:22: 1696:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:831 ~ bytes[a5c5]::bytes_mut::{impl#54}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:831 ~ bytes[a5c5]::bytes_mut::{impl#54}::eq).6), kind: Index(Expr { hir_id: HirId(DefId(0:831 ~ bytes[a5c5]::bytes_mut::{impl#54}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1702:9: 1702:14 (#0), res: Local(HirId(DefId(0:831 ~ bytes[a5c5]::bytes_mut::{impl#54}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:831 ~ bytes[a5c5]::bytes_mut::{impl#54}::eq).8), res: Local(HirId(DefId(0:831 ~ bytes[a5c5]::bytes_mut::{impl#54}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1702:9: 1702:14 (#0) }, Expr { hir_id: HirId(DefId(0:831 ~ bytes[a5c5]::bytes_mut::{impl#54}::eq).9), kind: Struct(LangItem(RangeFull, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1702:15: 1702:17 (#0)), [], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1702:15: 1702:17 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1702:14: 1702:18 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1702:9: 1702:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:831 ~ bytes[a5c5]::bytes_mut::{impl#54}::eq).10), kind: Index(Expr { hir_id: HirId(DefId(0:831 ~ bytes[a5c5]::bytes_mut::{impl#54}::eq).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1702:22: 1702:26 (#0), res: Local(HirId(DefId(0:831 ~ bytes[a5c5]::bytes_mut::{impl#54}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:831 ~ bytes[a5c5]::bytes_mut::{impl#54}::eq).12), res: Local(HirId(DefId(0:831 ~ bytes[a5c5]::bytes_mut::{impl#54}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1702:22: 1702:26 (#0) }, Expr { hir_id: HirId(DefId(0:831 ~ bytes[a5c5]::bytes_mut::{impl#54}::eq).13), kind: Struct(LangItem(RangeFull, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1702:27: 1702:29 (#0)), [], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1702:27: 1702:29 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1702:26: 1702:30 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1702:22: 1702:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:833 ~ bytes[a5c5]::bytes_mut::{impl#55}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ bytes[a5c5]::bytes_mut::{impl#0}::kind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2013 ~ core[7d5a]::mem::manually_drop::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:833 ~ bytes[a5c5]::bytes_mut::{impl#55}::from).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1711:26: 1711:30 (#0), res: Local(HirId(DefId(0:833 ~ bytes[a5c5]::bytes_mut::{impl#55}::from).9)), segments: [PathSegment { ident: kind#0, hir_id: HirId(DefId(0:833 ~ bytes[a5c5]::bytes_mut::{impl#55}::from).24), res: Local(HirId(DefId(0:833 ~ bytes[a5c5]::bytes_mut::{impl#55}::from).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1711:26: 1711:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:833 ~ bytes[a5c5]::bytes_mut::{impl#55}::from).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1711:34: 1711:42 (#0), res: Def(Const, DefId(0:652 ~ bytes[a5c5]::bytes_mut::KIND_VEC)), segments: [PathSegment { ident: KIND_VEC#0, hir_id: HirId(DefId(0:833 ~ bytes[a5c5]::bytes_mut::{impl#55}::from).26), res: Def(Const, DefId(0:652 ~ bytes[a5c5]::bytes_mut::KIND_VEC)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1711:34: 1711:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:690 ~ bytes[a5c5]::bytes_mut::{impl#0}::get_vec_pos)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:837 ~ bytes[a5c5]::bytes_mut::rebuild_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:5735 ~ alloc[5873]::slice::{impl#0}::to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3656 ~ core[7d5a]::ops::deref::Deref::deref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2014 ~ core[7d5a]::mem::manually_drop::{impl#0}::into_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1985 ~ core[7d5a]::intrinsics::copy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2396 ~ core[7d5a]::ptr::non_null::{impl#3}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7451 ~ alloc[5873]::vec::{impl#1}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7453 ~ alloc[5873]::vec::{impl#1}::set_len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:834 ~ bytes[a5c5]::bytes_mut::vptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2389 ~ core[7d5a]::ptr::non_null::{impl#3}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2388 ~ core[7d5a]::ptr::non_null::{impl#3}::new_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:835 ~ bytes[a5c5]::bytes_mut::invalid_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2693 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::wrapping_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2754 ~ core[7d5a]::ptr::null_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bytes"}), Specific({"bytes"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:835 ~ bytes[a5c5]::bytes_mut::invalid_ptr).39), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:835 ~ bytes[a5c5]::bytes_mut::invalid_ptr).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#230), res: Local(HirId(DefId(0:835 ~ bytes[a5c5]::bytes_mut::invalid_ptr).31)), segments: [PathSegment { ident: left_val#230, hir_id: HirId(DefId(0:835 ~ bytes[a5c5]::bytes_mut::invalid_ptr).41), res: Local(HirId(DefId(0:835 ~ bytes[a5c5]::bytes_mut::invalid_ptr).31)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#230) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#230) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:835 ~ bytes[a5c5]::bytes_mut::invalid_ptr).42), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:835 ~ bytes[a5c5]::bytes_mut::invalid_ptr).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#230), res: Local(HirId(DefId(0:835 ~ bytes[a5c5]::bytes_mut::invalid_ptr).32)), segments: [PathSegment { ident: right_val#230, hir_id: HirId(DefId(0:835 ~ bytes[a5c5]::bytes_mut::invalid_ptr).44), res: Local(HirId(DefId(0:835 ~ bytes[a5c5]::bytes_mut::invalid_ptr).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#230) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#230) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:837 ~ bytes[a5c5]::bytes_mut::rebuild_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2691 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7427 ~ alloc[5873]::vec::{impl#0}::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:839 ~ bytes[a5c5]::bytes_mut::shared_v_clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10619 ~ core[7d5a]::sync::atomic::{impl#6}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:772 ~ bytes[a5c5]::bytes_mut::increment_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10610 ~ core[7d5a]::sync::atomic::{impl#6}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:432 ~ bytes[a5c5]::bytes::{impl#0}::with_vtable)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:840 ~ bytes[a5c5]::bytes_mut::shared_v_to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10619 ~ core[7d5a]::sync::atomic::{impl#6}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1985 ~ core[7d5a]::intrinsics::copy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7451 ~ alloc[5873]::vec::{impl#1}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7453 ~ alloc[5873]::vec::{impl#1}::set_len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:5735 ~ alloc[5873]::slice::{impl#0}::to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:841 ~ bytes[a5c5]::bytes_mut::shared_v_to_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10619 ~ core[7d5a]::sync::atomic::{impl#6}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:775 ~ bytes[a5c5]::bytes_mut::{impl#28}::is_unique)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:7439 ~ alloc[5873]::vec::{impl#1}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(4:7451 ~ alloc[5873]::vec::{impl#1}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:909 ~ bytes[a5c5]::offset_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:841 ~ bytes[a5c5]::bytes_mut::shared_v_to_mut).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1822:19: 1822:29 (#0), res: Local(HirId(DefId(0:841 ~ bytes[a5c5]::bytes_mut::shared_v_to_mut).49)), segments: [PathSegment { ident: v_capacity#0, hir_id: HirId(DefId(0:841 ~ bytes[a5c5]::bytes_mut::shared_v_to_mut).74), res: Local(HirId(DefId(0:841 ~ bytes[a5c5]::bytes_mut::shared_v_to_mut).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1822:19: 1822:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:841 ~ bytes[a5c5]::bytes_mut::shared_v_to_mut).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1822:32: 1822:38 (#0), res: Local(HirId(DefId(0:841 ~ bytes[a5c5]::bytes_mut::shared_v_to_mut).70)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:841 ~ bytes[a5c5]::bytes_mut::shared_v_to_mut).76), res: Local(HirId(DefId(0:841 ~ bytes[a5c5]::bytes_mut::shared_v_to_mut).70)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1822:32: 1822:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:834 ~ bytes[a5c5]::bytes_mut::vptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(4:5735 ~ alloc[5873]::slice::{impl#0}::to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:682 ~ bytes[a5c5]::bytes_mut::{impl#0}::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:842 ~ bytes[a5c5]::bytes_mut::shared_v_is_unique)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10619 ~ core[7d5a]::sync::atomic::{impl#6}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:37960 ~ core[7d5a]::sync::atomic::{impl#78}::load)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2655 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::cast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:842 ~ bytes[a5c5]::bytes_mut::shared_v_is_unique).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1842:5: 1842:14 (#0), res: Local(HirId(DefId(0:842 ~ bytes[a5c5]::bytes_mut::shared_v_is_unique).28)), segments: [PathSegment { ident: ref_count#0, hir_id: HirId(DefId(0:842 ~ bytes[a5c5]::bytes_mut::shared_v_is_unique).31), res: Local(HirId(DefId(0:842 ~ bytes[a5c5]::bytes_mut::shared_v_is_unique).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1842:5: 1842:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:842 ~ bytes[a5c5]::bytes_mut::shared_v_is_unique).32), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1842:18: 1842:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/bytes_mut.rs:1842:18: 1842:19 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:843 ~ bytes[a5c5]::bytes_mut::shared_v_drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:892 ~ bytes[a5c5]::loom::sync::atomic::AtomicMut::with_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:773 ~ bytes[a5c5]::bytes_mut::release_shared)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:845 ~ bytes[a5c5]::bytes_mut::_split_to_must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:846 ~ bytes[a5c5]::bytes_mut::_split_off_must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:847 ~ bytes[a5c5]::bytes_mut::_split_must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:17:16: 17:17 (#0), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).50), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:17:16: 17:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).51), kind: Lit(Spanned { node: Byte(10), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:17:21: 17:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:17:21: 17:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:19:23: 19:24 (#0), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).89), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:19:23: 19:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).90), kind: Lit(Spanned { node: Byte(13), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:19:28: 19:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:19:28: 19:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:21:23: 21:24 (#0), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).128), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:21:23: 21:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).129), kind: Lit(Spanned { node: Byte(9), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:21:28: 21:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:21:28: 21:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).166), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:25: 23:27 (#0) }, Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).167), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:23: 23:24 (#0), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).168), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:23: 23:24 (#0) }, Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).169), kind: Lit(Spanned { node: Byte(92), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:28: 23:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:28: 23:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:23: 23:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).170), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:39: 23:41 (#0) }, Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:37: 23:38 (#0), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).172), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:37: 23:38 (#0) }, Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).173), kind: Lit(Spanned { node: Byte(34), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:42: 23:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:42: 23:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:37: 23:46 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).167), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:23: 23:24 (#0), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).168), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:23: 23:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).169), kind: Lit(Spanned { node: Byte(92), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:28: 23:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:28: 23:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:37: 23:38 (#0), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).172), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:37: 23:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).173), kind: Lit(Spanned { node: Byte(34), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:42: 23:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:23:42: 23:46 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).223), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:25:23: 25:24 (#0), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).224), res: Local(HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:25:23: 25:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:859 ~ bytes[a5c5]::fmt::debug::{impl#0}::fmt).225), kind: Lit(Spanned { node: Byte(0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:25:28: 25:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/fmt/debug.rs:25:28: 25:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bytes"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3765 ~ core[7d5a]::ops::range::{impl#2}::contains)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11123 ~ core[7d5a]::fmt::{impl#2}::new_v1_formatted)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:11045 ~ core[7d5a]::fmt::rt::{impl#1}::new_lower_hex)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11026 ~ core[7d5a]::fmt::rt::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11071 ~ core[7d5a]::fmt::rt::{impl#2}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:861 ~ bytes[a5c5]::fmt::debug::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11137 ~ core[7d5a]::fmt::Debug::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:863 ~ bytes[a5c5]::fmt::debug::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11137 ~ core[7d5a]::fmt::Debug::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:875 ~ bytes[a5c5]::fmt::hex::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11123 ~ core[7d5a]::fmt::{impl#2}::new_v1_formatted)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11045 ~ core[7d5a]::fmt::rt::{impl#1}::new_lower_hex)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11026 ~ core[7d5a]::fmt::rt::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11071 ~ core[7d5a]::fmt::rt::{impl#2}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:877 ~ bytes[a5c5]::fmt::hex::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11123 ~ core[7d5a]::fmt::{impl#2}::new_v1_formatted)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11048 ~ core[7d5a]::fmt::rt::{impl#1}::new_upper_hex)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11026 ~ core[7d5a]::fmt::rt::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11071 ~ core[7d5a]::fmt::rt::{impl#2}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1202 ~ bytes[a5c5]::fmt::hex::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11148 ~ core[7d5a]::fmt::LowerHex::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1204 ~ bytes[a5c5]::fmt::hex::{impl#3}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11148 ~ core[7d5a]::fmt::LowerHex::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1206 ~ bytes[a5c5]::fmt::hex::{impl#4}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11150 ~ core[7d5a]::fmt::UpperHex::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1208 ~ bytes[a5c5]::fmt::hex::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11150 ~ core[7d5a]::fmt::UpperHex::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:897 ~ bytes[a5c5]::loom::sync::atomic::{impl#0}::with_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:897 ~ bytes[a5c5]::loom::sync::atomic::{impl#0}::with_mut).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/loom.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:897 ~ bytes[a5c5]::loom::sync::atomic::{impl#0}::with_mut).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:897 ~ bytes[a5c5]::loom::sync::atomic::{impl#0}::with_mut).7), res: Local(HirId(DefId(0:897 ~ bytes[a5c5]::loom::sync::atomic::{impl#0}::with_mut).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/loom.rs:17:17: 17:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:897 ~ bytes[a5c5]::loom::sync::atomic::{impl#0}::with_mut).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/loom.rs:17:17: 17:18 (#0), res: Local(HirId(DefId(0:897 ~ bytes[a5c5]::loom::sync::atomic::{impl#0}::with_mut).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:897 ~ bytes[a5c5]::loom::sync::atomic::{impl#0}::with_mut).7), res: Local(HirId(DefId(0:897 ~ bytes[a5c5]::loom::sync::atomic::{impl#0}::with_mut).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/loom.rs:17:17: 17:18 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:902 ~ bytes[a5c5]::abort)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5788 ~ std[e3cd]::process::abort)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:903 ~ bytes[a5c5]::saturating_sub_usize_u64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3174 ~ core[7d5a]::convert::TryFrom::try_from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:905 ~ bytes[a5c5]::min_u64_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3174 ~ core[7d5a]::convert::TryFrom::try_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3003 ~ core[7d5a]::cmp::Ord::min)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:907 ~ bytes[a5c5]::panic_advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:908 ~ bytes[a5c5]::panic_does_not_fit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:909 ~ bytes[a5c5]::offset_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:909 ~ bytes[a5c5]::offset_from).6), kind: Cast(Expr { hir_id: HirId(DefId(0:909 ~ bytes[a5c5]::offset_from).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/lib.rs:164:5: 164:8 (#0), res: Local(HirId(DefId(0:909 ~ bytes[a5c5]::offset_from).2)), segments: [PathSegment { ident: dst#0, hir_id: HirId(DefId(0:909 ~ bytes[a5c5]::offset_from).8), res: Local(HirId(DefId(0:909 ~ bytes[a5c5]::offset_from).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/lib.rs:164:5: 164:8 (#0) }, Ty { hir_id: HirId(DefId(0:909 ~ bytes[a5c5]::offset_from).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/lib.rs:164:12: 164:17 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:909 ~ bytes[a5c5]::offset_from).10), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/lib.rs:164:12: 164:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/lib.rs:164:5: 164:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:909 ~ bytes[a5c5]::offset_from).11), kind: Cast(Expr { hir_id: HirId(DefId(0:909 ~ bytes[a5c5]::offset_from).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/lib.rs:164:20: 164:28 (#0), res: Local(HirId(DefId(0:909 ~ bytes[a5c5]::offset_from).4)), segments: [PathSegment { ident: original#0, hir_id: HirId(DefId(0:909 ~ bytes[a5c5]::offset_from).13), res: Local(HirId(DefId(0:909 ~ bytes[a5c5]::offset_from).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/lib.rs:164:20: 164:28 (#0) }, Ty { hir_id: HirId(DefId(0:909 ~ bytes[a5c5]::offset_from).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/lib.rs:164:32: 164:37 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:909 ~ bytes[a5c5]::offset_from).15), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/lib.rs:164:32: 164:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.7.1/src/lib.rs:164:20: 164:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
